{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Desktop/Nako/nako/src/desktop/teacher/question-edit.tsx\";\nimport React from \"react\";\nimport Select from \"react-select\";\nimport ScoreSelector from \"./selector/ScoreSelector\";\nimport TimeSelector from \"./selector/TimeSelector\";\nimport styles from \"./teacher.module.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class QuestionEdit extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dropDownRef: /*#__PURE__*/React.createRef(),\n      questionRef: /*#__PURE__*/React.createRef(),\n      timeSelectorRef: /*#__PURE__*/React.createRef()\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    try {\n      if (prevProps.currentQuestion !== this.props.currentQuestion) {\n        // this.state.dropDownRef.current!.setState({ value: this.props.currentQuestion.type === \"Multiple\" ? this.props.data[0] : this.props.data[1] });\n        this.setState({\n          tempDropDownValue: this.props.currentQuestion.type === \"Multiple\" ? this.props.data[0] : this.props.data[1]\n        }, () => {\n          this.setState({\n            tempDropDownValue: undefined\n          });\n          this.state.timeSelectorRef.current.setState({\n            secsValue: this.props.currentQuestion.timeLimit % 60,\n            minsValue: Math.floor(this.props.currentQuestion.timeLimit / 60)\n          });\n          this.state.questionRef.current.value = this.props.currentQuestion.question;\n\n          if (this.props.currentQuestion.type === \"Multiple\") {\n            for (let i = 0; i < this.props.mcRefs.length; i++) {\n              var _this$props$currentQu;\n\n              this.props.mcRefs[i].text.current.value = (_this$props$currentQu = this.props.currentQuestion.choices[i]) !== null && _this$props$currentQu !== void 0 ? _this$props$currentQu : \"\";\n              this.props.mcRefs[i].checkbox.current.checked = false;\n            }\n\n            if (typeof this.props.currentQuestion.corr === \"number\") {\n              this.props.mcRefs[this.props.currentQuestion.corr - 1].checkbox.current.checked = true;\n            } else {\n              for (const i of this.props.currentQuestion.corr) {\n                this.props.mcRefs[i].checkbox.current.checked = true;\n              }\n            }\n          } else {// // I'm assuming that corr is either 0/1 if the type is T/F\n            // this.props.tfRefs[this.props.currentQuestion.corr ? 1 : 0].current!.checked = true;\n            // this.props.tfRefs[this.props.currentQuestion.corr ? 0 : 1].current!.checked = false;\n          }\n        });\n      }\n    } catch (error) {\n      console.log(error);\n    }\n\n    if (this.props.declareS === true) {\n      this.deactivateAll();\n      this.props.declareV(false);\n      console.log(`props of declare:` + this.props.declareS);\n    }\n  }\n\n  deactivateAll() {\n    if (this.state.questionRef.current) {\n      this.state.questionRef.current.value = \"\";\n    }\n\n    for (let i = 0; i < this.props.mcRefs.length; i++) {\n      if (this.props.mcRefs[i].text.current) {\n        this.props.mcRefs[i].text.current.value = \"\";\n      }\n\n      if (this.props.mcRefs[i].checkbox.current) {\n        this.props.mcRefs[i].checkbox.current.checked = false;\n      }\n    }\n\n    console.log(\"deactivate\");\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: styles[\"background-wrapper\"],\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: styles[\"timer\"],\n        children: /*#__PURE__*/_jsxDEV(TimeSelector, {\n          ref: this.state.timeSelectorRef,\n          minsValuePass: value => this.props.minsValuePass(value),\n          secsValuePass: value => this.props.secsValuePass(value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: styles[\"scorer\"],\n        children: /*#__PURE__*/_jsxDEV(ScoreSelector, {\n          scoreValuePass: value => this.props.scoreValuePass(value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: styles[\"selector\"],\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          id: styles[\"Next-button\"],\n          onClick: () => {\n            this.props.keep();\n            this.deactivateAll();\n          },\n          children: \"Finish Edit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Select, {\n          ref: this.state.dropDownRef,\n          id: styles[\"select\"],\n          defaultValue: {\n            label: \"Multiple Choices\",\n            value: \"Multiple\"\n          } //value={this.state.selectedOption}\n          ,\n          value: this.state.tempDropDownValue,\n          onChange: value => this.props.onSelectionChange(value),\n          options: this.props.data\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: styles[\"inputer\"],\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          ref: this.state.questionRef,\n          placeholder: \"Add Question...\",\n          id: styles[\"question-input\"],\n          type: \"text\",\n          onChange: e => this.props.onQuestionInputChange(e)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }, this), this.props.renderTarget]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/mac/Desktop/Nako/nako/src/desktop/teacher/question-edit.tsx"],"names":["React","Select","ScoreSelector","TimeSelector","styles","QuestionEdit","Component","constructor","props","state","dropDownRef","createRef","questionRef","timeSelectorRef","componentDidUpdate","prevProps","currentQuestion","setState","tempDropDownValue","type","data","undefined","current","secsValue","timeLimit","minsValue","Math","floor","value","question","i","mcRefs","length","text","choices","checkbox","checked","corr","error","console","log","declareS","deactivateAll","declareV","render","minsValuePass","secsValuePass","scoreValuePass","keep","label","onSelectionChange","e","onQuestionInputChange","renderTarget"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Select from \"react-select\";\nimport ScoreSelector from \"./selector/ScoreSelector\";\nimport TimeSelector from \"./selector/TimeSelector\";\nimport styles from \"./teacher.module.scss\";\n\ninterface QuestionEditProps {\n  currentQuestion: {\n    question: string;\n    type: string;\n    choices: string[];\n    timeLimit: number;\n    corr: number | number[];\n  };\n  minsValuePass: (value: number) => void;\n  secsValuePass: (value: number) => void;\n  scoreValuePass: (value: number) => void;\n  onSelectionChange: (value: {\n    label: string,\n    value: string\n  } | null) => void,\n  data: {\n    label: string;\n    value: string;\n  }[],\n  keep: () => void;\n  declareS: boolean;\n  declareV: (value: boolean) => void;\n  onQuestionInputChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  renderTarget: JSX.Element;\n  mcRefs: [\n    { text: React.RefObject<HTMLInputElement>, checkbox: React.RefObject<HTMLInputElement> },\n    { text: React.RefObject<HTMLInputElement>, checkbox: React.RefObject<HTMLInputElement> },\n    { text: React.RefObject<HTMLInputElement>, checkbox: React.RefObject<HTMLInputElement> },\n    { text: React.RefObject<HTMLInputElement>, checkbox: React.RefObject<HTMLInputElement> },\n    { text: React.RefObject<HTMLInputElement>, checkbox: React.RefObject<HTMLInputElement> },\n    { text: React.RefObject<HTMLInputElement>, checkbox: React.RefObject<HTMLInputElement> }\n  ];\n  tfRefs: [React.RefObject<HTMLInputElement>, React.RefObject<HTMLInputElement>];\n}\n\ninterface QuestionEditState {\n  dropDownRef: React.RefObject<Select<{ label: string; value: string; }>>;\n  questionRef: React.RefObject<HTMLInputElement>;\n  timeSelectorRef: React.RefObject<TimeSelector>;\n  tempDropDownValue?: { label: string, value: string };\n}\n\nexport default class QuestionEdit extends React.Component<QuestionEditProps, QuestionEditState> {\n  constructor(props: QuestionEditProps) {\n    super(props);\n\n    this.state = {\n      dropDownRef: React.createRef<Select<{ label: string; value: string; }>>(),\n      questionRef: React.createRef<HTMLInputElement>(),\n      timeSelectorRef: React.createRef<TimeSelector>()\n    };\n  }\n  \n  componentDidUpdate(prevProps: QuestionEditProps) {\n    try {\n      if (prevProps.currentQuestion !== this.props.currentQuestion) {\n        // this.state.dropDownRef.current!.setState({ value: this.props.currentQuestion.type === \"Multiple\" ? this.props.data[0] : this.props.data[1] });\n        this.setState({ tempDropDownValue: this.props.currentQuestion.type === \"Multiple\" ? this.props.data[0] : this.props.data[1] }, () => {\n          this.setState({ tempDropDownValue: undefined });\n          this.state.timeSelectorRef.current!.setState({\n            secsValue: this.props.currentQuestion.timeLimit % 60,\n            minsValue: Math.floor(this.props.currentQuestion.timeLimit / 60)\n          });\n          this.state.questionRef.current!.value = this.props.currentQuestion.question;\n\n          if (this.props.currentQuestion.type === \"Multiple\") {\n            for (let i = 0; i < this.props.mcRefs.length; i++) {\n              this.props.mcRefs[i].text.current!.value = this.props.currentQuestion.choices[i] ?? \"\";\n              this.props.mcRefs[i].checkbox.current!.checked = false;\n            }\n    \n            if (typeof this.props.currentQuestion.corr === \"number\") {\n              this.props.mcRefs[this.props.currentQuestion.corr - 1].checkbox.current!.checked = true;\n            } else {\n              for (const i of this.props.currentQuestion.corr) {\n                this.props.mcRefs[i].checkbox.current!.checked = true;\n              }\n            }\n          } else {\n            // // I'm assuming that corr is either 0/1 if the type is T/F\n            // this.props.tfRefs[this.props.currentQuestion.corr ? 1 : 0].current!.checked = true;\n            // this.props.tfRefs[this.props.currentQuestion.corr ? 0 : 1].current!.checked = false;\n          }\n        });\n      }\n    } catch (error) {\n      console.log(error);\n    }\n    if(this.props.declareS === true){\n      this.deactivateAll();\n      this.props.declareV(false);\n      console.log(`props of declare:` + this.props.declareS);\n    }\n  }\n\n  deactivateAll() {\n    if (this.state.questionRef.current) {\n      this.state.questionRef.current!.value = \"\";\n    }\n\n    for (let i = 0; i < this.props.mcRefs.length; i++) {\n      if (this.props.mcRefs[i].text.current) {\n        this.props.mcRefs[i].text.current!.value = \"\";\n      }\n\n      if (this.props.mcRefs[i].checkbox.current) {\n        this.props.mcRefs[i].checkbox.current!.checked = false;\n      }\n    }\n    console.log(\"deactivate\");\n  }\n\n  render() {\n    return (\n      <div id={styles[\"background-wrapper\"]}>\n        <div id={styles[\"timer\"]}>\n          <TimeSelector\n            ref={this.state.timeSelectorRef}\n            minsValuePass={value => this.props.minsValuePass(value)}\n            secsValuePass={value => this.props.secsValuePass(value)}\n          />\n        </div>\n        <div id={styles[\"scorer\"]}>\n          <ScoreSelector scoreValuePass={value => this.props.scoreValuePass(value)} />\n        </div>\n        <div id={styles[\"selector\"]}>\n        <button\n            id={styles[\"Next-button\"]}\n            onClick={() => {\n              this.props.keep();\n              this.deactivateAll();\n            }}\n          >\n            Finish Edit\n          </button>\n          <Select\n            ref={this.state.dropDownRef}\n            id={styles[\"select\"]}\n            defaultValue={{ label: \"Multiple Choices\", value: \"Multiple\" }}\n            //value={this.state.selectedOption}\n            value={this.state.tempDropDownValue}\n            onChange={value => this.props.onSelectionChange(value)}\n            options={this.props.data}\n          />\n        </div>\n        <div id={styles[\"inputer\"]}>\n          <input\n            ref={this.state.questionRef}\n            placeholder=\"Add Question...\"\n            id={styles[\"question-input\"]}\n            type=\"text\"\n            onChange={e => this.props.onQuestionInputChange(e)}\n          />\n        </div>\n        {this.props.renderTarget}\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}