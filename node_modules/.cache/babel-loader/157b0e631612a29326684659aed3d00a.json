{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Desktop/Nako/nako/src/desktop/game/game.tsx\";\nimport React from \"react\";\nimport { delay } from \"../../utils\";\nimport AnsweringMC from \"../AnsweringMC/answering_MultipleChoice\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar GamePhase;\n\n(function (GamePhase) {\n  GamePhase[GamePhase[\"Transition\"] = 0] = \"Transition\";\n  GamePhase[GamePhase[\"Active\"] = 1] = \"Active\";\n})(GamePhase || (GamePhase = {}));\n\nexport default class Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      questionCount: 0,\n      currentQuestion: 0,\n      currentPhase: GamePhase.Transition\n    };\n    this.props.connection.subscribe(\"req\", \"game_update\", async msg => {\n      this.setState({\n        currentPhase: GamePhase.Transition\n      });\n      await delay(500);\n      this.setState({\n        questionCount: this.state.questionCount + 1,\n        currentQuestion: msg.currentQuestion\n      });\n      this.props.connection.subscribe(\"req\", \"question_start\").then(() => {\n        this.setState({\n          currentPhase: GamePhase.Active\n        });\n        this.props.connection.subscribe(\"req\", \"question_end\").then(msg => {\n          this.setState({\n            correctAnswer: msg\n          });\n        });\n      });\n    });\n  }\n\n  render() {\n    const {\n      connection,\n      gameInfo,\n      ...rest\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(\"div\", { ...rest,\n      children: this.state.currentPhase === GamePhase.Transition ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"fill-parent\",\n        children: [\"Question \", this.state.questionCount.toString()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(AnsweringMC, {\n        connection: this.props.connection,\n        questionInfo: this.props.gameInfo.questions[this.state.currentQuestion],\n        correctAnswer: this.state.correctAnswer\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/mac/Desktop/Nako/nako/src/desktop/game/game.tsx"],"names":["React","delay","AnsweringMC","GamePhase","Game","Component","constructor","props","state","questionCount","currentQuestion","currentPhase","Transition","connection","subscribe","msg","setState","then","Active","correctAnswer","render","gameInfo","rest","toString","questions"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,KAAT,QAAsB,aAAtB;AACA,OAAOC,WAAP,MAAwB,yCAAxB;;IAcKC,S;;WAAAA,S;AAAAA,EAAAA,S,CAAAA,S;AAAAA,EAAAA,S,CAAAA,S;GAAAA,S,KAAAA,S;;AAKL,eAAe,MAAMC,IAAN,SAAmBJ,KAAK,CAACK,SAAzB,CAAyD;AACtEC,EAAAA,WAAW,CAACC,KAAD,EAAmB;AAC5B,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAa;AACXC,MAAAA,aAAa,EAAE,CADJ;AAEXC,MAAAA,eAAe,EAAE,CAFN;AAGXC,MAAAA,YAAY,EAAER,SAAS,CAACS;AAHb,KAAb;AAMA,SAAKL,KAAL,CAAWM,UAAX,CAAsBC,SAAtB,CAAgC,KAAhC,EAAuC,aAAvC,EAAsD,MAAOC,GAAP,IAAe;AACnE,WAAKC,QAAL,CAAc;AAAEL,QAAAA,YAAY,EAAER,SAAS,CAACS;AAA1B,OAAd;AACA,YAAMX,KAAK,CAAC,GAAD,CAAX;AACA,WAAKe,QAAL,CAAc;AACZP,QAAAA,aAAa,EAAE,KAAKD,KAAL,CAAWC,aAAX,GAA2B,CAD9B;AAEZC,QAAAA,eAAe,EAAEK,GAAG,CAACL;AAFT,OAAd;AAKA,WAAKH,KAAL,CAAWM,UAAX,CAAsBC,SAAtB,CAAgC,KAAhC,EAAuC,gBAAvC,EAAyDG,IAAzD,CAA8D,MAAM;AAClE,aAAKD,QAAL,CAAc;AAAEL,UAAAA,YAAY,EAAER,SAAS,CAACe;AAA1B,SAAd;AAEA,aAAKX,KAAL,CAAWM,UAAX,CAAsBC,SAAtB,CAAgC,KAAhC,EAAuC,cAAvC,EAAuDG,IAAvD,CAA4DF,GAAG,IAAI;AACjE,eAAKC,QAAL,CAAc;AAAEG,YAAAA,aAAa,EAAEJ;AAAjB,WAAd;AACD,SAFD;AAGD,OAND;AAOD,KAfD;AAgBD;;AAEDK,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEP,MAAAA,UAAF;AAAcQ,MAAAA,QAAd;AAAwB,SAAGC;AAA3B,QAAoC,KAAKf,KAA/C;AAEA,wBACE,oBAASe,IAAT;AAAA,gBACG,KAAKd,KAAL,CAAWG,YAAX,KAA4BR,SAAS,CAACS,UAAtC,gBACC;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA,gCACY,KAAKJ,KAAL,CAAWC,aAAX,CAAyBc,QAAzB,EADZ;AAAA;AAAA;AAAA;AAAA;AAAA,cADD,gBAKC,QAAC,WAAD;AACE,QAAA,UAAU,EAAE,KAAKhB,KAAL,CAAWM,UADzB;AAEE,QAAA,YAAY,EAAE,KAAKN,KAAL,CAAWc,QAAX,CAAoBG,SAApB,CAA8B,KAAKhB,KAAL,CAAWE,eAAzC,CAFhB;AAGE,QAAA,aAAa,EAAE,KAAKF,KAAL,CAAWW;AAH5B;AAAA;AAAA;AAAA;AAAA;AANJ;AAAA;AAAA;AAAA;AAAA,YADF;AAeD;;AA9CqE","sourcesContent":["import React from \"react\";\nimport NakoAPI, { GameInfo, QuestionEndRequest } from \"../../modules/websocket-messages\";\nimport { delay } from \"../../utils\";\nimport AnsweringMC from \"../AnsweringMC/answering_MultipleChoice\";\n\ninterface GameProps extends React.HTMLAttributes<HTMLDivElement> {\n  connection: NakoAPI;\n  gameInfo: GameInfo;\n}\n\ninterface GameState {\n  questionCount: number;\n  currentQuestion: number;\n  currentPhase: GamePhase;\n  correctAnswer?: QuestionEndRequest;\n}\n\nenum GamePhase {\n  Transition,\n  Active,\n}\n\nexport default class Game extends React.Component<GameProps, GameState> {\n  constructor(props: GameProps) {\n    super(props);\n\n    this.state = {\n      questionCount: 0,\n      currentQuestion: 0,\n      currentPhase: GamePhase.Transition,\n    };\n\n    this.props.connection.subscribe(\"req\", \"game_update\", async (msg) => {\n      this.setState({ currentPhase: GamePhase.Transition });\n      await delay(500);\n      this.setState({\n        questionCount: this.state.questionCount + 1,\n        currentQuestion: msg.currentQuestion,\n      });\n\n      this.props.connection.subscribe(\"req\", \"question_start\").then(() => {\n        this.setState({ currentPhase: GamePhase.Active });\n\n        this.props.connection.subscribe(\"req\", \"question_end\").then(msg => {\n          this.setState({ correctAnswer: msg });\n        });\n      });\n    });\n  }\n\n  render() {\n    const { connection, gameInfo, ...rest } = this.props;\n\n    return (\n      <div {...rest}>\n        {this.state.currentPhase === GamePhase.Transition ? (\n          <div className=\"fill-parent\">\n            Question {this.state.questionCount.toString()}\n          </div>\n        ) : (\n          <AnsweringMC\n            connection={this.props.connection}\n            questionInfo={this.props.gameInfo.questions[this.state.currentQuestion]}\n            correctAnswer={this.state.correctAnswer}\n          />\n        )}\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}