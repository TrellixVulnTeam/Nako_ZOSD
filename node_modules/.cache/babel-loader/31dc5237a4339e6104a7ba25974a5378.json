{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Desktop/Nako/nako/src/desktop/game/game.tsx\";\nimport React from \"react\";\nimport { CSSTransition } from \"react-transition-group\";\nimport { animate, delay } from \"../../utils\";\nimport AnsweringMC from \"../AnsweringMC/answering_MultipleChoice\";\nimport styles from \"./game.module.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar GamePhase;\n\n(function (GamePhase) {\n  GamePhase[GamePhase[\"Transition\"] = 0] = \"Transition\";\n  GamePhase[GamePhase[\"Active\"] = 1] = \"Active\";\n  GamePhase[GamePhase[\"Ended\"] = 2] = \"Ended\";\n})(GamePhase || (GamePhase = {}));\n\nexport default class Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      questionCount: 0,\n      currentQuestion: 0,\n      currentPhase: GamePhase.Transition,\n      questionNumberElement: /*#__PURE__*/React.createRef()\n    }; // Gameplay loop\n\n    this.props.connection.subscribe(\"req\", \"game_update\", async msg => {\n      this.setState({\n        currentPhase: GamePhase.Transition\n      });\n      await delay(500);\n      this.setState({\n        questionCount: this.state.questionCount + 1,\n        currentQuestion: msg.currentQuestion\n      });\n\n      if (this.state.questionNumberElement.current) {\n        await animate(\"bounce\", this.state.questionNumberElement.current, 500);\n      }\n\n      this.props.connection.send({\n        method: \"res\",\n        type: \"game_update\",\n        payload: null\n      });\n      this.props.connection.subscribe(\"req\", \"question_start\").then(() => {\n        this.props.connection.send({\n          method: \"res\",\n          type: \"question_start\",\n          payload: null\n        });\n        console.log(\"Question started\");\n        this.setState({\n          currentPhase: GamePhase.Active\n        });\n        this.props.connection.subscribe(\"req\", \"question_end\").then(msg => {\n          this.props.connection.send({\n            method: \"res\",\n            type: \"question_end\",\n            payload: null\n          });\n          console.log(\"Question ended\");\n          this.setState({\n            correctAnswer: msg\n          });\n        });\n      });\n    });\n    this.props.connection.subscribe(\"req\", \"game_end\").then(msg => {\n      this.props.connection.send({\n        method: \"res\",\n        type: \"game_end\",\n        payload: null\n      });\n      console.log(\"Game ended\");\n      console.log(msg);\n      this.setState({\n        currentPhase: GamePhase.Ended\n      });\n    });\n  }\n\n  render() {\n    const {\n      connection,\n      gameInfo,\n      ...rest\n    } = this.props;\n    let renderTarget;\n\n    switch (this.state.currentPhase) {\n      case GamePhase.Transition:\n        renderTarget = /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"fill-parent\",\n          id: styles.transition,\n          children: /*#__PURE__*/_jsxDEV(CSSTransition, {\n            in: this.state.currentPhase === GamePhase.Transition,\n            appear: true,\n            exit: false,\n            timeout: 500,\n            classNames: {\n              enter: styles[\"slide-in-enter\"],\n              enterActive: styles[\"slide-in-enter-active\"],\n              enterDone: styles[\"slide-in-enter-done\"]\n            },\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n                children: \"Question \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 115,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n                ref: this.state.questionNumberElement,\n                children: this.state.questionCount.toString()\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 116,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this);\n        break;\n\n      case GamePhase.Active:\n        renderTarget = /*#__PURE__*/_jsxDEV(AnsweringMC, {\n          connection: this.props.connection,\n          questionInfo: this.props.gameInfo.questions[this.state.currentQuestion],\n          correctAnswer: this.state.correctAnswer\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 11\n        }, this);\n        break;\n\n      default:\n        renderTarget = /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"fill-parent\",\n          children: \"TODO: Result UI\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 24\n        }, this);\n        break;\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", { ...rest,\n      children: renderTarget\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/mac/Desktop/Nako/nako/src/desktop/game/game.tsx"],"names":["React","CSSTransition","animate","delay","AnsweringMC","styles","GamePhase","Game","Component","constructor","props","state","questionCount","currentQuestion","currentPhase","Transition","questionNumberElement","createRef","connection","subscribe","msg","setState","current","send","method","type","payload","then","console","log","Active","correctAnswer","Ended","render","gameInfo","rest","renderTarget","transition","enter","enterActive","enterDone","toString","questions"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { CSSTransition } from \"react-transition-group\";\nimport NakoAPI, { GameInfo, QuestionEndRequest } from \"../../modules/websocket-messages\";\nimport { animate, delay } from \"../../utils\";\nimport AnsweringMC from \"../AnsweringMC/answering_MultipleChoice\";\nimport styles from \"./game.module.scss\";\n\ninterface GameProps extends React.HTMLAttributes<HTMLDivElement> {\n  connection: NakoAPI;\n  gameInfo: GameInfo;\n}\n\ninterface GameState {\n  questionCount: number;\n  currentQuestion: number;\n  currentPhase: GamePhase;\n  questionNumberElement: React.RefObject<HTMLHeadingElement>;\n  correctAnswer?: QuestionEndRequest;\n}\n\nenum GamePhase {\n  Transition,\n  Active,\n  Ended\n}\n\nexport default class Game extends React.Component<GameProps, GameState> {\n  constructor(props: GameProps) {\n    super(props);\n\n    this.state = {\n      questionCount: 0,\n      currentQuestion: 0,\n      currentPhase: GamePhase.Transition,\n      questionNumberElement: React.createRef<HTMLHeadingElement>()\n    };\n\n    // Gameplay loop\n    this.props.connection.subscribe(\"req\", \"game_update\", async (msg) => {\n      this.setState({ currentPhase: GamePhase.Transition });\n\n      await delay(500);\n\n      this.setState({\n        questionCount: this.state.questionCount + 1,\n        currentQuestion: msg.currentQuestion,\n      });\n\n      if (this.state.questionNumberElement.current) {\n        await animate(\"bounce\", this.state.questionNumberElement.current, 500);\n      }\n\n      this.props.connection.send({\n        method: \"res\",\n        type: \"game_update\",\n        payload: null\n      });\n\n      this.props.connection.subscribe(\"req\", \"question_start\").then(() => {\n        this.props.connection.send({\n          method: \"res\",\n          type: \"question_start\",\n          payload: null\n        });\n\n        console.log(\"Question started\");\n        this.setState({ currentPhase: GamePhase.Active });\n\n        this.props.connection.subscribe(\"req\", \"question_end\").then(msg => {\n          this.props.connection.send({\n            method: \"res\",\n            type: \"question_end\",\n            payload: null\n          });\n\n          console.log(\"Question ended\");\n          this.setState({ correctAnswer: msg });\n        });\n      });\n    });\n\n    this.props.connection.subscribe(\"req\", \"game_end\").then(msg => {\n      this.props.connection.send({\n        method: \"res\",\n        type: \"game_end\",\n        payload: null\n      });\n\n      console.log(\"Game ended\");\n      console.log(msg);\n      this.setState({ currentPhase: GamePhase.Ended });\n    });\n  }\n\n  render() {\n    const { connection, gameInfo, ...rest } = this.props;\n    let renderTarget: JSX.Element;\n\n    switch (this.state.currentPhase) {\n      case GamePhase.Transition:\n        renderTarget =\n          <div className=\"fill-parent\" id={styles.transition}>\n            <CSSTransition\n              in={this.state.currentPhase === GamePhase.Transition}\n              appear={true}\n              exit={false}\n              timeout={500}\n              classNames={{\n                enter: styles[\"slide-in-enter\"],\n                enterActive: styles[\"slide-in-enter-active\"],\n                enterDone: styles[\"slide-in-enter-done\"],\n              }}\n            >\n              <span>\n                <h1>Question </h1>\n                <h1 ref={this.state.questionNumberElement}>{this.state.questionCount.toString()}</h1>\n              </span>\n            </CSSTransition>\n          </div>;\n        break;\n\n      case GamePhase.Active:\n        renderTarget =\n          <AnsweringMC\n            connection={this.props.connection}\n            questionInfo={this.props.gameInfo.questions[this.state.currentQuestion]}\n            correctAnswer={this.state.correctAnswer}\n          />;\n        break;\n\n      default:\n        renderTarget = <div className=\"fill-parent\">TODO: Result UI</div>;\n        break;\n    }\n\n    return (\n      <div {...rest}>\n        {renderTarget}\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}