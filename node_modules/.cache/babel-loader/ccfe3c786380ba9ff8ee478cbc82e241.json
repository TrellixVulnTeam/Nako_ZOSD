{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Desktop/Nako/nako/src/desktop/game/game.tsx\";\nimport React from \"react\";\nimport { CSSTransition } from \"react-transition-group\";\nimport { animate, delay } from \"../../utils\";\nimport AnsweringMC from \"../AnsweringMC/answering_MultipleChoice\";\nimport styles from \"./game.module.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar GamePhase;\n\n(function (GamePhase) {\n  GamePhase[GamePhase[\"Transition\"] = 0] = \"Transition\";\n  GamePhase[GamePhase[\"Active\"] = 1] = \"Active\";\n  GamePhase[GamePhase[\"Ended\"] = 2] = \"Ended\";\n})(GamePhase || (GamePhase = {}));\n\nexport default class Game extends React.Component {\n  constructor(props) {\n    super(props);\n\n    window.startSequentialDisplay = () => this.startSequentialDisplay(this.state.result.length, 200);\n\n    this.state = {\n      questionCount: 0,\n      currentQuestion: 0,\n      currentPhase: GamePhase.Transition,\n      questionNumberElement: /*#__PURE__*/React.createRef(),\n      resultScrollDiv: /*#__PURE__*/React.createRef(),\n      sequentialDisplayCounter: 0,\n      result: [{\n        name: \"Test1\",\n        score: 0\n      }, {\n        name: \"Test2\",\n        score: 1\n      }, {\n        name: \"Test3\",\n        score: 2\n      }, {\n        name: \"Test4\",\n        score: 3\n      }, {\n        name: \"Test5\",\n        score: 4\n      }]\n    }; // Gameplay loop\n\n    const loop = () => this.props.connection.subscribe(\"req\", \"game_update\").then(async msg => {\n      this.setState({\n        currentPhase: GamePhase.Transition\n      });\n      await new Promise(res => this.setState({\n        onSlideAnimComplete: res\n      }, () => console.log(\"Waiting for slide-in animation to complete\")));\n      this.setState({\n        questionCount: this.state.questionCount + 1,\n        currentQuestion: msg.currentQuestion\n      });\n\n      if (this.state.questionNumberElement.current) {\n        await animate(\"bounce\", this.state.questionNumberElement.current, 500);\n      } else {\n        console.warn(\"questionNumberElement was not found in DOM\");\n      }\n\n      this.props.connection.send({\n        method: \"res\",\n        type: \"game_update\",\n        payload: null\n      });\n      this.props.connection.subscribe(\"req\", \"question_start\").then(() => {\n        this.props.connection.send({\n          method: \"res\",\n          type: \"question_start\",\n          payload: null\n        });\n        console.log(\"Question started\");\n        this.setState({\n          currentPhase: GamePhase.Active,\n          correctAnswer: undefined\n        });\n        this.props.connection.subscribe(\"req\", \"question_end\").then(msg => {\n          this.props.connection.send({\n            method: \"res\",\n            type: \"question_end\",\n            payload: null\n          });\n          console.log(\"Question ended\");\n          this.setState({\n            correctAnswer: msg\n          });\n\n          if (this.state.currentPhase !== GamePhase.Ended) {\n            loop();\n          }\n        });\n      });\n    });\n\n    this.props.connection.subscribe(\"req\", \"game_end\").then(msg => {\n      this.props.connection.send({\n        method: \"res\",\n        type: \"game_end\",\n        payload: null\n      });\n      console.log(\"Game ended\");\n      console.log(msg);\n      this.setState({\n        currentPhase: GamePhase.Ended,\n        result: [...msg].sort((a, b) => b.score - a.score)\n      }, () => this.startSequentialDisplay(this.state.result.length, 200));\n    });\n    loop();\n  }\n\n  async startSequentialDisplay(length, ms) {\n    for (let i = 1; i <= length; i++) {\n      this.setState({\n        sequentialDisplayCounter: i\n      });\n      await delay(ms);\n    }\n  }\n\n  render() {\n    const {\n      connection,\n      gameInfo,\n      ...rest\n    } = this.props;\n    let renderTarget;\n\n    switch (this.state.currentPhase) {\n      case GamePhase.Transition:\n        renderTarget = /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"fill-parent\",\n          id: styles.transition,\n          children: /*#__PURE__*/_jsxDEV(CSSTransition, {\n            in: true,\n            appear: true,\n            exit: false,\n            timeout: 1500,\n            classNames: {\n              appear: styles[\"slide-t2b-appear\"],\n              appearActive: styles[\"slide-t2b-appear-active\"],\n              appearDone: styles[\"slide-t2b-appear-done\"]\n            },\n            onEntered: async () => {\n              console.log(\"Animation completed\");\n              let loggedWarning = false;\n\n              while (!this.state.onSlideAnimComplete) {\n                if (!loggedWarning) {\n                  console.log(\"There was no promise to resolve, forcing delay for one...\");\n                  loggedWarning = true;\n                }\n\n                await delay(200);\n              }\n\n              this.state.onSlideAnimComplete();\n            },\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n                children: \"Question \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 181,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n                ref: this.state.questionNumberElement,\n                children: this.state.questionCount.toString()\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 182,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 180,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 11\n        }, this);\n        break;\n\n      case GamePhase.Active:\n        renderTarget = /*#__PURE__*/_jsxDEV(AnsweringMC, {\n          connection: this.props.connection,\n          questionInfo: this.props.gameInfo.questions[this.state.currentQuestion],\n          timing: this.props.timing,\n          correctAnswer: this.state.correctAnswer,\n          currentQuestionProps: this.state.currentQuestion\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 11\n        }, this);\n        break;\n\n      default:\n        renderTarget = /*#__PURE__*/_jsxDEV(\"div\", {\n          id: styles.result,\n          className: \"fill-parent\",\n          children: this.state.result ? /*#__PURE__*/_jsxDEV(\"section\", {\n            children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n              children: \"Results\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 210,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 211,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              ref: this.state.resultScrollDiv,\n              style: this.state.resultScrollDiv.current && this.state.resultScrollDiv.current.scrollHeight - this.state.resultScrollDiv.current.clientHeight ? {\n                paddingRight: \"15px\"\n              } : undefined,\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  id: styles[\"rank-header\"],\n                  className: \"fill-parent\",\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                    children: \"Name\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 220,\n                    columnNumber: 77\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    children: \"Score\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 220,\n                    columnNumber: 94\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 220,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 219,\n                columnNumber: 19\n              }, this), this.state.result.slice(0, this.state.sequentialDisplayCounter).map((result, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n                children: /*#__PURE__*/_jsxDEV(CSSTransition, {\n                  in: true,\n                  appear: true,\n                  exit: false,\n                  timeout: 500,\n                  classNames: {\n                    appear: styles[\"slide-b2t-appear\"],\n                    appearActive: styles[\"slide-b2t-appear-active\"],\n                    appearDone: styles[\"slide-b2t-appear-done\"]\n                  },\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"fill-parent\",\n                    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                      children: result.name\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 232,\n                      columnNumber: 54\n                    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                      children: result.score\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 232,\n                      columnNumber: 80\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 232,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 224,\n                  columnNumber: 23\n                }, this)\n              }, i, false, {\n                fileName: _jsxFileName,\n                lineNumber: 223,\n                columnNumber: 21\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 212,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(\"h1\", {\n            className: \"error\",\n            children: \"Failed to retrieve results.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 11\n        }, this);\n        break;\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", { ...rest,\n      children: renderTarget\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 12\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/mac/Desktop/Nako/nako/src/desktop/game/game.tsx"],"names":["React","CSSTransition","animate","delay","AnsweringMC","styles","GamePhase","Game","Component","constructor","props","window","startSequentialDisplay","state","result","length","questionCount","currentQuestion","currentPhase","Transition","questionNumberElement","createRef","resultScrollDiv","sequentialDisplayCounter","name","score","loop","connection","subscribe","then","msg","setState","Promise","res","onSlideAnimComplete","console","log","current","warn","send","method","type","payload","Active","correctAnswer","undefined","Ended","sort","a","b","ms","i","render","gameInfo","rest","renderTarget","transition","appear","appearActive","appearDone","loggedWarning","toString","questions","timing","scrollHeight","clientHeight","paddingRight","slice","map"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAT,QAA8B,wBAA9B;AAMA,SAASC,OAAT,EAAkBC,KAAlB,QAA+B,aAA/B;AACA,OAAOC,WAAP,MAAwB,yCAAxB;AACA,OAAOC,MAAP,MAAmB,oBAAnB;;IAuBKC,S;;WAAAA,S;AAAAA,EAAAA,S,CAAAA,S;AAAAA,EAAAA,S,CAAAA,S;AAAAA,EAAAA,S,CAAAA,S;GAAAA,S,KAAAA,S;;AAML,eAAe,MAAMC,IAAN,SAAmBP,KAAK,CAACQ,SAAzB,CAAyD;AACtEC,EAAAA,WAAW,CAACC,KAAD,EAAmB;AAC5B,UAAMA,KAAN;;AAECC,IAAAA,MAAD,CAAgBC,sBAAhB,GAAyC,MAAM,KAAKA,sBAAL,CAA4B,KAAKC,KAAL,CAAWC,MAAX,CAAmBC,MAA/C,EAAuD,GAAvD,CAA/C;;AAEA,SAAKF,KAAL,GAAa;AACXG,MAAAA,aAAa,EAAE,CADJ;AAEXC,MAAAA,eAAe,EAAE,CAFN;AAGXC,MAAAA,YAAY,EAAEZ,SAAS,CAACa,UAHb;AAIXC,MAAAA,qBAAqB,eAAEpB,KAAK,CAACqB,SAAN,EAJZ;AAKXC,MAAAA,eAAe,eAAEtB,KAAK,CAACqB,SAAN,EALN;AAMXE,MAAAA,wBAAwB,EAAE,CANf;AAOXT,MAAAA,MAAM,EAAE,CAAC;AACPU,QAAAA,IAAI,EAAE,OADC;AAEPC,QAAAA,KAAK,EAAE;AAFA,OAAD,EAGL;AACDD,QAAAA,IAAI,EAAE,OADL;AAEDC,QAAAA,KAAK,EAAE;AAFN,OAHK,EAML;AACDD,QAAAA,IAAI,EAAE,OADL;AAEDC,QAAAA,KAAK,EAAE;AAFN,OANK,EASL;AACDD,QAAAA,IAAI,EAAE,OADL;AAEDC,QAAAA,KAAK,EAAE;AAFN,OATK,EAYL;AACDD,QAAAA,IAAI,EAAE,OADL;AAEDC,QAAAA,KAAK,EAAE;AAFN,OAZK;AAPG,KAAb,CAL4B,CA8B5B;;AACA,UAAMC,IAAI,GAAG,MAAM,KAAKhB,KAAL,CAAWiB,UAAX,CAAsBC,SAAtB,CAAgC,KAAhC,EAAuC,aAAvC,EAAsDC,IAAtD,CAA2D,MAAOC,GAAP,IAAe;AAC3F,WAAKC,QAAL,CAAc;AAAEb,QAAAA,YAAY,EAAEZ,SAAS,CAACa;AAA1B,OAAd;AACA,YAAM,IAAIa,OAAJ,CAAkBC,GAAG,IAAI,KAAKF,QAAL,CAAc;AAAEG,QAAAA,mBAAmB,EAAED;AAAvB,OAAd,EAA4C,MAAME,OAAO,CAACC,GAAR,CAAY,4CAAZ,CAAlD,CAAzB,CAAN;AAEA,WAAKL,QAAL,CAAc;AACZf,QAAAA,aAAa,EAAE,KAAKH,KAAL,CAAWG,aAAX,GAA2B,CAD9B;AAEZC,QAAAA,eAAe,EAAEa,GAAG,CAACb;AAFT,OAAd;;AAKA,UAAI,KAAKJ,KAAL,CAAWO,qBAAX,CAAiCiB,OAArC,EAA8C;AAC5C,cAAMnC,OAAO,CAAC,QAAD,EAAW,KAAKW,KAAL,CAAWO,qBAAX,CAAiCiB,OAA5C,EAAqD,GAArD,CAAb;AACD,OAFD,MAEO;AACLF,QAAAA,OAAO,CAACG,IAAR,CAAa,4CAAb;AACD;;AAED,WAAK5B,KAAL,CAAWiB,UAAX,CAAsBY,IAAtB,CAA2B;AACzBC,QAAAA,MAAM,EAAE,KADiB;AAEzBC,QAAAA,IAAI,EAAE,aAFmB;AAGzBC,QAAAA,OAAO,EAAE;AAHgB,OAA3B;AAMA,WAAKhC,KAAL,CAAWiB,UAAX,CAAsBC,SAAtB,CAAgC,KAAhC,EAAuC,gBAAvC,EAAyDC,IAAzD,CAA8D,MAAM;AAClE,aAAKnB,KAAL,CAAWiB,UAAX,CAAsBY,IAAtB,CAA2B;AACzBC,UAAAA,MAAM,EAAE,KADiB;AAEzBC,UAAAA,IAAI,EAAE,gBAFmB;AAGzBC,UAAAA,OAAO,EAAE;AAHgB,SAA3B;AAMAP,QAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACA,aAAKL,QAAL,CAAc;AAAEb,UAAAA,YAAY,EAAEZ,SAAS,CAACqC,MAA1B;AAAkCC,UAAAA,aAAa,EAAEC;AAAjD,SAAd;AAEA,aAAKnC,KAAL,CAAWiB,UAAX,CAAsBC,SAAtB,CAAgC,KAAhC,EAAuC,cAAvC,EAAuDC,IAAvD,CAA6DC,GAAD,IAAS;AACnE,eAAKpB,KAAL,CAAWiB,UAAX,CAAsBY,IAAtB,CAA2B;AACzBC,YAAAA,MAAM,EAAE,KADiB;AAEzBC,YAAAA,IAAI,EAAE,cAFmB;AAGzBC,YAAAA,OAAO,EAAE;AAHgB,WAA3B;AAMAP,UAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACA,eAAKL,QAAL,CAAc;AAAEa,YAAAA,aAAa,EAAEd;AAAjB,WAAd;;AAEA,cAAI,KAAKjB,KAAL,CAAWK,YAAX,KAA4BZ,SAAS,CAACwC,KAA1C,EAAiD;AAC/CpB,YAAAA,IAAI;AACL;AACF,SAbD;AAcD,OAxBD;AAyBD,KA9CkB,CAAnB;;AAgDA,SAAKhB,KAAL,CAAWiB,UAAX,CAAsBC,SAAtB,CAAgC,KAAhC,EAAuC,UAAvC,EAAmDC,IAAnD,CAAyDC,GAAD,IAAS;AAC/D,WAAKpB,KAAL,CAAWiB,UAAX,CAAsBY,IAAtB,CAA2B;AACzBC,QAAAA,MAAM,EAAE,KADiB;AAEzBC,QAAAA,IAAI,EAAE,UAFmB;AAGzBC,QAAAA,OAAO,EAAE;AAHgB,OAA3B;AAMAP,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYN,GAAZ;AAEA,WAAKC,QAAL,CACE;AAAEb,QAAAA,YAAY,EAAEZ,SAAS,CAACwC,KAA1B;AAAiChC,QAAAA,MAAM,EAAE,CAAC,GAAGgB,GAAJ,EAASiB,IAAT,CAAc,CAACC,CAAD,EAAIC,CAAJ,KAAUA,CAAC,CAACxB,KAAF,GAAUuB,CAAC,CAACvB,KAApC;AAAzC,OADF,EAEE,MAAM,KAAKb,sBAAL,CAA4B,KAAKC,KAAL,CAAWC,MAAX,CAAmBC,MAA/C,EAAuD,GAAvD,CAFR;AAID,KAdD;AAgBAW,IAAAA,IAAI;AACL;;AAE2B,QAAtBd,sBAAsB,CAACG,MAAD,EAAiBmC,EAAjB,EAA6B;AACvD,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIpC,MAArB,EAA6BoC,CAAC,EAA9B,EAAkC;AAChC,WAAKpB,QAAL,CAAc;AAAER,QAAAA,wBAAwB,EAAE4B;AAA5B,OAAd;AACA,YAAMhD,KAAK,CAAC+C,EAAD,CAAX;AACD;AACF;;AAEDE,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEzB,MAAAA,UAAF;AAAc0B,MAAAA,QAAd;AAAwB,SAAGC;AAA3B,QAAoC,KAAK5C,KAA/C;AACA,QAAI6C,YAAJ;;AAEA,YAAQ,KAAK1C,KAAL,CAAWK,YAAnB;AACE,WAAKZ,SAAS,CAACa,UAAf;AACEoC,QAAAA,YAAY,gBACV;AAAK,UAAA,SAAS,EAAC,aAAf;AAA6B,UAAA,EAAE,EAAElD,MAAM,CAACmD,UAAxC;AAAA,iCACE,QAAC,aAAD;AACE,YAAA,EAAE,EAAE,IADN;AAEE,YAAA,MAAM,EAAE,IAFV;AAGE,YAAA,IAAI,EAAE,KAHR;AAIE,YAAA,OAAO,EAAE,IAJX;AAKE,YAAA,UAAU,EAAE;AACVC,cAAAA,MAAM,EAAEpD,MAAM,CAAC,kBAAD,CADJ;AAEVqD,cAAAA,YAAY,EAAErD,MAAM,CAAC,yBAAD,CAFV;AAGVsD,cAAAA,UAAU,EAAEtD,MAAM,CAAC,uBAAD;AAHR,aALd;AAUE,YAAA,SAAS,EAAE,YAAY;AACrB8B,cAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AAEA,kBAAIwB,aAAa,GAAG,KAApB;;AAEA,qBAAO,CAAC,KAAK/C,KAAL,CAAWqB,mBAAnB,EAAwC;AACtC,oBAAI,CAAC0B,aAAL,EAAoB;AAClBzB,kBAAAA,OAAO,CAACC,GAAR,CAAY,2DAAZ;AACAwB,kBAAAA,aAAa,GAAG,IAAhB;AACD;;AAED,sBAAMzD,KAAK,CAAC,GAAD,CAAX;AACD;;AAED,mBAAKU,KAAL,CAAWqB,mBAAX;AACD,aAzBH;AAAA,mCA2BE;AAAA,sCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,eAEE;AAAI,gBAAA,GAAG,EAAE,KAAKrB,KAAL,CAAWO,qBAApB;AAAA,0BACG,KAAKP,KAAL,CAAWG,aAAX,CAAyB6C,QAAzB;AADH;AAAA;AAAA;AAAA;AAAA,sBAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AA3BF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBADF;AAsCA;;AAEF,WAAKvD,SAAS,CAACqC,MAAf;AACEY,QAAAA,YAAY,gBACV,QAAC,WAAD;AACE,UAAA,UAAU,EAAE,KAAK7C,KAAL,CAAWiB,UADzB;AAEE,UAAA,YAAY,EACV,KAAKjB,KAAL,CAAW2C,QAAX,CAAoBS,SAApB,CAA8B,KAAKjD,KAAL,CAAWI,eAAzC,CAHJ;AAKE,UAAA,MAAM,EAAG,KAAKP,KAAL,CAAWqD,MALtB;AAME,UAAA,aAAa,EAAE,KAAKlD,KAAL,CAAW+B,aAN5B;AAOE,UAAA,oBAAoB,EAAE,KAAK/B,KAAL,CAAWI;AAPnC;AAAA;AAAA;AAAA;AAAA,gBADF;AAWA;;AAEF;AACEsC,QAAAA,YAAY,gBACV;AAAK,UAAA,EAAE,EAAElD,MAAM,CAACS,MAAhB;AAAwB,UAAA,SAAS,EAAC,aAAlC;AAAA,oBACG,KAAKD,KAAL,CAAWC,MAAX,gBACC;AAAA,oCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,eAEE;AAAA;AAAA;AAAA;AAAA,oBAFF,eAGE;AACE,cAAA,GAAG,EAAE,KAAKD,KAAL,CAAWS,eADlB;AAEE,cAAA,KAAK,EACH,KAAKT,KAAL,CAAWS,eAAX,CAA2Be,OAA3B,IAAsC,KAAKxB,KAAL,CAAWS,eAAX,CAA2Be,OAA3B,CAAmC2B,YAAnC,GAAkD,KAAKnD,KAAL,CAAWS,eAAX,CAA2Be,OAA3B,CAAmC4B,YAA3H,GACE;AAAEC,gBAAAA,YAAY,EAAE;AAAhB,eADF,GAC6BrB,SAJjC;AAAA,sCAOE;AAAA,uCACE;AAAK,kBAAA,EAAE,EAAExC,MAAM,CAAC,aAAD,CAAf;AAAgC,kBAAA,SAAS,EAAC,aAA1C;AAAA,0CAAwD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAxD,eAAyE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAzE;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,sBAPF,EAUG,KAAKQ,KAAL,CAAWC,MAAX,CAAkBqD,KAAlB,CAAwB,CAAxB,EAA2B,KAAKtD,KAAL,CAAWU,wBAAtC,EAAgE6C,GAAhE,CAAoE,CAACtD,MAAD,EAASqC,CAAT,kBACnE;AAAA,uCACE,QAAC,aAAD;AACE,kBAAA,EAAE,EAAE,IADN;AACY,kBAAA,MAAM,EAAE,IADpB;AAC0B,kBAAA,IAAI,EAAE,KADhC;AACuC,kBAAA,OAAO,EAAE,GADhD;AAEE,kBAAA,UAAU,EAAE;AACVM,oBAAAA,MAAM,EAAEpD,MAAM,CAAC,kBAAD,CADJ;AAEVqD,oBAAAA,YAAY,EAAErD,MAAM,CAAC,yBAAD,CAFV;AAGVsD,oBAAAA,UAAU,EAAEtD,MAAM,CAAC,uBAAD;AAHR,mBAFd;AAAA,yCAQE;AAAK,oBAAA,SAAS,EAAC,aAAf;AAAA,4CAA6B;AAAA,gCAAOS,MAAM,CAACU;AAAd;AAAA;AAAA;AAAA;AAAA,4BAA7B,eAAuD;AAAA,gCAAOV,MAAM,CAACW;AAAd;AAAA;AAAA;AAAA;AAAA,4BAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AARF;AAAA;AAAA;AAAA;AAAA;AADF,iBAAU0B,CAAV;AAAA;AAAA;AAAA;AAAA,sBADD,CAVH;AAAA;AAAA;AAAA;AAAA;AAAA,oBAHF;AAAA;AAAA;AAAA;AAAA;AAAA,kBADD,gBA8BC;AAAI,YAAA,SAAS,EAAC,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA/BJ;AAAA;AAAA;AAAA;AAAA,gBADF;AAoCA;AA7FJ;;AAgGA,wBAAO,oBAASG,IAAT;AAAA,gBAAgBC;AAAhB;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AA/MqE","sourcesContent":["import React from \"react\";\nimport { CSSTransition } from \"react-transition-group\";\nimport NakoAPI, {\n  GameEndRequest,\n  GameInfo,\n  QuestionEndRequest,\n} from \"../../modules/websocket-messages\";\nimport { animate, delay } from \"../../utils\";\nimport AnsweringMC from \"../AnsweringMC/answering_MultipleChoice\";\nimport styles from \"./game.module.scss\";\n\ninterface GameProps extends React.HTMLAttributes<HTMLDivElement>, GameExportProp{\n  connection: NakoAPI;\n  gameInfo: GameInfo;\n}\n\nexport interface GameExportProp{\n  timing: () => void;\n}\n\ninterface GameState {\n  questionCount: number;\n  currentQuestion: number;\n  currentPhase: GamePhase;\n  questionNumberElement: React.RefObject<HTMLHeadingElement>;\n  resultScrollDiv: React.RefObject<HTMLDivElement>;\n  sequentialDisplayCounter: number;\n  onSlideAnimComplete?: (value: void | PromiseLike<void>) => void;\n  correctAnswer?: QuestionEndRequest;\n  result?: GameEndRequest;\n}\n\nenum GamePhase {\n  Transition,\n  Active,\n  Ended,\n}\n\nexport default class Game extends React.Component<GameProps, GameState> {\n  constructor(props: GameProps) {\n    super(props);\n\n    (window as any).startSequentialDisplay = () => this.startSequentialDisplay(this.state.result!.length, 200);\n\n    this.state = {\n      questionCount: 0,\n      currentQuestion: 0,\n      currentPhase: GamePhase.Transition,\n      questionNumberElement: React.createRef<HTMLHeadingElement>(),\n      resultScrollDiv: React.createRef<HTMLDivElement>(),\n      sequentialDisplayCounter: 0,\n      result: [{\n        name: \"Test1\",\n        score: 0\n      }, {\n        name: \"Test2\",\n        score: 1\n      }, {\n        name: \"Test3\",\n        score: 2\n      }, {\n        name: \"Test4\",\n        score: 3\n      }, {\n        name: \"Test5\",\n        score: 4\n      }]\n    };\n\n    // Gameplay loop\n    const loop = () => this.props.connection.subscribe(\"req\", \"game_update\").then(async (msg) => {\n      this.setState({ currentPhase: GamePhase.Transition });\n      await new Promise<void>(res => this.setState({ onSlideAnimComplete: res }, () => console.log(\"Waiting for slide-in animation to complete\")));\n\n      this.setState({\n        questionCount: this.state.questionCount + 1,\n        currentQuestion: msg.currentQuestion,\n      });\n\n      if (this.state.questionNumberElement.current) {\n        await animate(\"bounce\", this.state.questionNumberElement.current, 500);\n      } else {\n        console.warn(\"questionNumberElement was not found in DOM\");\n      }\n\n      this.props.connection.send({\n        method: \"res\",\n        type: \"game_update\",\n        payload: null,\n      });\n\n      this.props.connection.subscribe(\"req\", \"question_start\").then(() => {\n        this.props.connection.send({\n          method: \"res\",\n          type: \"question_start\",\n          payload: null,\n        });\n\n        console.log(\"Question started\");\n        this.setState({ currentPhase: GamePhase.Active, correctAnswer: undefined });\n\n        this.props.connection.subscribe(\"req\", \"question_end\").then((msg) => {\n          this.props.connection.send({\n            method: \"res\",\n            type: \"question_end\",\n            payload: null,\n          });\n\n          console.log(\"Question ended\");\n          this.setState({ correctAnswer: msg });\n\n          if (this.state.currentPhase !== GamePhase.Ended) {\n            loop();\n          }\n        });\n      });\n    });\n\n    this.props.connection.subscribe(\"req\", \"game_end\").then((msg) => {\n      this.props.connection.send({\n        method: \"res\",\n        type: \"game_end\",\n        payload: null,\n      });\n\n      console.log(\"Game ended\");\n      console.log(msg);\n\n      this.setState(\n        { currentPhase: GamePhase.Ended, result: [...msg].sort((a, b) => b.score - a.score) },\n        () => this.startSequentialDisplay(this.state.result!.length, 200)\n      );\n    });\n\n    loop();\n  }\n\n  async startSequentialDisplay(length: number, ms: number) {\n    for (let i = 1; i <= length; i++) {\n      this.setState({ sequentialDisplayCounter: i });\n      await delay(ms);\n    }\n  }\n\n  render() {\n    const { connection, gameInfo, ...rest } = this.props;\n    let renderTarget: JSX.Element;\n\n    switch (this.state.currentPhase) {\n      case GamePhase.Transition:\n        renderTarget = (\n          <div className=\"fill-parent\" id={styles.transition}>\n            <CSSTransition\n              in={true}\n              appear={true}\n              exit={false}\n              timeout={1500}\n              classNames={{\n                appear: styles[\"slide-t2b-appear\"],\n                appearActive: styles[\"slide-t2b-appear-active\"],\n                appearDone: styles[\"slide-t2b-appear-done\"]\n              }}\n              onEntered={async () => {\n                console.log(\"Animation completed\");\n\n                let loggedWarning = false;\n\n                while (!this.state.onSlideAnimComplete) {\n                  if (!loggedWarning) {\n                    console.log(\"There was no promise to resolve, forcing delay for one...\");\n                    loggedWarning = true;\n                  }\n\n                  await delay(200);\n                }\n\n                this.state.onSlideAnimComplete();\n              }}\n            >\n              <span>\n                <h1>Question </h1>\n                <h1 ref={this.state.questionNumberElement}>\n                  {this.state.questionCount.toString()}\n                </h1>\n              </span>\n            </CSSTransition>\n          </div>\n        );\n        break;\n\n      case GamePhase.Active:\n        renderTarget = (\n          <AnsweringMC\n            connection={this.props.connection}\n            questionInfo={\n              this.props.gameInfo.questions[this.state.currentQuestion]\n            }\n            timing={ this.props.timing }\n            correctAnswer={this.state.correctAnswer}\n            currentQuestionProps={this.state.currentQuestion}\n          />\n        );\n        break;\n\n      default:\n        renderTarget = (\n          <div id={styles.result} className=\"fill-parent\">\n            {this.state.result ?\n              <section>\n                <h1>Results</h1>\n                <hr/>\n                <div\n                  ref={this.state.resultScrollDiv}\n                  style={\n                    this.state.resultScrollDiv.current && this.state.resultScrollDiv.current.scrollHeight - this.state.resultScrollDiv.current.clientHeight ?\n                      { paddingRight: \"15px\" } : undefined\n                  }\n                >\n                  <div>\n                    <div id={styles[\"rank-header\"]} className=\"fill-parent\"><span>Name</span><span>Score</span></div>\n                  </div>\n                  {this.state.result.slice(0, this.state.sequentialDisplayCounter).map((result, i) =>\n                    <div key={i}>\n                      <CSSTransition\n                        in={true} appear={true} exit={false} timeout={500}\n                        classNames={{\n                          appear: styles[\"slide-b2t-appear\"],\n                          appearActive: styles[\"slide-b2t-appear-active\"],\n                          appearDone: styles[\"slide-b2t-appear-done\"]\n                        }}\n                      >\n                        <div className=\"fill-parent\"><span>{result.name}</span><span>{result.score}</span></div>\n                      </CSSTransition>\n                    </div>\n                  )}\n                </div>\n              </section> :\n              <h1 className=\"error\">Failed to retrieve results.</h1>\n            }\n          </div>\n        );\n        break;\n    }\n\n    return <div {...rest}>{renderTarget}</div>;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}