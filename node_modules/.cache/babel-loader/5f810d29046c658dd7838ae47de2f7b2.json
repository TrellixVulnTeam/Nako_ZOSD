{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Desktop/Nako/nako/src/desktop/login/login.tsx\";\nimport React from \"react\";\nimport Axios from \"axios\";\nimport { Link } from \"react-router-dom\";\nimport styles from \"./login.module.scss\";\nimport { delay } from \"../../utils\";\nimport { CSSTransition } from \"react-transition-group\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass QR extends React.Component {\n  constructor(props) {\n    super(props);\n    this.willUnmount = false;\n\n    this.componentWillUnmount = () => this.willUnmount = true;\n\n    this.state = {\n      scanned: false\n    };\n    this.props.connection.get(`qr/${this.props.embed}`).then(res => this.setState({\n      imageSrc: res.data.img\n    }));\n    this.checkScanStatus();\n  }\n\n  async checkScanStatus() {\n    if (this.state.imageSrc) {\n      console.log(\"Checking\");\n      this.props.connection.get(`check/${this.props.embed}`).then(res => {\n        console.log(res.data);\n\n        if (res.data !== null) {\n          this.setState({\n            scanned: true\n          });\n          this.props.onScanned(res.data);\n        }\n      }).catch(error => {\n        console.log(error);\n      });\n    }\n\n    await delay(1000);\n\n    if (!this.willUnmount && !this.state.scanned) {\n      this.checkScanStatus();\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Scan the QR Code using Nako Mobile.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), this.state.imageSrc ? /*#__PURE__*/_jsxDEV(\"img\", {\n        src: `data:image/png;base64,${this.state.imageSrc}`,\n        alt: \"QR Code\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nvar LoginPhase;\n\n(function (LoginPhase) {\n  LoginPhase[\"Default\"] = \"Credentials\";\n  LoginPhase[\"QR\"] = \"QR code\";\n  LoginPhase[\"USB\"] = \"Nako figurine\";\n})(LoginPhase || (LoginPhase = {}));\n\nvar ErrorMessage;\n\n(function (ErrorMessage) {\n  ErrorMessage[\"Generic\"] = \"An error occurred while your request was being processed.\";\n  ErrorMessage[\"TimedOut\"] = \"Your request was timed out. Please try again.\";\n  ErrorMessage[\"InvalidLogin\"] = \"Your username or password is incorrect.\";\n})(ErrorMessage || (ErrorMessage = {}));\n\nexport class Login extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loginPhase: LoginPhase.Default,\n      showLoginMethodDropdown: false,\n      username: \"\",\n      password: \"\",\n      connection: Axios.create({\n        baseURL: \"http://113.252.44.34:5000/\",\n        timeout: 10000\n      }),\n      connected: false\n    };\n  }\n\n  async componentDidMount() {\n    while (!this.state.connected) {\n      const test = await this.state.connection.get(\"/\");\n\n      if (test.status === 200 || test.status === 201) {\n        this.setState({\n          connected: true\n        });\n      } else {\n        await delay(5000);\n      }\n    }\n  }\n\n  getAvailableLoginMethods() {\n    return Object.values(LoginPhase).filter(i => i !== this.state.loginPhase).map(i => /*#__PURE__*/_jsxDEV(\"span\", {\n      onClick: () => this.setState({\n        loginPhase: i\n      }),\n      children: i\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 9\n    }, this));\n  }\n\n  async getQRCode() {\n    if (!this.state.QRImageSrc) {\n      const id = Array.from(window.crypto.getRandomValues(new Uint8Array(8)), dec => dec.toString(16).padStart(2, \"0\")).join(\"\");\n      const res = await this.state.connection.get(`/qr/${id}`);\n      this.setState({\n        QRImageSrc: res.data.img\n      });\n    }\n  }\n\n  handleFormSubmit() {\n    this.setState({\n      error: undefined\n    });\n    this.state.connection.post(`login/${this.state.username}/${this.state.password}`, {\n      username: this.state.username,\n      password: this.state.password\n    }).then(res => {\n      res.data ? this.props.onLoggedIn(res.data) : this.setState({\n        error: ErrorMessage.InvalidLogin\n      });\n    }).catch(() => {\n      this.setState({\n        error: ErrorMessage.Generic\n      });\n    });\n  }\n\n  handleUSBData() {\n    navigator.usb.requestDevice({\n      filters: [{\n        productId: 4660,\n        vendorId: 43981\n      }]\n    }).then(device => {\n      console.log(device.manufacturerName);\n      this.props.onLoggedIn({\n        name: \"Nako\",\n        role: \"student\"\n      });\n    });\n  }\n\n  render() {\n    const {\n      onLoggedIn,\n      ...rest\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(\"div\", { ...rest,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: styles.background,\n        className: \"fill-parent\",\n        children: /*#__PURE__*/_jsxDEV(\"section\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            id: styles.title,\n            children: /*#__PURE__*/_jsxDEV(\"h2\", {\n              children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                alt: \"Login icon\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 192,\n                columnNumber: 17\n              }, this), \"Login\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 191,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            id: styles.content,\n            children: [this.state.loginPhase === LoginPhase.Default ? /*#__PURE__*/_jsxDEV(\"form\", {\n              onSubmit: () => this.handleFormSubmit(),\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                className: \"box-shadow\",\n                placeholder: \"Username\",\n                autoComplete: \"username\",\n                onChange: e => this.setState({\n                  username: e.target.value\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 199,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                className: \"box-shadow\",\n                placeholder: \"Password\",\n                type: \"password\",\n                autoComplete: \"current-password\",\n                onChange: e => this.setState({\n                  password: e.target.value\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 207,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"box-shadow\",\n                type: \"submit\",\n                children: \"Login\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 216,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 198,\n              columnNumber: 17\n            }, this) : this.state.loginPhase === LoginPhase.QR ? /*#__PURE__*/_jsxDEV(QR, {\n              embed: Array.from(window.crypto.getRandomValues(new Uint8Array(8)), dec => dec.toString(16).padStart(2, \"0\")).join(\"\"),\n              connection: this.state.connection,\n              onScanned: loginInfo => this.props.onLoggedIn(loginInfo)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 221,\n              columnNumber: 17\n            }, this) : /*#__PURE__*/_jsxDEV(\"section\", {\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"Press the button below when you have connected your Nako figurine via USB.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 231,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => this.handleUSBData(),\n                children: \"Connect\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 235,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 230,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"Forgot password\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 239,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Link, {\n                to: \"/register\",\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: \"Register\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 241,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 240,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                id: styles[\"dropdown-menu\"],\n                onClick: () => this.setState({\n                  showLoginMethodDropdown: !this.state.showLoginMethodDropdown\n                }),\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  children: \"Login via...\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 252,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: /*#__PURE__*/_jsxDEV(CSSTransition, {\n                    in: this.state.showLoginMethodDropdown,\n                    timeout: 250,\n                    classNames: {\n                      enter: styles[\"reveal-enter\"],\n                      enterActive: styles[\"reveal-enter-active\"],\n                      enterDone: styles[\"reveal-enter-done\"],\n                      exit: styles[\"reveal-exit\"],\n                      exitActive: styles[\"reveal-exit-active\"],\n                      exitDone: styles[\"reveal-exit-done\"]\n                    },\n                    children: /*#__PURE__*/_jsxDEV(\"div\", {\n                      children: this.getAvailableLoginMethods()\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 266,\n                      columnNumber: 23\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 254,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 253,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 243,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 238,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 7\n    }, this);\n  }\n\n}\nexport default Login;","map":{"version":3,"sources":["/Users/mac/Desktop/Nako/nako/src/desktop/login/login.tsx"],"names":["React","Axios","Link","styles","delay","CSSTransition","QR","Component","constructor","props","willUnmount","componentWillUnmount","state","scanned","connection","get","embed","then","res","setState","imageSrc","data","img","checkScanStatus","console","log","onScanned","catch","error","render","LoginPhase","ErrorMessage","Login","loginPhase","Default","showLoginMethodDropdown","username","password","create","baseURL","timeout","connected","componentDidMount","test","status","getAvailableLoginMethods","Object","values","filter","i","map","getQRCode","QRImageSrc","id","Array","from","window","crypto","getRandomValues","Uint8Array","dec","toString","padStart","join","handleFormSubmit","undefined","post","onLoggedIn","InvalidLogin","Generic","handleUSBData","navigator","usb","requestDevice","filters","productId","vendorId","device","manufacturerName","name","role","rest","background","title","content","e","target","value","loginInfo","enter","enterActive","enterDone","exit","exitActive","exitDone"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Axios, { AxiosInstance } from \"axios\";\nimport { Link } from \"react-router-dom\";\nimport styles from \"./login.module.scss\";\nimport { delay } from \"../../utils\";\nimport { AccountInfo } from \"../../modules/account-info\";\nimport { CSSTransition } from \"react-transition-group\";\n\ninterface QRProps {\n  embed: string;\n  connection: AxiosInstance;\n  onScanned: (loginInfo: AccountInfo) => void;\n}\n\ninterface QRState {\n  scanned: boolean;\n  imageSrc?: string;\n}\n\nclass QR extends React.Component<QRProps, QRState> {\n  willUnmount = false;\n\n  constructor(props: QRProps) {\n    super(props);\n\n    this.state = { scanned: false };\n    this.props.connection\n      .get<{ img: string }>(`qr/${this.props.embed}`)\n      .then((res) => this.setState({ imageSrc: res.data.img }));\n    this.checkScanStatus();\n  }\n\n  componentWillUnmount = () => (this.willUnmount = true);\n\n  async checkScanStatus() {\n    if (this.state.imageSrc) {\n      console.log(\"Checking\");\n      this.props.connection\n        .get<AccountInfo | null>(`check/${this.props.embed}`)\n        .then((res) => {\n          console.log(res.data);\n\n          if (res.data !== null) {\n            this.setState({ scanned: true });\n            this.props.onScanned(res.data);\n          }\n        })\n        .catch((error) => {\n          console.log(error);\n        });\n    }\n\n    await delay(1000);\n\n    if (!this.willUnmount && !this.state.scanned) {\n      this.checkScanStatus();\n    }\n  }\n\n  render() {\n    return (\n      <section>\n        <span>Scan the QR Code using Nako Mobile.</span>\n        {this.state.imageSrc ? (\n          <img\n            src={`data:image/png;base64,${this.state.imageSrc}`}\n            alt=\"QR Code\"\n          />\n        ) : null}\n      </section>\n    );\n  }\n}\n\nenum LoginPhase {\n  Default = \"Credentials\",\n  QR = \"QR code\",\n  USB = \"Nako figurine\",\n}\n\nenum ErrorMessage {\n  Generic = \"An error occurred while your request was being processed.\",\n  TimedOut = \"Your request was timed out. Please try again.\",\n  InvalidLogin = \"Your username or password is incorrect.\",\n}\n\ninterface LoginProps {\n  onLoggedIn: (userInfo: AccountInfo) => void;\n}\n\ninterface LoginState {\n  loginPhase: LoginPhase;\n  showLoginMethodDropdown: boolean;\n  username: string;\n  password: string;\n  connection: AxiosInstance;\n  connected: boolean;\n  QRImageSrc?: string;\n  error?: ErrorMessage;\n}\n\nexport class Login extends React.Component<\n  LoginProps & React.HTMLAttributes<HTMLDivElement>,\n  LoginState\n> {\n  constructor(props: LoginProps & React.HTMLAttributes<HTMLDivElement>) {\n    super(props);\n\n    this.state = {\n      loginPhase: LoginPhase.Default,\n      showLoginMethodDropdown: false,\n      username: \"\",\n      password: \"\",\n      connection: Axios.create({\n        baseURL: \"http://113.252.44.34:5000/\",\n        timeout: 10000,\n      }),\n      connected: false,\n    };\n  }\n\n  async componentDidMount() {\n    while (!this.state.connected) {\n      const test = await this.state.connection.get(\"/\");\n\n      if (test.status === 200 || test.status === 201) {\n        this.setState({ connected: true });\n      } else {\n        await delay(5000);\n      }\n    }\n  }\n\n  getAvailableLoginMethods() {\n    return Object.values(LoginPhase)\n      .filter((i) => i !== this.state.loginPhase)\n      .map((i) => (\n        <span key={i} onClick={() => this.setState({ loginPhase: i })}>\n          {i}\n        </span>\n      ));\n  }\n\n  async getQRCode() {\n    if (!this.state.QRImageSrc) {\n      const id = Array.from(\n        window.crypto.getRandomValues(new Uint8Array(8)),\n        (dec) => dec.toString(16).padStart(2, \"0\")\n      ).join(\"\");\n      const res = await this.state.connection.get<{ img: string }>(`/qr/${id}`);\n      this.setState({ QRImageSrc: res.data.img });\n    }\n  }\n\n  handleFormSubmit() {\n    this.setState({ error: undefined });\n    this.state.connection\n      .post<AccountInfo | undefined>(\n        `login/${this.state.username}/${this.state.password}`,\n        {\n          username: this.state.username,\n          password: this.state.password,\n        }\n      )\n      .then((res) => {\n        res.data\n          ? this.props.onLoggedIn(res.data)\n          : this.setState({ error: ErrorMessage.InvalidLogin });\n      })\n      .catch(() => {\n        this.setState({ error: ErrorMessage.Generic });\n      });\n  }\n\n  handleUSBData() {\n    navigator.usb\n      .requestDevice({ filters: [{ productId: 4660, vendorId: 43981 }] })\n      .then((device) => {\n        console.log(device.manufacturerName);\n        this.props.onLoggedIn({ name: \"Nako\", role: \"student\" });\n      });\n  }\n\n  render() {\n    const { onLoggedIn, ...rest } = this.props;\n    return (\n      <div {...rest}>\n        <div id={styles.background} className=\"fill-parent\">\n          <section>\n            <div id={styles.title}>\n              <h2>\n                <img alt=\"Login icon\" />\n                Login\n              </h2>\n            </div>\n            <div id={styles.content}>\n              {this.state.loginPhase === LoginPhase.Default ? (\n                <form onSubmit={() => this.handleFormSubmit()}>\n                  <input\n                    className=\"box-shadow\"\n                    placeholder=\"Username\"\n                    autoComplete=\"username\"\n                    onChange={(e) =>\n                      this.setState({ username: e.target.value })\n                    }\n                  />\n                  <input\n                    className=\"box-shadow\"\n                    placeholder=\"Password\"\n                    type=\"password\"\n                    autoComplete=\"current-password\"\n                    onChange={(e) =>\n                      this.setState({ password: e.target.value })\n                    }\n                  />\n                  <button className=\"box-shadow\" type=\"submit\">\n                    Login\n                  </button>\n                </form>\n              ) : this.state.loginPhase === LoginPhase.QR ? (\n                <QR\n                  embed={Array.from(\n                    window.crypto.getRandomValues(new Uint8Array(8)),\n                    (dec) => dec.toString(16).padStart(2, \"0\")\n                  ).join(\"\")}\n                  connection={this.state.connection}\n                  onScanned={(loginInfo) => this.props.onLoggedIn(loginInfo)}\n                />\n              ) : (\n                <section>\n                  <span>\n                    Press the button below when you have connected your Nako\n                    figurine via USB.\n                  </span>\n                  <button onClick={() => this.handleUSBData()}>Connect</button>\n                </section>\n              )}\n              <div>\n                <span>Forgot password</span>\n                <Link to=\"/register\">\n                  <span>Register</span>\n                </Link>\n                <div\n                  id={styles[\"dropdown-menu\"]}\n                  onClick={() =>\n                    this.setState({\n                      showLoginMethodDropdown: !this.state\n                        .showLoginMethodDropdown,\n                    })\n                  }\n                >\n                  <span>Login via...</span>\n                  <div>\n                    <CSSTransition\n                      in={this.state.showLoginMethodDropdown}\n                      timeout={250}\n                      classNames={{\n                        enter: styles[\"reveal-enter\"],\n                        enterActive: styles[\"reveal-enter-active\"],\n                        enterDone: styles[\"reveal-enter-done\"],\n                        exit: styles[\"reveal-exit\"],\n                        exitActive: styles[\"reveal-exit-active\"],\n                        exitDone: styles[\"reveal-exit-done\"],\n                      }}\n                    >\n                      <div>{this.getAvailableLoginMethods()}</div>\n                    </CSSTransition>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </section>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Login;\n"]},"metadata":{},"sourceType":"module"}