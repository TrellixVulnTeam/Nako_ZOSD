{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Desktop/Nako/nako/src/desktop/teacher/question-edit.tsx\";\nimport React from \"react\";\nimport Select from \"react-select\";\nimport ScoreSelector from \"./selector/ScoreSelector\";\nimport TimeSelector from \"./selector/TimeSelector\";\nimport styles from \"./teacher.module.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class QuestionEdit extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dropDownRef: /*#__PURE__*/React.createRef(),\n      questionRef: /*#__PURE__*/React.createRef(),\n      timeSelectorRef: /*#__PURE__*/React.createRef(),\n      selectionChangeState: {\n        label: \"\",\n        value: \"\"\n      }\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    try {\n      if (prevProps.currentQuestion !== this.props.currentQuestion) {\n        // this.state.dropDownRef.current!.setState({ value: this.props.currentQuestion.type === \"Multiple\" ? this.props.data[0] : this.props.data[1] });\n        this.setState({\n          tempDropDownValue: this.props.currentQuestion.type === \"Multiple\" ? this.props.data[0] : this.props.data[1]\n        }, () => {\n          this.setState({\n            tempDropDownValue: undefined\n          });\n          this.state.timeSelectorRef.current.setState({\n            secsValue: this.props.currentQuestion.timeLimit % 60,\n            minsValue: Math.floor(this.props.currentQuestion.timeLimit / 60)\n          });\n          this.state.questionRef.current.value = this.props.currentQuestion.question;\n\n          if (this.props.currentQuestion.type === \"Multiple\") {\n            for (let i = 0; i < this.props.mcRefs.length; i++) {\n              var _this$props$currentQu;\n\n              this.props.mcRefs[i].text.current.value = (_this$props$currentQu = this.props.currentQuestion.choices[i]) !== null && _this$props$currentQu !== void 0 ? _this$props$currentQu : \"\";\n              this.props.mcRefs[i].checkbox.current.checked = false;\n            }\n\n            if (typeof this.props.currentQuestion.corr === \"number\") {\n              this.props.mcRefs[this.props.currentQuestion.corr - 1].checkbox.current.checked = true;\n            } else {\n              for (const i of this.props.currentQuestion.corr) {\n                this.props.mcRefs[i].checkbox.current.checked = true;\n              }\n            }\n          } else {\n            // I'm assuming that corr is either 0/1 if the type is T/F\n            this.props.tfRefs[this.props.currentQuestion.corr ? 1 : 0].current = true;\n            this.props.tfRefs[this.props.currentQuestion.corr ? 0 : 1].current = false;\n          }\n        });\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  deactivateAll() {\n    console.log(this.state.questionRef.current);\n\n    switch (this.state.selectionChangeState.value) {\n      case \"Multiple\":\n        if (this.state.questionRef.current) {\n          this.state.questionRef.current.value = \"\";\n        }\n\n        for (let i = 0; i < this.props.mcRefs.length; i++) {\n          if (this.props.mcRefs[i].text.current) {\n            this.props.mcRefs[i].text.current.value = \"\";\n          }\n\n          if (this.props.mcRefs[i].checkbox.current) {\n            this.props.mcRefs[i].checkbox.current.checked = false;\n          }\n        }\n\n        break;\n\n      case \"True/False\":\n        if (this.state.questionRef.current) {\n          this.state.questionRef.current.value = \"\";\n        }\n\n        for (let i = 0; i < this.props.tfRefs.length; i++) {\n          if (this.props.tfRefs[i].current) {\n            this.props.tfRefs[i].current.checked = false;\n            console.log(this.props.tfRefs[i]);\n          }\n        }\n\n        break;\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: styles[\"background-wrapper\"],\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: styles[\"timer\"],\n        children: /*#__PURE__*/_jsxDEV(TimeSelector, {\n          ref: this.state.timeSelectorRef,\n          minsValuePass: value => this.props.minsValuePass(value),\n          secsValuePass: value => this.props.secsValuePass(value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: styles[\"scorer\"],\n        children: /*#__PURE__*/_jsxDEV(ScoreSelector, {\n          scoreValuePass: value => this.props.scoreValuePass(value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: styles[\"selector\"],\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          id: styles[\"Next-button\"],\n          onClick: () => {\n            this.props.keep();\n            this.deactivateAll();\n          },\n          children: \"New Question\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Select, {\n          ref: this.state.dropDownRef,\n          id: styles[\"select\"],\n          defaultValue: {\n            label: \"Multiple Choices\",\n            value: \"Multiple\"\n          } //value={this.state.selectedOption}\n          ,\n          value: this.state.tempDropDownValue,\n          onChange: value => {\n            this.props.onSelectionChange(value);\n            this.setState({\n              selectionChangeState: {\n                label: value === null || value === void 0 ? void 0 : value.label,\n                value: value === null || value === void 0 ? void 0 : value.value\n              }\n            });\n          },\n          options: this.props.data\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: styles[\"inputer\"],\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          ref: this.state.questionRef,\n          placeholder: \"Add Question...\",\n          id: styles[\"question-input\"],\n          type: \"text\",\n          onChange: e => {\n            this.props.onQuestionInputChange(e);\n            this.props.questionRefPass(this.state.questionRef);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }, this), this.props.renderTarget]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/mac/Desktop/Nako/nako/src/desktop/teacher/question-edit.tsx"],"names":["React","Select","ScoreSelector","TimeSelector","styles","QuestionEdit","Component","constructor","props","state","dropDownRef","createRef","questionRef","timeSelectorRef","selectionChangeState","label","value","componentDidUpdate","prevProps","currentQuestion","setState","tempDropDownValue","type","data","undefined","current","secsValue","timeLimit","minsValue","Math","floor","question","i","mcRefs","length","text","choices","checkbox","checked","corr","tfRefs","error","console","log","deactivateAll","render","minsValuePass","secsValuePass","scoreValuePass","keep","onSelectionChange","e","onQuestionInputChange","questionRefPass","renderTarget"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Select from \"react-select\";\nimport ScoreSelector from \"./selector/ScoreSelector\";\nimport TimeSelector from \"./selector/TimeSelector\";\nimport styles from \"./teacher.module.scss\";\n\ninterface QuestionEditProps {\n  currentQuestion: {\n    question: string;\n    type: string;\n    choices: string[];\n    timeLimit: number;\n    corr: number | number[];\n  };\n  minsValuePass: (value: number) => void;\n  secsValuePass: (value: number) => void;\n  scoreValuePass: (value: number) => void;\n  questionRefPass: (value: React.RefObject<HTMLInputElement>) => void;\n  onSelectionChange: (value: {\n    label: string,\n    value: string\n  } | null) => void,\n  data: {\n    label: string;\n    value: string;\n  }[],\n  keep: () => void;\n  onQuestionInputChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  renderTarget: JSX.Element;\n  mcRefs: [\n    { text: React.RefObject<HTMLInputElement>, checkbox: React.RefObject<HTMLInputElement> },\n    { text: React.RefObject<HTMLInputElement>, checkbox: React.RefObject<HTMLInputElement> },\n    { text: React.RefObject<HTMLInputElement>, checkbox: React.RefObject<HTMLInputElement> },\n    { text: React.RefObject<HTMLInputElement>, checkbox: React.RefObject<HTMLInputElement> },\n    { text: React.RefObject<HTMLInputElement>, checkbox: React.RefObject<HTMLInputElement> },\n    { text: React.RefObject<HTMLInputElement>, checkbox: React.RefObject<HTMLInputElement> }\n  ];\n  tfRefs: [React.RefObject<HTMLInputElement>, React.RefObject<HTMLInputElement>];\n}\n\ninterface QuestionEditState {\n  dropDownRef: React.RefObject<Select<{ label: string; value: string; }>>;\n  questionRef: React.RefObject<HTMLInputElement>;\n  timeSelectorRef: React.RefObject<TimeSelector>;\n  tempDropDownValue?: { label: string, value: string };\n  selectionChangeState: {\n    label: string | undefined;\n    value: string | undefined;\n  };\n}\nexport default class QuestionEdit extends React.Component<QuestionEditProps, QuestionEditState> {\n  constructor(props: QuestionEditProps) {\n    super(props);\n\n    this.state = {\n      dropDownRef: React.createRef<Select<{ label: string; value: string; }>>(),\n      questionRef: React.createRef<HTMLInputElement>(),\n      timeSelectorRef: React.createRef<TimeSelector>(),\n      selectionChangeState: {\n        label: \"\",\n        value: \"\",\n      },\n    };\n  }\n  \n  componentDidUpdate(prevProps: QuestionEditProps) {\n    try {\n      if (prevProps.currentQuestion !== this.props.currentQuestion) {\n        // this.state.dropDownRef.current!.setState({ value: this.props.currentQuestion.type === \"Multiple\" ? this.props.data[0] : this.props.data[1] });\n        this.setState({ tempDropDownValue: this.props.currentQuestion.type === \"Multiple\" ? this.props.data[0] : this.props.data[1] }, () => {\n          this.setState({ tempDropDownValue: undefined });\n          this.state.timeSelectorRef.current!.setState({\n            secsValue: this.props.currentQuestion.timeLimit % 60,\n            minsValue: Math.floor(this.props.currentQuestion.timeLimit / 60)\n          });\n          this.state.questionRef.current!.value = this.props.currentQuestion.question;\n\n          if (this.props.currentQuestion.type === \"Multiple\") {\n            for (let i = 0; i < this.props.mcRefs.length; i++) {\n              this.props.mcRefs[i].text.current!.value = this.props.currentQuestion.choices[i] ?? \"\";\n              this.props.mcRefs[i].checkbox.current!.checked = false;\n            }\n    \n            if (typeof this.props.currentQuestion.corr === \"number\") {\n              this.props.mcRefs[this.props.currentQuestion.corr - 1].checkbox.current!.checked = true;\n            } else {\n              for (const i of this.props.currentQuestion.corr) {\n                this.props.mcRefs[i].checkbox.current!.checked = true;\n              }\n            }\n          } else {\n            // I'm assuming that corr is either 0/1 if the type is T/F\n            this.props.tfRefs[this.props.currentQuestion.corr ? 1 : 0].current! = true;\n            this.props.tfRefs[this.props.currentQuestion.corr ? 0 : 1].current! = false;\n          }\n        });\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n deactivateAll() {\n   console.log(this.state.questionRef.current);\n  switch(this.state.selectionChangeState.value) {\n    case \"Multiple\":\n      if (this.state.questionRef.current) {\n        this.state.questionRef.current!.value = \"\";\n      }\n  \n      for (let i = 0; i < this.props.mcRefs.length; i++) {\n        if (this.props.mcRefs[i].text.current) {\n          this.props.mcRefs[i].text.current!.value = \"\";\n        }\n  \n        if (this.props.mcRefs[i].checkbox.current) {\n          this.props.mcRefs[i].checkbox.current!.checked = false;\n        }\n        \n      }\n    break;\n    case \"True/False\":\n      if (this.state.questionRef.current) {\n        this.state.questionRef.current!.value = \"\";\n      }\n  \n      for (let i = 0; i < this.props.tfRefs.length; i++) {\n        if (this.props.tfRefs[i].current) {\n          this.props.tfRefs[i].current!.checked = false;\n          console.log(this.props.tfRefs[i]);\n        }\n        \n      } \n    break;\n  }\n    \n  }\n\n  render() {\n    return (\n      <div id={styles[\"background-wrapper\"]}>\n        <div id={styles[\"timer\"]}>\n          <TimeSelector\n            ref={this.state.timeSelectorRef}\n            minsValuePass={value => this.props.minsValuePass(value)}\n            secsValuePass={value => this.props.secsValuePass(value)}\n          />\n        </div>\n        <div id={styles[\"scorer\"]}>\n          <ScoreSelector scoreValuePass={value => this.props.scoreValuePass(value)} />\n        </div>\n        <div id={styles[\"selector\"]}>\n        <button\n            id={styles[\"Next-button\"]}\n            onClick={() => {\n              this.props.keep();\n              this.deactivateAll();\n            }}\n          >\n            New Question\n          </button>\n          <Select\n            ref={this.state.dropDownRef}\n            id={styles[\"select\"]}\n            defaultValue={{ label: \"Multiple Choices\", value: \"Multiple\" }}\n            //value={this.state.selectedOption}\n            value={this.state.tempDropDownValue}\n            onChange={value => {this.props.onSelectionChange(value); this.setState({selectionChangeState: {\n              label: value?.label,\n              value: value?.value,\n            }, });}}\n            options={this.props.data}\n          />\n        </div>\n        <div id={styles[\"inputer\"]}>\n          <input\n            ref={this.state.questionRef}\n            placeholder=\"Add Question...\"\n            id={styles[\"question-input\"]}\n            type=\"text\"\n            onChange={e => {\n              this.props.onQuestionInputChange(e);\n              this.props.questionRefPass(this.state.questionRef);\n            }}\n          />\n        </div>\n        {this.props.renderTarget}\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}