{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Desktop/Nako/nako/src/desktop/game/game.tsx\";\nimport React from \"react\";\nimport { delay } from \"../../utils\";\nimport AnsweringMC from \"../AnsweringMC/answering_MultipleChoice\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar GamePhase;\n\n(function (GamePhase) {\n  GamePhase[GamePhase[\"Transition\"] = 0] = \"Transition\";\n  GamePhase[GamePhase[\"Active\"] = 1] = \"Active\";\n  GamePhase[GamePhase[\"Ended\"] = 2] = \"Ended\";\n})(GamePhase || (GamePhase = {}));\n\nexport default class Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      questionCount: 0,\n      currentQuestion: 0,\n      currentPhase: GamePhase.Transition\n    }; // Gameplay loop\n\n    this.props.connection.subscribe(\"req\", \"game_update\", async msg => {\n      this.props.connection.send({\n        method: \"res\",\n        type: \"game_update\",\n        payload: null\n      });\n      this.setState({\n        currentPhase: GamePhase.Transition\n      });\n      await delay(500);\n      this.setState({\n        questionCount: this.state.questionCount + 1,\n        currentQuestion: msg.currentQuestion\n      });\n      this.props.connection.subscribe(\"req\", \"question_start\").then(() => {\n        this.props.connection.send({\n          method: \"res\",\n          type: \"question_start\",\n          payload: null\n        });\n        console.log(\"Question started\");\n        this.setState({\n          currentPhase: GamePhase.Active\n        });\n        this.props.connection.subscribe(\"req\", \"question_end\").then(msg => {\n          this.props.connection.send({\n            method: \"res\",\n            type: \"question_end\",\n            payload: null\n          });\n          console.log(\"Question ended\");\n          this.setState({\n            correctAnswer: msg\n          });\n        });\n      });\n    });\n    this.props.connection.subscribe(\"req\", \"game_end\").then(msg => {\n      this.props.connection.send({\n        method: \"res\",\n        type: \"game_end\",\n        payload: null\n      });\n      console.log(\"Game ended\");\n      console.log(msg);\n      this.setState({\n        currentPhase: GamePhase.Ended\n      });\n    });\n  }\n\n  render() {\n    const {\n      connection,\n      gameInfo,\n      ...rest\n    } = this.props;\n    let renderTarget;\n\n    switch (this.state.currentPhase) {\n      case GamePhase.Transition:\n        renderTarget = /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"fill-parent\",\n          children: [\"Question \", this.state.questionCount.toString()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 24\n        }, this);\n        break;\n\n      case GamePhase.Active:\n        renderTarget = /*#__PURE__*/_jsxDEV(AnsweringMC, {\n          connection: this.props.connection,\n          questionInfo: this.props.gameInfo.questions[this.state.currentQuestion],\n          correctAnswer: this.state.correctAnswer\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this);\n        break;\n\n      default:\n        renderTarget = /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"fill-parent\",\n          children: \"TODO: Result UI\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 24\n        }, this);\n        break;\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", { ...rest,\n      children: renderTarget\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/mac/Desktop/Nako/nako/src/desktop/game/game.tsx"],"names":["React","delay","AnsweringMC","GamePhase","Game","Component","constructor","props","state","questionCount","currentQuestion","currentPhase","Transition","connection","subscribe","msg","send","method","type","payload","setState","then","console","log","Active","correctAnswer","Ended","render","gameInfo","rest","renderTarget","toString","questions"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport NakoAPI, { GameInfo, QuestionEndRequest } from \"../../modules/websocket-messages\";\nimport { delay } from \"../../utils\";\nimport AnsweringMC from \"../AnsweringMC/answering_MultipleChoice\";\n\ninterface GameProps extends React.HTMLAttributes<HTMLDivElement> {\n  connection: NakoAPI;\n  gameInfo: GameInfo;\n}\n\ninterface GameState {\n  questionCount: number;\n  currentQuestion: number;\n  currentPhase: GamePhase;\n  correctAnswer?: QuestionEndRequest;\n}\n\nenum GamePhase {\n  Transition,\n  Active,\n  Ended\n}\n\nexport default class Game extends React.Component<GameProps, GameState> {\n  constructor(props: GameProps) {\n    super(props);\n\n    this.state = {\n      questionCount: 0,\n      currentQuestion: 0,\n      currentPhase: GamePhase.Transition,\n    };\n\n    // Gameplay loop\n    this.props.connection.subscribe(\"req\", \"game_update\", async (msg) => {\n      this.props.connection.send({\n        method: \"res\",\n        type: \"game_update\",\n        payload: null\n      });\n\n      this.setState({ currentPhase: GamePhase.Transition });\n      await delay(500);\n      this.setState({\n        questionCount: this.state.questionCount + 1,\n        currentQuestion: msg.currentQuestion,\n      });\n\n      this.props.connection.subscribe(\"req\", \"question_start\").then(() => {\n        this.props.connection.send({\n          method: \"res\",\n          type: \"question_start\",\n          payload: null\n        });\n\n        console.log(\"Question started\");\n        this.setState({ currentPhase: GamePhase.Active });\n\n        this.props.connection.subscribe(\"req\", \"question_end\").then(msg => {\n          this.props.connection.send({\n            method: \"res\",\n            type: \"question_end\",\n            payload: null\n          });\n\n          console.log(\"Question ended\");\n          this.setState({ correctAnswer: msg });\n        });\n      });\n    });\n\n    this.props.connection.subscribe(\"req\", \"game_end\").then(msg => {\n      this.props.connection.send({\n        method: \"res\",\n        type: \"game_end\",\n        payload: null\n      });\n\n      console.log(\"Game ended\");\n      console.log(msg);\n      this.setState({ currentPhase: GamePhase.Ended });\n    });\n  }\n\n  render() {\n    const { connection, gameInfo, ...rest } = this.props;\n    let renderTarget: JSX.Element;\n\n    switch (this.state.currentPhase) {\n      case GamePhase.Transition:\n        renderTarget = <div className=\"fill-parent\">Question {this.state.questionCount.toString()}</div>;\n        break;\n\n      case GamePhase.Active:\n        renderTarget =\n          <AnsweringMC\n            connection={this.props.connection}\n            questionInfo={this.props.gameInfo.questions[this.state.currentQuestion]}\n            correctAnswer={this.state.correctAnswer}\n          />;\n        break;\n\n      default:\n        renderTarget = <div className=\"fill-parent\">TODO: Result UI</div>;\n        break;\n    }\n\n    return (\n      <div {...rest}>\n        {renderTarget}\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}