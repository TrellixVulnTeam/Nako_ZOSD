{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Desktop/Nako/nako/src/desktop/game/game.tsx\";\nimport React from \"react\";\nimport { CSSTransition } from \"react-transition-group\";\nimport Monster from \"../../assets/monsters/monster\";\nimport { animate, delay } from \"../../utils/utils\";\nimport AnsweringMC from \"../AnsweringMC/answering_MultipleChoice\";\nimport styles from \"./game.module.scss\";\nimport Result from \"./result\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar GamePhase;\n\n(function (GamePhase) {\n  GamePhase[GamePhase[\"Transition\"] = 0] = \"Transition\";\n  GamePhase[GamePhase[\"Active\"] = 1] = \"Active\";\n  GamePhase[GamePhase[\"Ended\"] = 2] = \"Ended\";\n})(GamePhase || (GamePhase = {}));\n\nexport default class Game extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.studentFlow = () => this.props.connection.subscribe(\"req\", \"game_update\").then(async msg => {\n      this.setState({\n        currentPhase: GamePhase.Transition\n      });\n      await new Promise(res => this.setState({\n        onSlideAnimComplete: res\n      }, () => console.log(\"Waiting for slide-in animation to complete\")));\n      this.setState({\n        questionCount: this.state.questionCount + 1,\n        currentQuestion: msg.currentQuestion\n      });\n\n      if (this.state.questionNumberElement.current) {\n        await animate(\"bounce\", this.state.questionNumberElement.current, 500);\n      } else {\n        console.warn(\"questionNumberElement was not found in DOM\");\n      }\n\n      this.props.connection.send({\n        method: \"res\",\n        type: \"game_update\",\n        payload: null\n      });\n      this.props.connection.subscribe(\"req\", \"question_start\").then(() => {\n        this.props.connection.send({\n          method: \"res\",\n          type: \"question_start\",\n          payload: null\n        });\n        console.log(\"Question started\");\n        this.setState({\n          currentPhase: GamePhase.Active,\n          correctAnswer: undefined\n        });\n        this.props.connection.subscribe(\"req\", \"question_end\").then(msg => {\n          this.props.connection.send({\n            method: \"res\",\n            type: \"question_end\",\n            payload: null\n          });\n          console.log(\"Question ended\");\n          this.setState({\n            correctAnswer: msg\n          });\n\n          if (this.state.currentPhase !== GamePhase.Ended) {\n            this.studentFlow();\n          }\n        });\n      });\n    });\n\n    this.teacherFlow = () => {\n      this.props.connection.subscribe(\"req\", \"game_update\", payload => {\n        this.setState({\n          currentQuestion: payload.currentQuestion\n        });\n      });\n      this.props.connection.subscribe(\"req\", \"question_end\", payload => {\n        var _this$state$monsterRe;\n\n        (_this$state$monsterRe = this.state.monsterRef.current) === null || _this$state$monsterRe === void 0 ? void 0 : _this$state$monsterRe.changeHealth(-payload.stats.correct / this.props.gameInfo.questions.length * 1.5);\n      });\n    };\n\n    this.state = {\n      questionCount: 0,\n      currentQuestion: -1,\n      currentPhase: this.props.accountInfo.role === \"student\" ? GamePhase.Transition : GamePhase.Active,\n      questionNumberElement: /*#__PURE__*/React.createRef(),\n      monsterRef: /*#__PURE__*/React.createRef(),\n      showResult: false,\n      result: [{\n        name: \"Test1\",\n        score: 0\n      }, {\n        name: \"Test2\",\n        score: 1\n      }, {\n        name: \"Test3\",\n        score: 2\n      }, {\n        name: \"Test4\",\n        score: 3\n      }, {\n        name: \"Test5\",\n        score: 4\n      }]\n    };\n    this.props.connection.subscribe(\"req\", \"game_end\").then(msg => {\n      this.props.connection.send({\n        method: \"res\",\n        type: \"game_end\",\n        payload: null\n      });\n      console.log(\"Game ended\");\n      console.log(msg);\n      this.setState({\n        currentPhase: GamePhase.Ended,\n        result: [...msg].sort((a, b) => b.score - a.score)\n      }, () => this.setState({\n        showResult: true\n      }));\n    });\n    this.props.accountInfo.role === \"student\" ? this.studentFlow() : this.teacherFlow();\n\n    window.toggleSequentialDisplay = () => this.setState({\n      showResult: !this.state.showResult\n    });\n  }\n\n  render() {\n    const {\n      connection,\n      accountInfo,\n      gameInfo,\n      ...rest\n    } = this.props;\n    let renderTarget;\n\n    switch (this.state.currentPhase) {\n      case GamePhase.Transition:\n        renderTarget = /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"fill-parent\",\n          id: styles.transition,\n          children: /*#__PURE__*/_jsxDEV(CSSTransition, {\n            in: true,\n            appear: true,\n            exit: false,\n            timeout: 1500,\n            classNames: {\n              appear: styles[\"slide-t2b-appear\"],\n              appearActive: styles[\"slide-t2b-appear-active\"],\n              appearDone: styles[\"slide-t2b-appear-done\"]\n            },\n            onEntered: async () => {\n              console.log(\"Animation completed\");\n              let loggedWarning = false;\n\n              while (!this.state.onSlideAnimComplete) {\n                if (!loggedWarning) {\n                  console.log(\"There was no promise to resolve, forcing delay for one...\");\n                  loggedWarning = true;\n                }\n\n                await delay(200);\n              }\n\n              this.state.onSlideAnimComplete();\n            },\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n                children: \"Question \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 186,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n                ref: this.state.questionNumberElement,\n                children: this.state.questionCount.toString()\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 187,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 185,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 11\n        }, this);\n        break;\n\n      case GamePhase.Active:\n        renderTarget = this.props.accountInfo.role === \"student\" ? /*#__PURE__*/_jsxDEV(AnsweringMC, {\n          connection: this.props.connection,\n          questionInfo: this.props.gameInfo.questions[this.state.currentQuestion],\n          correctAnswer: this.state.correctAnswer,\n          currentQuestionProps: this.state.currentQuestion\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 11\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          id: styles[\"monster-container\"],\n          className: \"fill-parent\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"arrow-left\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 209,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: \"Back\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 209,\n                  columnNumber: 55\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 209,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: [\"Question: \", this.state.currentQuestion + 1]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 210,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 208,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Monster, {\n              ref: this.state.monsterRef,\n              id: styles.monster\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 212,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              children: this.state.currentQuestion !== -1 ? this.props.gameInfo.questions[this.state.currentQuestion].question : \"Waiting for question...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 215,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 11\n        }, this);\n        break;\n\n      default:\n        renderTarget = /*#__PURE__*/_jsxDEV(Result, {\n          in: this.state.showResult,\n          data: this.state.result\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 24\n        }, this);\n        break;\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", { ...rest,\n      children: renderTarget\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 12\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/mac/Desktop/Nako/nako/src/desktop/game/game.tsx"],"names":["React","CSSTransition","Monster","animate","delay","AnsweringMC","styles","Result","GamePhase","Game","Component","constructor","props","studentFlow","connection","subscribe","then","msg","setState","currentPhase","Transition","Promise","res","onSlideAnimComplete","console","log","questionCount","state","currentQuestion","questionNumberElement","current","warn","send","method","type","payload","Active","correctAnswer","undefined","Ended","teacherFlow","monsterRef","changeHealth","stats","correct","gameInfo","questions","length","accountInfo","role","createRef","showResult","result","name","score","sort","a","b","window","toggleSequentialDisplay","render","rest","renderTarget","transition","appear","appearActive","appearDone","loggedWarning","toString","monster","question"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAT,QAA8B,wBAA9B;AACA,OAAOC,OAAP,MAAoB,+BAApB;AAQA,SAASC,OAAT,EAAkBC,KAAlB,QAA+B,mBAA/B;AACA,OAAOC,WAAP,MAAwB,yCAAxB;AACA,OAAOC,MAAP,MAAmB,oBAAnB;AACA,OAAOC,MAAP,MAAmB,UAAnB;;IAsBKC,S;;WAAAA,S;AAAAA,EAAAA,S,CAAAA,S;AAAAA,EAAAA,S,CAAAA,S;AAAAA,EAAAA,S,CAAAA,S;GAAAA,S,KAAAA,S;;AAML,eAAe,MAAMC,IAAN,SAAmBT,KAAK,CAACU,SAAzB,CAAyD;AACtEC,EAAAA,WAAW,CAACC,KAAD,EAAmB;AAC5B,UAAMA,KAAN;;AAD4B,SAiD9BC,WAjD8B,GAiDhB,MAAM,KAAKD,KAAL,CAAWE,UAAX,CAAsBC,SAAtB,CAAgC,KAAhC,EAAuC,aAAvC,EAAsDC,IAAtD,CAA2D,MAAOC,GAAP,IAAe;AAC5F,WAAKC,QAAL,CAAc;AAAEC,QAAAA,YAAY,EAAEX,SAAS,CAACY;AAA1B,OAAd;AACA,YAAM,IAAIC,OAAJ,CAAkBC,GAAG,IAAI,KAAKJ,QAAL,CAAc;AAAEK,QAAAA,mBAAmB,EAAED;AAAvB,OAAd,EAA4C,MAAME,OAAO,CAACC,GAAR,CAAY,4CAAZ,CAAlD,CAAzB,CAAN;AAEA,WAAKP,QAAL,CAAc;AACZQ,QAAAA,aAAa,EAAE,KAAKC,KAAL,CAAWD,aAAX,GAA2B,CAD9B;AAEZE,QAAAA,eAAe,EAAEX,GAAG,CAACW;AAFT,OAAd;;AAKA,UAAI,KAAKD,KAAL,CAAWE,qBAAX,CAAiCC,OAArC,EAA8C;AAC5C,cAAM3B,OAAO,CAAC,QAAD,EAAW,KAAKwB,KAAL,CAAWE,qBAAX,CAAiCC,OAA5C,EAAqD,GAArD,CAAb;AACD,OAFD,MAEO;AACLN,QAAAA,OAAO,CAACO,IAAR,CAAa,4CAAb;AACD;;AAED,WAAKnB,KAAL,CAAWE,UAAX,CAAsBkB,IAAtB,CAA2B;AACzBC,QAAAA,MAAM,EAAE,KADiB;AAEzBC,QAAAA,IAAI,EAAE,aAFmB;AAGzBC,QAAAA,OAAO,EAAE;AAHgB,OAA3B;AAMA,WAAKvB,KAAL,CAAWE,UAAX,CAAsBC,SAAtB,CAAgC,KAAhC,EAAuC,gBAAvC,EAAyDC,IAAzD,CAA8D,MAAM;AAClE,aAAKJ,KAAL,CAAWE,UAAX,CAAsBkB,IAAtB,CAA2B;AACzBC,UAAAA,MAAM,EAAE,KADiB;AAEzBC,UAAAA,IAAI,EAAE,gBAFmB;AAGzBC,UAAAA,OAAO,EAAE;AAHgB,SAA3B;AAMAX,QAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACA,aAAKP,QAAL,CAAc;AAAEC,UAAAA,YAAY,EAAEX,SAAS,CAAC4B,MAA1B;AAAkCC,UAAAA,aAAa,EAAEC;AAAjD,SAAd;AAEA,aAAK1B,KAAL,CAAWE,UAAX,CAAsBC,SAAtB,CAAgC,KAAhC,EAAuC,cAAvC,EAAuDC,IAAvD,CAA6DC,GAAD,IAAS;AACnE,eAAKL,KAAL,CAAWE,UAAX,CAAsBkB,IAAtB,CAA2B;AACzBC,YAAAA,MAAM,EAAE,KADiB;AAEzBC,YAAAA,IAAI,EAAE,cAFmB;AAGzBC,YAAAA,OAAO,EAAE;AAHgB,WAA3B;AAMAX,UAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACA,eAAKP,QAAL,CAAc;AAAEmB,YAAAA,aAAa,EAAEpB;AAAjB,WAAd;;AAEA,cAAI,KAAKU,KAAL,CAAWR,YAAX,KAA4BX,SAAS,CAAC+B,KAA1C,EAAiD;AAC/C,iBAAK1B,WAAL;AACD;AACF,SAbD;AAcD,OAxBD;AAyBD,KA9CmB,CAjDU;;AAAA,SAiG9B2B,WAjG8B,GAiGhB,MAAM;AAClB,WAAK5B,KAAL,CAAWE,UAAX,CAAsBC,SAAtB,CAAgC,KAAhC,EAAuC,aAAvC,EAAsDoB,OAAO,IAAI;AAC/D,aAAKjB,QAAL,CAAc;AAAEU,UAAAA,eAAe,EAAEO,OAAO,CAACP;AAA3B,SAAd;AACD,OAFD;AAIA,WAAKhB,KAAL,CAAWE,UAAX,CAAsBC,SAAtB,CAAgC,KAAhC,EAAuC,cAAvC,EAAuDoB,OAAO,IAAI;AAAA;;AAChE,sCAAKR,KAAL,CAAWc,UAAX,CAAsBX,OAAtB,gFAA+BY,YAA/B,CAA6C,CAACP,OAAO,CAACQ,KAAR,CAAcC,OAAf,GAAyB,KAAKhC,KAAL,CAAWiC,QAAX,CAAoBC,SAApB,CAA8BC,MAAxD,GAAkE,GAA9G;AACD,OAFD;AAGD,KAzG6B;;AAG5B,SAAKpB,KAAL,GAAa;AACXD,MAAAA,aAAa,EAAE,CADJ;AAEXE,MAAAA,eAAe,EAAE,CAAC,CAFP;AAGXT,MAAAA,YAAY,EAAE,KAAKP,KAAL,CAAWoC,WAAX,CAAuBC,IAAvB,KAAgC,SAAhC,GAA4CzC,SAAS,CAACY,UAAtD,GAAmEZ,SAAS,CAAC4B,MAHhF;AAIXP,MAAAA,qBAAqB,eAAE7B,KAAK,CAACkD,SAAN,EAJZ;AAKXT,MAAAA,UAAU,eAAEzC,KAAK,CAACkD,SAAN,EALD;AAMXC,MAAAA,UAAU,EAAE,KAND;AAOXC,MAAAA,MAAM,EAAE,CAAC;AACPC,QAAAA,IAAI,EAAE,OADC;AAEPC,QAAAA,KAAK,EAAE;AAFA,OAAD,EAGL;AACDD,QAAAA,IAAI,EAAE,OADL;AAEDC,QAAAA,KAAK,EAAE;AAFN,OAHK,EAML;AACDD,QAAAA,IAAI,EAAE,OADL;AAEDC,QAAAA,KAAK,EAAE;AAFN,OANK,EASL;AACDD,QAAAA,IAAI,EAAE,OADL;AAEDC,QAAAA,KAAK,EAAE;AAFN,OATK,EAYL;AACDD,QAAAA,IAAI,EAAE,OADL;AAEDC,QAAAA,KAAK,EAAE;AAFN,OAZK;AAPG,KAAb;AAyBA,SAAK1C,KAAL,CAAWE,UAAX,CAAsBC,SAAtB,CAAgC,KAAhC,EAAuC,UAAvC,EAAmDC,IAAnD,CAAyDC,GAAD,IAAS;AAC/D,WAAKL,KAAL,CAAWE,UAAX,CAAsBkB,IAAtB,CAA2B;AACzBC,QAAAA,MAAM,EAAE,KADiB;AAEzBC,QAAAA,IAAI,EAAE,UAFmB;AAGzBC,QAAAA,OAAO,EAAE;AAHgB,OAA3B;AAMAX,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYR,GAAZ;AAEA,WAAKC,QAAL,CACE;AAAEC,QAAAA,YAAY,EAAEX,SAAS,CAAC+B,KAA1B;AAAiCa,QAAAA,MAAM,EAAE,CAAC,GAAGnC,GAAJ,EAASsC,IAAT,CAAc,CAACC,CAAD,EAAIC,CAAJ,KAAUA,CAAC,CAACH,KAAF,GAAUE,CAAC,CAACF,KAApC;AAAzC,OADF,EAEE,MAAM,KAAKpC,QAAL,CAAc;AAAEiC,QAAAA,UAAU,EAAE;AAAd,OAAd,CAFR;AAID,KAdD;AAgBA,SAAKvC,KAAL,CAAWoC,WAAX,CAAuBC,IAAvB,KAAgC,SAAhC,GAA4C,KAAKpC,WAAL,EAA5C,GAAiE,KAAK2B,WAAL,EAAjE;;AAECkB,IAAAA,MAAD,CAAgBC,uBAAhB,GAA0C,MAAM,KAAKzC,QAAL,CAAc;AAAEiC,MAAAA,UAAU,EAAE,CAAC,KAAKxB,KAAL,CAAWwB;AAA1B,KAAd,CAAhD;AACD;;AA4DDS,EAAAA,MAAM,GAAG;AACP,UAAM;AAAE9C,MAAAA,UAAF;AAAckC,MAAAA,WAAd;AAA2BH,MAAAA,QAA3B;AAAqC,SAAGgB;AAAxC,QAAiD,KAAKjD,KAA5D;AACA,QAAIkD,YAAJ;;AAEA,YAAQ,KAAKnC,KAAL,CAAWR,YAAnB;AACE,WAAKX,SAAS,CAACY,UAAf;AACE0C,QAAAA,YAAY,gBACV;AAAK,UAAA,SAAS,EAAC,aAAf;AAA6B,UAAA,EAAE,EAAExD,MAAM,CAACyD,UAAxC;AAAA,iCACE,QAAC,aAAD;AACE,YAAA,EAAE,EAAE,IADN;AAEE,YAAA,MAAM,EAAE,IAFV;AAGE,YAAA,IAAI,EAAE,KAHR;AAIE,YAAA,OAAO,EAAE,IAJX;AAKE,YAAA,UAAU,EAAE;AACVC,cAAAA,MAAM,EAAE1D,MAAM,CAAC,kBAAD,CADJ;AAEV2D,cAAAA,YAAY,EAAE3D,MAAM,CAAC,yBAAD,CAFV;AAGV4D,cAAAA,UAAU,EAAE5D,MAAM,CAAC,uBAAD;AAHR,aALd;AAUE,YAAA,SAAS,EAAE,YAAY;AACrBkB,cAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AAEA,kBAAI0C,aAAa,GAAG,KAApB;;AAEA,qBAAO,CAAC,KAAKxC,KAAL,CAAWJ,mBAAnB,EAAwC;AACtC,oBAAI,CAAC4C,aAAL,EAAoB;AAClB3C,kBAAAA,OAAO,CAACC,GAAR,CAAY,2DAAZ;AACA0C,kBAAAA,aAAa,GAAG,IAAhB;AACD;;AAED,sBAAM/D,KAAK,CAAC,GAAD,CAAX;AACD;;AAED,mBAAKuB,KAAL,CAAWJ,mBAAX;AACD,aAzBH;AAAA,mCA2BE;AAAA,sCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,eAEE;AAAI,gBAAA,GAAG,EAAE,KAAKI,KAAL,CAAWE,qBAApB;AAAA,0BACG,KAAKF,KAAL,CAAWD,aAAX,CAAyB0C,QAAzB;AADH;AAAA;AAAA;AAAA;AAAA,sBAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AA3BF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBADF;AAsCA;;AAEF,WAAK5D,SAAS,CAAC4B,MAAf;AACE0B,QAAAA,YAAY,GAAG,KAAKlD,KAAL,CAAWoC,WAAX,CAAuBC,IAAvB,KAAgC,SAAhC,gBACb,QAAC,WAAD;AACE,UAAA,UAAU,EAAE,KAAKrC,KAAL,CAAWE,UADzB;AAEE,UAAA,YAAY,EACV,KAAKF,KAAL,CAAWiC,QAAX,CAAoBC,SAApB,CAA8B,KAAKnB,KAAL,CAAWC,eAAzC,CAHJ;AAKE,UAAA,aAAa,EAAE,KAAKD,KAAL,CAAWU,aAL5B;AAME,UAAA,oBAAoB,EAAE,KAAKV,KAAL,CAAWC;AANnC;AAAA;AAAA;AAAA;AAAA,gBADa,gBASb;AAAK,UAAA,EAAE,EAAEtB,MAAM,CAAC,mBAAD,CAAf;AAAsC,UAAA,SAAS,EAAC,aAAhD;AAAA,kCACE;AAAA,oCACE;AAAA,sCACE;AAAA,wCAAQ;AAAM,kBAAA,SAAS,EAAC;AAAhB;AAAA;AAAA;AAAA;AAAA,wBAAR,eAAsC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAtC;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,eAEE;AAAA,yCAAiB,KAAKqB,KAAL,CAAWC,eAAX,GAA6B,CAA9C;AAAA;AAAA;AAAA;AAAA;AAAA,sBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,eAKE,QAAC,OAAD;AAAS,cAAA,GAAG,EAAE,KAAKD,KAAL,CAAWc,UAAzB;AAAqC,cAAA,EAAE,EAAEnC,MAAM,CAAC+D;AAAhD;AAAA;AAAA;AAAA;AAAA,oBALF;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAQE;AAAA,mCACE;AAAA,wBAAO,KAAK1C,KAAL,CAAWC,eAAX,KAA+B,CAAC,CAAhC,GAAoC,KAAKhB,KAAL,CAAWiC,QAAX,CAAoBC,SAApB,CAA8B,KAAKnB,KAAL,CAAWC,eAAzC,EAA0D0C,QAA9F,GAAyG;AAAhH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,kBARF;AAAA;AAAA;AAAA;AAAA;AAAA,gBATF;AAqBA;;AAEF;AACER,QAAAA,YAAY,gBAAG,QAAC,MAAD;AAAQ,UAAA,EAAE,EAAE,KAAKnC,KAAL,CAAWwB,UAAvB;AAAmC,UAAA,IAAI,EAAE,KAAKxB,KAAL,CAAWyB;AAApD;AAAA;AAAA;AAAA;AAAA,gBAAf;AACA;AApEJ;;AAuEA,wBAAO,oBAASS,IAAT;AAAA,gBAAgBC;AAAhB;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AAxLqE","sourcesContent":["import React from \"react\";\nimport { CSSTransition } from \"react-transition-group\";\nimport Monster from \"../../assets/monsters/monster\";\nimport { AccountInfo } from \"../../modules/account-info\";\nimport NakoAPI, {\n  AccountRole,\n  GameEndRequest,\n  GameInfo,\n  QuestionEndRequest,\n} from \"../../modules/websocket-messages\";\nimport { animate, delay } from \"../../utils/utils\";\nimport AnsweringMC from \"../AnsweringMC/answering_MultipleChoice\";\nimport styles from \"./game.module.scss\";\nimport Result from \"./result\";\nimport WinSound from \"./Nako Win.wav\";\nimport FailSound from \"./Nako Fail.wav\";\n\ninterface GameProps extends React.HTMLAttributes<HTMLDivElement> {\n  connection: NakoAPI;\n  accountInfo: AccountInfo;\n  gameInfo: GameInfo<AccountRole>;\n}\n\ninterface GameState {\n  questionCount: number;\n  currentQuestion: number;\n  currentPhase: GamePhase;\n  questionNumberElement: React.RefObject<HTMLHeadingElement>;\n  monsterRef: React.RefObject<Monster>;\n  showResult: boolean;\n  onSlideAnimComplete?: (value: void | PromiseLike<void>) => void;\n  correctAnswer?: QuestionEndRequest;\n  result?: GameEndRequest;\n}\n\nenum GamePhase {\n  Transition,\n  Active,\n  Ended,\n}\n\nexport default class Game extends React.Component<GameProps, GameState> {\n  constructor(props: GameProps) {\n    super(props);\n\n    this.state = {\n      questionCount: 0,\n      currentQuestion: -1,\n      currentPhase: this.props.accountInfo.role === \"student\" ? GamePhase.Transition : GamePhase.Active,\n      questionNumberElement: React.createRef<HTMLHeadingElement>(),\n      monsterRef: React.createRef<Monster>(),\n      showResult: false,\n      result: [{\n        name: \"Test1\",\n        score: 0\n      }, {\n        name: \"Test2\",\n        score: 1\n      }, {\n        name: \"Test3\",\n        score: 2\n      }, {\n        name: \"Test4\",\n        score: 3\n      }, {\n        name: \"Test5\",\n        score: 4\n      }]\n    };\n\n    this.props.connection.subscribe(\"req\", \"game_end\").then((msg) => {\n      this.props.connection.send({\n        method: \"res\",\n        type: \"game_end\",\n        payload: null,\n      });\n  \n      console.log(\"Game ended\");\n      console.log(msg);\n  \n      this.setState(\n        { currentPhase: GamePhase.Ended, result: [...msg].sort((a, b) => b.score - a.score) },\n        () => this.setState({ showResult: true })\n      );\n    });\n\n    this.props.accountInfo.role === \"student\" ? this.studentFlow() : this.teacherFlow();\n\n    (window as any).toggleSequentialDisplay = () => this.setState({ showResult: !this.state.showResult });\n  }\n\n  studentFlow = () => this.props.connection.subscribe(\"req\", \"game_update\").then(async (msg) => {\n    this.setState({ currentPhase: GamePhase.Transition });\n    await new Promise<void>(res => this.setState({ onSlideAnimComplete: res }, () => console.log(\"Waiting for slide-in animation to complete\")));\n\n    this.setState({\n      questionCount: this.state.questionCount + 1,\n      currentQuestion: msg.currentQuestion,\n    });\n\n    if (this.state.questionNumberElement.current) {\n      await animate(\"bounce\", this.state.questionNumberElement.current, 500);\n    } else {\n      console.warn(\"questionNumberElement was not found in DOM\");\n    }\n\n    this.props.connection.send({\n      method: \"res\",\n      type: \"game_update\",\n      payload: null,\n    });\n\n    this.props.connection.subscribe(\"req\", \"question_start\").then(() => {\n      this.props.connection.send({\n        method: \"res\",\n        type: \"question_start\",\n        payload: null,\n      });\n\n      console.log(\"Question started\");\n      this.setState({ currentPhase: GamePhase.Active, correctAnswer: undefined });\n\n      this.props.connection.subscribe(\"req\", \"question_end\").then((msg) => {\n        this.props.connection.send({\n          method: \"res\",\n          type: \"question_end\",\n          payload: null,\n        });\n\n        console.log(\"Question ended\");\n        this.setState({ correctAnswer: msg });\n\n        if (this.state.currentPhase !== GamePhase.Ended) {\n          this.studentFlow();\n        }\n      });\n    });\n  });\n\n  teacherFlow = () => {\n    this.props.connection.subscribe(\"req\", \"game_update\", payload => {\n      this.setState({ currentQuestion: payload.currentQuestion });\n    });\n\n    this.props.connection.subscribe(\"req\", \"question_end\", payload => {\n      this.state.monsterRef.current?.changeHealth((-payload.stats.correct / this.props.gameInfo.questions.length) * 1.5);\n    });\n  }\n\n  render() {\n    const { connection, accountInfo, gameInfo, ...rest } = this.props;\n    let renderTarget: JSX.Element;\n\n    switch (this.state.currentPhase) {\n      case GamePhase.Transition:\n        renderTarget = (\n          <div className=\"fill-parent\" id={styles.transition}>\n            <CSSTransition\n              in={true}\n              appear={true}\n              exit={false}\n              timeout={1500}\n              classNames={{\n                appear: styles[\"slide-t2b-appear\"],\n                appearActive: styles[\"slide-t2b-appear-active\"],\n                appearDone: styles[\"slide-t2b-appear-done\"]\n              }}\n              onEntered={async () => {\n                console.log(\"Animation completed\");\n\n                let loggedWarning = false;\n\n                while (!this.state.onSlideAnimComplete) {\n                  if (!loggedWarning) {\n                    console.log(\"There was no promise to resolve, forcing delay for one...\");\n                    loggedWarning = true;\n                  }\n\n                  await delay(200);\n                }\n\n                this.state.onSlideAnimComplete();\n              }}\n            >\n              <span>\n                <h1>Question </h1>\n                <h1 ref={this.state.questionNumberElement}>\n                  {this.state.questionCount.toString()}\n                </h1>\n              </span>\n            </CSSTransition>\n          </div>\n        );\n        break;\n\n      case GamePhase.Active:\n        renderTarget = this.props.accountInfo.role === \"student\" ?\n          <AnsweringMC\n            connection={this.props.connection}\n            questionInfo={\n              this.props.gameInfo.questions[this.state.currentQuestion]\n            }\n            correctAnswer={this.state.correctAnswer}\n            currentQuestionProps={this.state.currentQuestion}\n          /> :\n          <div id={styles[\"monster-container\"]} className=\"fill-parent\">\n            <div>\n              <div>\n                <button><span className=\"arrow-left\"/><span>Back</span></button>\n                <span>Question: {this.state.currentQuestion + 1}</span>\n              </div>\n              <Monster ref={this.state.monsterRef} id={styles.monster}/>\n            </div>\n            <div>\n              <span>{this.state.currentQuestion !== -1 ? this.props.gameInfo.questions[this.state.currentQuestion].question : \"Waiting for question...\"}</span>\n            </div>\n          </div>;\n        break;\n\n      default:\n        renderTarget = <Result in={this.state.showResult} data={this.state.result}/>;\n        break;\n    }\n\n    return <div {...rest}>{renderTarget}</div>;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}