{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Desktop/Nako/nako/src/desktop/RoundTimer/RoundTimer.tsx\";\nimport { CountdownCircleTimer } from \"react-countdown-circle-timer\";\nimport \"../RoundTimer/ReminderTimer.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst renderTime = props => {\n  //when count down finish\n  if (props.remainingTime === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"timer\",\n      children: \" Finish\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 12\n    }, this);\n  } //when counting down\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"timer\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text\",\n      children: \"You have\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      style: {\n        display: \"flex\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"value\",\n        children: [Math.floor(props.remainingTime / 60), \" :\", \" \", props.remainingTime % 60 <= 9 ? \"0\" + props.remainingTime % 60 : props.remainingTime % 60]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text\",\n      children: \"second left\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 5\n  }, this);\n};\n\nconst DisplayTimer = props => {\n  const {\n    time,\n    timerSize,\n    ...rest\n  } = props;\n  return /*#__PURE__*/_jsxDEV(\"div\", { ...rest,\n    children: /*#__PURE__*/_jsxDEV(CountdownCircleTimer // styles={{ display: \"flex\", TextAlign: \"center\" }}\n    , {\n      isPlaying: true,\n      size: timerSize,\n      duration: time,\n      colors: [[\"#10EC00\", 0.5], [\"#FFA515\", 0.3], [\"#FA1B1B\", 0]],\n      trailColor: \"#rgba(0,0,0,0)\",\n      strokeWidth: 30,\n      rotation: \"counterclockwise\" //Setting for the timer keep repeat\n      ,\n      onComplete: () => [false, 0],\n      children: renderTime\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n\n_c = DisplayTimer;\nDisplayTimer.defaultProps = {\n  time: 10,\n  timerSize: 400\n};\nexport default DisplayTimer;\n\nvar _c;\n\n$RefreshReg$(_c, \"DisplayTimer\");","map":{"version":3,"sources":["/Users/mac/Desktop/Nako/nako/src/desktop/RoundTimer/RoundTimer.tsx"],"names":["CountdownCircleTimer","renderTime","props","remainingTime","display","Math","floor","DisplayTimer","time","timerSize","rest","defaultProps"],"mappings":";AAAA,SAASA,oBAAT,QAAqC,8BAArC;AACA,OAAO,kCAAP;;;AAEA,MAAMC,UAAU,GAAIC,KAAD,IAA2D;AAC5E;AACA,MAAIA,KAAK,CAACC,aAAN,KAAwB,CAA5B,EAA+B;AAC7B,wBAAO;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD,GAJ2E,CAK5E;;;AACA,sBACE;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA,4BACE;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAM,MAAA,KAAK,EAAE;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAAb;AAAA,6BACE;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA,mBACGC,IAAI,CAACC,KAAL,CAAWJ,KAAK,CAACC,aAAN,GAAsB,EAAjC,CADH,QAC2C,GAD3C,EAEGD,KAAK,CAACC,aAAN,GAAsB,EAAtB,IAA4B,CAA5B,GACG,MAAOD,KAAK,CAACC,aAAN,GAAsB,EADhC,GAEGD,KAAK,CAACC,aAAN,GAAsB,EAJ5B;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAFF,eAUE;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAVF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAcD,CApBD;;AA2BA,MAAMI,YAAY,GAChBL,KADmB,IAEhB;AACH,QAAM;AAAEM,IAAAA,IAAF;AAAQC,IAAAA,SAAR;AAAmB,OAAGC;AAAtB,MAA+BR,KAArC;AAEA,sBACE,oBAASQ,IAAT;AAAA,2BACE,QAAC,oBAAD,CACE;AADF;AAEE,MAAA,SAAS,MAFX;AAGE,MAAA,IAAI,EAAED,SAHR;AAIE,MAAA,QAAQ,EAAED,IAJZ;AAKE,MAAA,MAAM,EAAE,CACN,CAAC,SAAD,EAAY,GAAZ,CADM,EAEN,CAAC,SAAD,EAAY,GAAZ,CAFM,EAGN,CAAC,SAAD,EAAY,CAAZ,CAHM,CALV;AAUE,MAAA,UAAU,EAAE,gBAVd;AAWE,MAAA,WAAW,EAAE,EAXf;AAYE,MAAA,QAAQ,EAAE,kBAZZ,CAaE;AAbF;AAcE,MAAA,UAAU,EAAE,MAAM,CAAC,KAAD,EAAQ,CAAR,CAdpB;AAAA,gBAiBGP;AAjBH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAuBD,CA5BD;;KAAMM,Y;AA8BNA,YAAY,CAACI,YAAb,GAA4B;AAAEH,EAAAA,IAAI,EAAE,EAAR;AAAYC,EAAAA,SAAS,EAAE;AAAvB,CAA5B;AAEA,eAAeF,YAAf","sourcesContent":["import { CountdownCircleTimer } from \"react-countdown-circle-timer\";\nimport \"../RoundTimer/ReminderTimer.scss\";\n\nconst renderTime = (props: { remainingTime: number; elapsedTime: number }) => {\n  //when count down finish\n  if (props.remainingTime === 0) {\n    return <div className=\"timer\"> Finish</div>;\n  }\n  //when counting down\n  return (\n    <div className=\"timer\">\n      <div className=\"text\">You have</div>\n      <span style={{ display: \"flex\" }}>\n        <div className=\"value\">\n          {Math.floor(props.remainingTime / 60)} :{\" \"}\n          {props.remainingTime % 60 <= 9\n            ? \"0\" + (props.remainingTime % 60)\n            : props.remainingTime % 60}\n        </div>\n      </span>\n      <div className=\"text\">second left</div>\n    </div>\n  );\n};\n\ninterface DisplayTimerProps {\n  time: number;\n  timerSize: number;\n}\n\nconst DisplayTimer = (\n  props: DisplayTimerProps & React.HTMLAttributes<HTMLDivElement>\n) => {\n  const { time, timerSize, ...rest } = props;\n\n  return (\n    <div {...rest}>\n      <CountdownCircleTimer\n        // styles={{ display: \"flex\", TextAlign: \"center\" }}\n        isPlaying\n        size={timerSize}\n        duration={time}\n        colors={[\n          [\"#10EC00\", 0.5],\n          [\"#FFA515\", 0.3],\n          [\"#FA1B1B\", 0],\n        ]}\n        trailColor={\"#rgba(0,0,0,0)\"}\n        strokeWidth={30}\n        rotation={\"counterclockwise\"}\n        //Setting for the timer keep repeat\n        onComplete={() => [false, 0]}\n      >\n        {/*The content in the timer*/}\n        {renderTime}\n      </CountdownCircleTimer>\n    </div>\n  );\n};\n\nDisplayTimer.defaultProps = { time: 10, timerSize: 400 };\n\nexport default DisplayTimer;\n"]},"metadata":{},"sourceType":"module"}