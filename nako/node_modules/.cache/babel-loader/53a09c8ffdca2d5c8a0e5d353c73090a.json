{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Desktop/Nako/nako/src/desktop/game/game.tsx\";\nimport React from \"react\";\nimport { CSSTransition } from \"react-transition-group\";\nimport { animate, delay } from \"../../utils\";\nimport AnsweringMC from \"../AnsweringMC/answering_MultipleChoice\";\nimport styles from \"./game.module.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar GamePhase;\n\n(function (GamePhase) {\n  GamePhase[GamePhase[\"Transition\"] = 0] = \"Transition\";\n  GamePhase[GamePhase[\"Active\"] = 1] = \"Active\";\n  GamePhase[GamePhase[\"Ended\"] = 2] = \"Ended\";\n})(GamePhase || (GamePhase = {}));\n\nexport default class Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      questionCount: 0,\n      currentQuestion: 0,\n      currentPhase: GamePhase.Transition,\n      questionNumberElement: /*#__PURE__*/React.createRef()\n    }; // Gameplay loop\n\n    const loop = () => this.props.connection.subscribe(\"req\", \"game_update\").then(async msg => {\n      this.setState({\n        currentPhase: GamePhase.Transition\n      });\n      await new Promise(res => this.setState({\n        onSlideAnimComplete: res\n      }, () => console.log(\"Waiting for slide-in animation to complete\")));\n      this.setState({\n        questionCount: this.state.questionCount + 1,\n        currentQuestion: msg.currentQuestion\n      });\n\n      if (this.state.questionNumberElement.current) {\n        await animate(\"bounce\", this.state.questionNumberElement.current, 500);\n      } else {\n        console.warn(\"questionNumberElement was not found in DOM\");\n      }\n\n      this.props.connection.send({\n        method: \"res\",\n        type: \"game_update\",\n        payload: null\n      });\n      this.props.connection.subscribe(\"req\", \"question_start\").then(() => {\n        this.props.connection.send({\n          method: \"res\",\n          type: \"question_start\",\n          payload: null\n        });\n        console.log(\"Question started\");\n        this.setState({\n          currentPhase: GamePhase.Active\n        });\n        this.props.connection.subscribe(\"req\", \"question_end\").then(msg => {\n          this.props.connection.send({\n            method: \"res\",\n            type: \"question_end\",\n            payload: null\n          });\n          console.log(\"Question ended\");\n          this.setState({\n            correctAnswer: msg\n          });\n\n          if (this.state.currentPhase !== GamePhase.Ended) {\n            loop();\n          }\n        });\n      });\n    });\n\n    this.props.connection.subscribe(\"req\", \"game_end\").then(msg => {\n      this.props.connection.send({\n        method: \"res\",\n        type: \"game_end\",\n        payload: null\n      });\n      console.log(\"Game ended\");\n      console.log(msg);\n      this.setState({\n        currentPhase: GamePhase.Ended\n      });\n    });\n    loop();\n  }\n\n  render() {\n    const {\n      connection,\n      gameInfo,\n      ...rest\n    } = this.props;\n    let renderTarget;\n\n    switch (this.state.currentPhase) {\n      case GamePhase.Transition:\n        renderTarget = /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"fill-parent\",\n          id: styles.transition,\n          children: /*#__PURE__*/_jsxDEV(CSSTransition, {\n            in: true,\n            appear: true,\n            exit: false,\n            timeout: 1500,\n            classNames: {\n              appear: styles[\"slide-in-appear\"],\n              appearActive: styles[\"slide-in-appear-active\"],\n              appearDone: styles[\"slide-in-appear-done\"]\n            },\n            onEntered: async () => {\n              console.log(\"Animation completed\");\n              let loggedWarning = false;\n\n              while (!this.state.onSlideAnimComplete) {\n                if (!loggedWarning) {\n                  console.log(\"There was no promise to resolve, forcing delay for one...\");\n                  loggedWarning = true;\n                }\n\n                await delay(200);\n              }\n\n              this.state.onSlideAnimComplete();\n            },\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n                children: \"Question \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 140,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n                ref: this.state.questionNumberElement,\n                children: this.state.questionCount.toString()\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 141,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 139,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 11\n        }, this);\n        break;\n\n      case GamePhase.Active:\n        renderTarget = /*#__PURE__*/_jsxDEV(AnsweringMC, {\n          connection: this.props.connection,\n          questionInfo: this.props.gameInfo.questions[this.state.currentQuestion],\n          correctAnswer: this.state.correctAnswer,\n          currentQuestionProps: this.state.currentQuestion\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 11\n        }, this);\n        break;\n\n      default:\n        renderTarget = /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"fill-parent\",\n          children: \"TODO: Result UI\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 24\n        }, this);\n        break;\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", { ...rest,\n      children: renderTarget\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 12\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/mac/Desktop/Nako/nako/src/desktop/game/game.tsx"],"names":["React","CSSTransition","animate","delay","AnsweringMC","styles","GamePhase","Game","Component","constructor","props","state","questionCount","currentQuestion","currentPhase","Transition","questionNumberElement","createRef","loop","connection","subscribe","then","msg","setState","Promise","res","onSlideAnimComplete","console","log","current","warn","send","method","type","payload","Active","correctAnswer","Ended","render","gameInfo","rest","renderTarget","transition","appear","appearActive","appearDone","loggedWarning","toString","questions"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { CSSTransition } from \"react-transition-group\";\nimport NakoAPI, {\n  GameInfo,\n  QuestionEndRequest,\n} from \"../../modules/websocket-messages\";\nimport { animate, delay } from \"../../utils\";\nimport AnsweringMC from \"../AnsweringMC/answering_MultipleChoice\";\nimport styles from \"./game.module.scss\";\n\ninterface GameProps extends React.HTMLAttributes<HTMLDivElement> {\n  connection: NakoAPI;\n  gameInfo: GameInfo;\n}\n\ninterface GameState {\n  questionCount: number;\n  currentQuestion: number;\n  currentPhase: GamePhase;\n  questionNumberElement: React.RefObject<HTMLHeadingElement>;\n  onSlideAnimComplete?: (value: void | PromiseLike<void>) => void;\n  correctAnswer?: QuestionEndRequest;\n}\n\nenum GamePhase {\n  Transition,Active,Ended,\n}\n\nexport default class Game extends React.Component<GameProps, GameState> {\n  constructor(props: GameProps) {\n    super(props);\n\n    this.state = {\n      questionCount: 0,\n      currentQuestion: 0,\n      currentPhase: GamePhase.Transition,\n      questionNumberElement: React.createRef<HTMLHeadingElement>(),\n    };\n\n    // Gameplay loop\n    const loop = () => this.props.connection.subscribe(\"req\", \"game_update\").then(async (msg) => {\n      this.setState({ currentPhase: GamePhase.Transition });\n      await new Promise<void>(res => this.setState({ onSlideAnimComplete: res }, () => console.log(\"Waiting for slide-in animation to complete\")));\n\n      this.setState({\n        questionCount: this.state.questionCount + 1,\n        currentQuestion: msg.currentQuestion,\n      });\n\n      if (this.state.questionNumberElement.current) {\n        await animate(\"bounce\", this.state.questionNumberElement.current, 500);\n      } else {\n        console.warn(\"questionNumberElement was not found in DOM\");\n      }\n\n      this.props.connection.send({\n        method: \"res\",\n        type: \"game_update\",\n        payload: null,\n      });\n\n      this.props.connection.subscribe(\"req\", \"question_start\").then(() => {\n        this.props.connection.send({\n          method: \"res\",\n          type: \"question_start\",\n          payload: null,\n        });\n\n        console.log(\"Question started\");\n        this.setState({ currentPhase: GamePhase.Active });\n\n        this.props.connection.subscribe(\"req\", \"question_end\").then((msg) => {\n          this.props.connection.send({\n            method: \"res\",\n            type: \"question_end\",\n            payload: null,\n          });\n\n          console.log(\"Question ended\");\n          this.setState({ correctAnswer: msg });\n\n          if (this.state.currentPhase !== GamePhase.Ended) {\n            loop();\n          }\n        });\n      });\n    });\n\n    this.props.connection.subscribe(\"req\", \"game_end\").then((msg) => {\n      this.props.connection.send({\n        method: \"res\",\n        type: \"game_end\",\n        payload: null,\n      });\n\n      console.log(\"Game ended\");\n      console.log(msg);\n      this.setState({ currentPhase: GamePhase.Ended });\n    });\n\n    loop();\n  }\n\n  render() {\n    const { connection, gameInfo, ...rest } = this.props;\n    let renderTarget: JSX.Element;\n\n    switch (this.state.currentPhase) {\n      case GamePhase.Transition:\n        renderTarget = (\n          <div className=\"fill-parent\" id={styles.transition}>\n            <CSSTransition\n              in={true}\n              appear={true}\n              exit={false}\n              timeout={1500}\n              classNames={{\n                appear: styles[\"slide-in-appear\"],\n                appearActive: styles[\"slide-in-appear-active\"],\n                appearDone: styles[\"slide-in-appear-done\"],\n              }}\n              onEntered={async () => {\n                console.log(\"Animation completed\");\n\n                let loggedWarning = false;\n\n                while (!this.state.onSlideAnimComplete) {\n                  if (!loggedWarning) {\n                    console.log(\"There was no promise to resolve, forcing delay for one...\");\n                    loggedWarning = true;\n                  }\n\n                  await delay(200);\n                }\n\n                this.state.onSlideAnimComplete();\n              }}\n            >\n              <span>\n                <h1>Question </h1>\n                <h1 ref={this.state.questionNumberElement}>\n                  {this.state.questionCount.toString()}\n                </h1>\n              </span>\n            </CSSTransition>\n          </div>\n        );\n        break;\n\n      case GamePhase.Active:\n        renderTarget = (\n          <AnsweringMC\n            connection={this.props.connection}\n            questionInfo={\n              this.props.gameInfo.questions[this.state.currentQuestion]\n            }\n            correctAnswer={this.state.correctAnswer}\n            currentQuestionProps={this.state.currentQuestion}\n          />\n        );\n        break;\n\n      default:\n        renderTarget = <div className=\"fill-parent\">TODO: Result UI</div>;\n        break;\n    }\n\n    return <div {...rest}>{renderTarget}</div>;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}