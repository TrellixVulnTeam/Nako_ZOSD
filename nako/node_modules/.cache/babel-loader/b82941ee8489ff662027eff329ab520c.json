{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Desktop/Nako/nako/src/mobile/login/login.tsx\";\n///<reference path=\"../../types/web-nfc.d.ts\">\nimport React from \"react\";\nimport Axios from \"axios\";\nimport { isAccountInfo } from \"../../modules/account-info\";\nimport styles from \"./login.module.scss\";\nimport QRScanner from \"../../modules/qr-scanner/qr-scanner\";\nimport Logo from \"../../modules/logo/logo\";\nimport { delay } from \"../../utils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar LoginPhase;\n\n(function (LoginPhase) {\n  LoginPhase[LoginPhase[\"menu\"] = 0] = \"menu\";\n  LoginPhase[LoginPhase[\"NFC\"] = 1] = \"NFC\";\n  LoginPhase[LoginPhase[\"QR\"] = 2] = \"QR\";\n})(LoginPhase || (LoginPhase = {}));\n\nexport class Login extends React.Component {\n  constructor(props) {\n    super(props);\n    this.NDEF = new NDEFReader();\n    this.UTF8Decoder = new TextDecoder();\n    this.state = {\n      nfcCapable: true,\n      loginPhase: LoginPhase.menu,\n      controller: new AbortController()\n    };\n\n    this.NDEF.onreading = async e => {\n      var _e$message$records$0$;\n\n      // console.log(e.serialNumber);\n      // console.log(e.message.records);\n      const info = JSON.parse(this.UTF8Decoder.decode((_e$message$records$0$ = e.message.records[0].data) === null || _e$message$records$0$ === void 0 ? void 0 : _e$message$records$0$.buffer));\n      console.log(info);\n\n      if (isAccountInfo(info)) {\n        this.setState({\n          loginInfo: info,\n          loginPhase: LoginPhase.menu\n        });\n        await delay(1000);\n        this.endNFCScan();\n      }\n    };\n  }\n\n  componentWillUnmount() {\n    this.state.controller.abort();\n  } //#region NFC\n\n\n  startNFCScan() {\n    this.NDEF.scan(this.state.controller).then(() => this.setState({\n      loginPhase: LoginPhase.NFC\n    })).catch(error => {\n      console.log(error);\n      this.endNFCScan();\n      this.setState({\n        loginPhase: LoginPhase.menu,\n        nfcCapable: false\n      });\n    });\n  }\n\n  endNFCScan() {\n    this.state.controller.abort();\n    this.setState({\n      controller: new AbortController()\n    });\n  }\n\n  initNFC() {\n    this.NDEF.write(JSON.stringify({\n      name: \"Nako\"\n    })).then(() => console.log(\"Message written\")).catch(error => console.log(error));\n  } //#endregion\n  //#region QR\n\n\n  handleQRData(data) {\n    console.log(`${data}/${JSON.stringify(this.state.loginInfo)}`);\n    Axios.get(`${data.replace(\"192.168.0.105\", \"113.252.44.34\")}/${JSON.stringify(this.state.loginInfo)}`).catch(error => console.log(error));\n  } //#endregion\n\n\n  render() {\n    const {\n      serverURL,\n      ...rest\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(\"div\", { ...rest,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${styles[\"m-login-container\"]} fill-parent`,\n        children: this.state.loginInfo ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            children: [\"Welcome back, \", this.state.loginInfo.name, \"!\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => this.setState({\n              loginPhase: LoginPhase.QR\n            }),\n            children: \"Desktop login with QR code\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 15\n          }, this), this.state.loginPhase === LoginPhase.QR ? /*#__PURE__*/_jsxDEV(\"div\", {\n            id: styles.qr,\n            className: `${styles.overlay} fill-parent`,\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"close\",\n              onClick: () => this.setState({\n                loginPhase: LoginPhase.menu\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"Scan the QR code shown on the webpage.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 127,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(QRScanner, {\n                className: styles[\"qr-component\"],\n                onScannedData: data => this.handleQRData(data)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 128,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 17\n          }, this) : null]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(Logo, {\n            id: styles.logo,\n            role: \"student\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => this.startNFCScan(),\n            children: \"Login using NFC\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 15\n          }, this), this.state.loginPhase === LoginPhase.NFC ? /*#__PURE__*/_jsxDEV(\"div\", {\n            id: styles.nfc,\n            className: `${styles.overlay} fill-parent`,\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"close\",\n              onClick: () => {\n                this.endNFCScan();\n                this.setState({\n                  loginPhase: LoginPhase.menu\n                });\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 157,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"Place your Nako card on the back of your device.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 165,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 164,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 17\n          }, this) : null]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this);\n  }\n\n}\nLogin.defaultProps = {\n  serverURL: \"http://113.252.44.34:5000/\"\n};\nexport default Login;","map":{"version":3,"sources":["/Users/mac/Desktop/Nako/nako/src/mobile/login/login.tsx"],"names":["React","Axios","isAccountInfo","styles","QRScanner","Logo","delay","LoginPhase","Login","Component","constructor","props","NDEF","NDEFReader","UTF8Decoder","TextDecoder","state","nfcCapable","loginPhase","menu","controller","AbortController","onreading","e","info","JSON","parse","decode","message","records","data","buffer","console","log","setState","loginInfo","endNFCScan","componentWillUnmount","abort","startNFCScan","scan","then","NFC","catch","error","initNFC","write","stringify","name","handleQRData","get","replace","render","serverURL","rest","QR","qr","overlay","logo","nfc","defaultProps"],"mappings":"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","sourcesContent":["///<reference path=\"../../types/web-nfc.d.ts\">\n\nimport React from \"react\";\nimport Axios from \"axios\";\nimport { isAccountInfo, AccountInfo } from \"../../modules/account-info\";\nimport styles from \"./login.module.scss\";\nimport QRScanner from \"../../modules/qr-scanner/qr-scanner\";\nimport Logo from \"../../modules/logo/logo\";\nimport { delay } from \"../../utils\";\n\nenum LoginPhase {\n  menu,\n  NFC,\n  QR,\n}\n\ninterface LoginProps {\n  serverURL: string;\n}\n\ninterface LoginState {\n  nfcCapable: boolean;\n  loginPhase: LoginPhase;\n  controller: AbortController;\n  loginInfo?: AccountInfo;\n}\n\nexport class Login extends React.Component<\n  LoginProps & React.HTMLAttributes<HTMLDivElement>,\n  LoginState\n> {\n  static defaultProps = {\n    serverURL: \"http://113.252.44.34:5000/\",\n  };\n\n  private NDEF = new NDEFReader();\n  private UTF8Decoder = new TextDecoder();\n\n  constructor(props: LoginProps & React.HTMLAttributes<HTMLDivElement>) {\n    super(props);\n\n    this.state = {\n      nfcCapable: true,\n      loginPhase: LoginPhase.menu,\n      controller: new AbortController(),\n    };\n\n    this.NDEF.onreading = async (e) => {\n      // console.log(e.serialNumber);\n      // console.log(e.message.records);\n      const info = JSON.parse(\n        this.UTF8Decoder.decode(e.message.records[0].data?.buffer)\n      );\n      console.log(info);\n\n      if (isAccountInfo(info)) {\n        this.setState({ loginInfo: info, loginPhase: LoginPhase.menu });\n        await delay(1000);\n        this.endNFCScan();\n      }\n    };\n  }\n\n  componentWillUnmount() {\n    this.state.controller.abort();\n  }\n\n  //#region NFC\n  startNFCScan() {\n    this.NDEF.scan(this.state.controller)\n      .then(() => this.setState({ loginPhase: LoginPhase.NFC }))\n      .catch((error) => {\n        console.log(error);\n        this.endNFCScan();\n        this.setState({ loginPhase: LoginPhase.menu, nfcCapable: false });\n      });\n  }\n\n  endNFCScan() {\n    this.state.controller.abort();\n    this.setState({ controller: new AbortController() });\n  }\n\n  initNFC() {\n    this.NDEF.write(\n      JSON.stringify({\n        name: \"Nako\",\n      })\n    )\n      .then(() => console.log(\"Message written\"))\n      .catch((error) => console.log(error));\n  }\n  //#endregion\n\n  //#region QR\n  handleQRData(data: string) {\n    console.log(`${data}/${JSON.stringify(this.state.loginInfo!)}`);\n\n    Axios.get(\n      `${data.replace(\"192.168.0.105\", \"113.252.44.34\")}/${JSON.stringify(this.state.loginInfo!)}`\n    ).catch((error) => console.log(error));\n  }\n  //#endregion\n\n  render() {\n    const { serverURL, ...rest } = this.props;\n    return (\n      <div {...rest}>\n        <div className={`${styles[\"m-login-container\"]} fill-parent`}>\n          {this.state.loginInfo ? (\n            <>\n              <h1>Welcome back, {this.state.loginInfo.name}!</h1>\n              <button\n                onClick={() => this.setState({ loginPhase: LoginPhase.QR })}\n              >\n                Desktop login with QR code\n              </button>\n              {this.state.loginPhase === LoginPhase.QR ? (\n                <div id={styles.qr} className={`${styles.overlay} fill-parent`}>\n                  <span\n                    className=\"close\"\n                    onClick={() =>\n                      this.setState({ loginPhase: LoginPhase.menu })\n                    }\n                  />\n                  <div>\n                    <p>Scan the QR code shown on the webpage.</p>\n                    <QRScanner\n                      className={styles[\"qr-component\"]}\n                      onScannedData={(data) => this.handleQRData(data)}\n                    />\n                  </div>\n                </div>\n              ) : null}\n            </>\n          ) : (\n            <>\n              <Logo id={styles.logo} role=\"student\" />\n              <button onClick={() => this.startNFCScan()}>\n                Login using NFC\n              </button>\n              {/*<button onClick={() => this.initNFC()}>Init NFC card</button> \n              <button\n                onClick={() =>\n                  this.setState({\n                    loginInfo: { name: \"Nako\", role: \"student\" },\n                  })\n                }\n              >\n                Debug\n              </button>*/}\n              {this.state.loginPhase === LoginPhase.NFC ? (\n                <div\n                  id={styles.nfc}\n                  className={`${styles.overlay} fill-parent`}\n                >\n                  <span\n                    className=\"close\"\n                    onClick={() => {\n                      this.endNFCScan();\n                      this.setState({ loginPhase: LoginPhase.menu });\n                    }}\n                  />\n                  <div>\n                    <p>Place your Nako card on the back of your device.</p>\n                  </div>\n                </div>\n              ) : null}\n            </>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Login;\n"]},"metadata":{},"sourceType":"module"}