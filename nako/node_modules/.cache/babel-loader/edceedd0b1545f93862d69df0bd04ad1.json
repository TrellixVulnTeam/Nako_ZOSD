{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Desktop/Nako/nako/src/assets/monsters/monster.tsx\";\nimport React from \"react\";\nimport styles from \"./monster.module.scss\";\nimport { MONSTER_ANIM } from \"./index\";\nimport { clamp, delay } from \"../../utils/utils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Monster extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      anim: MONSTER_ANIM.stay,\n      health: 1\n    };\n  }\n  /**\n   * Positive number to increase health, negative number to decrease health.\n   */\n\n\n  async changeHealth(value) {\n    this.setState({\n      health: clamp(this.state.health + value)\n    });\n\n    if (value < 0) {\n      this.setState({\n        anim: MONSTER_ANIM.damaged\n      });\n      await delay(1000);\n      this.setState({\n        anim: MONSTER_ANIM.stay\n      });\n    }\n  }\n\n  render() {\n    console.log(this.props.className === undefined);\n    return /*#__PURE__*/_jsxDEV(\"div\", { ...this.props,\n      className: styles.monster + (this.props.className ? ` ${this.props.className}` : \"\"),\n      children: [/*#__PURE__*/_jsxDEV(\"meter\", {\n        low: 0.33,\n        high: 0.66,\n        optimum: 1,\n        value: this.state.health\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: this.state.anim,\n          alt: \"monster\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/mac/Desktop/Nako/nako/src/assets/monsters/monster.tsx"],"names":["React","styles","MONSTER_ANIM","clamp","delay","Monster","Component","constructor","props","state","anim","stay","health","changeHealth","value","setState","damaged","render","console","log","className","undefined","monster"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,uBAAnB;AACA,SAASC,YAAT,QAA6B,SAA7B;AACA,SAASC,KAAT,EAAgBC,KAAhB,QAA6B,mBAA7B;;AAOA,eAAe,MAAMC,OAAN,SAAsBL,KAAK,CAACM,SAA5B,CAA0F;AACvGC,EAAAA,WAAW,CAACC,KAAD,EAAY;AACrB,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAa;AACXC,MAAAA,IAAI,EAAER,YAAY,CAACS,IADR;AAEXC,MAAAA,MAAM,EAAE;AAFG,KAAb;AAID;AAED;AACF;AACA;;;AACoB,QAAZC,YAAY,CAACC,KAAD,EAAgB;AAChC,SAAKC,QAAL,CAAc;AAAEH,MAAAA,MAAM,EAAET,KAAK,CAAC,KAAKM,KAAL,CAAWG,MAAX,GAAoBE,KAArB;AAAf,KAAd;;AAEA,QAAIA,KAAK,GAAG,CAAZ,EAAe;AACb,WAAKC,QAAL,CAAc;AAAEL,QAAAA,IAAI,EAAER,YAAY,CAACc;AAArB,OAAd;AACA,YAAMZ,KAAK,CAAC,IAAD,CAAX;AACA,WAAKW,QAAL,CAAc;AAAEL,QAAAA,IAAI,EAAER,YAAY,CAACS;AAArB,OAAd;AACD;AACF;;AAEDM,EAAAA,MAAM,GAAG;AACPC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKX,KAAL,CAAWY,SAAX,KAAyBC,SAArC;AACA,wBACE,oBAAS,KAAKb,KAAd;AAAqB,MAAA,SAAS,EAAEP,MAAM,CAACqB,OAAP,IAAkB,KAAKd,KAAL,CAAWY,SAAX,GAAwB,IAAG,KAAKZ,KAAL,CAAWY,SAAU,EAAhD,GAAoD,EAAtE,CAAhC;AAAA,8BACE;AAAO,QAAA,GAAG,EAAE,IAAZ;AAAkB,QAAA,IAAI,EAAE,IAAxB;AAA8B,QAAA,OAAO,EAAE,CAAvC;AAA0C,QAAA,KAAK,EAAE,KAAKX,KAAL,CAAWG;AAA5D;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA,+BACE;AAAK,UAAA,GAAG,EAAE,KAAKH,KAAL,CAAWC,IAArB;AAA2B,UAAA,GAAG,EAAC;AAA/B;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAQD;;AAjCsG","sourcesContent":["import React from \"react\";\nimport styles from \"./monster.module.scss\";\nimport { MONSTER_ANIM } from \"./index\";\nimport { clamp, delay } from \"../../utils/utils\";\n\ninterface MonsterState {\n  anim: string;\n  health: number;\n}\n\nexport default class Monster extends React.Component<React.HTMLAttributes<HTMLDivElement>, MonsterState> {\n  constructor(props: {}) {\n    super(props);\n\n    this.state = {\n      anim: MONSTER_ANIM.stay,\n      health: 1\n    };\n  }\n\n  /**\n   * Positive number to increase health, negative number to decrease health.\n   */\n  async changeHealth(value: number) {\n    this.setState({ health: clamp(this.state.health + value) });\n    \n    if (value < 0) {\n      this.setState({ anim: MONSTER_ANIM.damaged });\n      await delay(1000);\n      this.setState({ anim: MONSTER_ANIM.stay });\n    }\n  }\n  \n  render() {\n    console.log(this.props.className === undefined);\n    return (\n      <div {...this.props} className={styles.monster + (this.props.className ? ` ${this.props.className}` : \"\")}>\n        <meter low={0.33} high={0.66} optimum={1} value={this.state.health}/>\n        <div>\n          <img src={this.state.anim} alt=\"monster\"/>\n        </div>\n      </div>\n    );\n  }\n}"]},"metadata":{},"sourceType":"module"}