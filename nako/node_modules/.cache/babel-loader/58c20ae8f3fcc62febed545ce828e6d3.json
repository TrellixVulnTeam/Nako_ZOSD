{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Desktop/Nako/nako/src/modules/qr-scanner/qr-scanner.tsx\";\nimport React from \"react\";\nimport jsQR from \"jsqr\";\nimport { delay, waitForVideoData } from \"../../utils/utils\";\nimport styles from \"./qr-scanner.module.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class QRScanner extends React.Component {\n  constructor(props) {\n    super(props);\n    this.videoRef = /*#__PURE__*/React.createRef();\n    this.stream = void 0;\n    this.state = {\n      canvas: document.createElement(\"canvas\")\n    };\n  }\n\n  componentDidMount() {\n    const supportedConstraints = navigator.mediaDevices.getSupportedConstraints();\n    const constraints = {};\n\n    if (supportedConstraints.facingMode) {\n      constraints.facingMode = {\n        ideal: \"environment\"\n      };\n    }\n\n    navigator.mediaDevices.getUserMedia({\n      video: constraints\n    }).then(stream => {\n      this.stream = stream;\n      this.videoRef.current.srcObject = stream;\n      waitForVideoData(this.videoRef.current).then(() => {\n        this.videoRef.current.play().then(() => {\n          this.beginUpdateCanvas(this.videoRef.current, this.state.canvas);\n        });\n      });\n    }).catch(error => console.log(error));\n  }\n\n  componentWillUnmount() {\n    var _this$stream;\n\n    (_this$stream = this.stream) === null || _this$stream === void 0 ? void 0 : _this$stream.getTracks().forEach(track => {\n      var _this$stream2;\n\n      (_this$stream2 = this.stream) === null || _this$stream2 === void 0 ? void 0 : _this$stream2.removeTrack(track); // Workaround for https://issuetracker.google.com/u/0/issues/173142922\n\n      track.stop(); // from https://github.com/twilio/twilio-video-app-react/issues/355#issuecomment-780368725\n    });\n  }\n\n  beginUpdateCanvas(video, canvas) {\n    const canvasContext = canvas.getContext(\"2d\");\n    canvas.height = this.props.resolution;\n    canvas.width = this.props.resolution;\n    const aspectRatio = video.videoWidth / video.videoHeight;\n    const srcResolution = Math.min(video.videoWidth, video.videoHeight);\n    const offsetX = aspectRatio > 1 ? (video.videoWidth - video.videoHeight) / 2 : 0;\n    const offsetY = aspectRatio < 1 ? (video.videoHeight - video.videoWidth) / 2 : 0;\n\n    const canvasUpdateLoop = async () => {\n      try {\n        canvasContext.drawImage(video, offsetX, offsetY, srcResolution, srcResolution, 0, 0, this.props.resolution, this.props.resolution);\n        const code = jsQR(canvasContext.getImageData(0, 0, canvas.width, canvas.height).data, canvas.width, canvas.height, {\n          inversionAttempts: \"dontInvert\"\n        });\n\n        if (code) {\n          this.props.onScannedData(code.data);\n        }\n      } catch (error) {\n        console.log(error);\n      }\n\n      await delay(this.props.interval);\n      requestAnimationFrame(canvasUpdateLoop);\n    };\n\n    canvasUpdateLoop();\n  }\n\n  render() {\n    const {\n      onScannedData,\n      interval,\n      ...rest\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(\"div\", { ...rest,\n      children: /*#__PURE__*/_jsxDEV(\"section\", {\n        id: styles.container,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n          ref: this.videoRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this);\n  }\n\n}\nQRScanner.defaultProps = {\n  interval: 500,\n  resolution: 600\n};\nexport default QRScanner;","map":{"version":3,"sources":["/Users/mac/Desktop/Nako/nako/src/modules/qr-scanner/qr-scanner.tsx"],"names":["React","jsQR","delay","waitForVideoData","styles","QRScanner","Component","constructor","props","videoRef","createRef","stream","state","canvas","document","createElement","componentDidMount","supportedConstraints","navigator","mediaDevices","getSupportedConstraints","constraints","facingMode","ideal","getUserMedia","video","then","current","srcObject","play","beginUpdateCanvas","catch","error","console","log","componentWillUnmount","getTracks","forEach","track","removeTrack","stop","canvasContext","getContext","height","resolution","width","aspectRatio","videoWidth","videoHeight","srcResolution","Math","min","offsetX","offsetY","canvasUpdateLoop","drawImage","code","getImageData","data","inversionAttempts","onScannedData","interval","requestAnimationFrame","render","rest","container","defaultProps"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport jsQR from \"jsqr\";\nimport { delay, waitForVideoData } from \"../../utils/utils\";\nimport styles from \"./qr-scanner.module.scss\";\n\ninterface QRScannerProps {\n  onScannedData: (data: string) => void;\n  interval: number;\n  resolution: number;\n}\n\ninterface QRScannerStates {\n  canvas: HTMLCanvasElement;\n}\n\nexport class QRScanner extends React.Component<QRScannerProps & React.HTMLAttributes<HTMLDivElement>, QRScannerStates> {\n  static defaultProps = {\n    interval: 500,\n    resolution: 600\n  };\n\n  private videoRef = React.createRef<HTMLVideoElement>();\n  private stream?: MediaStream;\n\n  constructor(props: QRScannerProps) {\n    super(props);\n\n    this.state = {\n      canvas: document.createElement(\"canvas\")\n    };\n  }\n\n  componentDidMount() {\n    const supportedConstraints = navigator.mediaDevices.getSupportedConstraints();\n    const constraints: MediaTrackConstraints = {};\n\n    if (supportedConstraints.facingMode) {\n      constraints.facingMode = { ideal: \"environment\" };\n    }\n\n    navigator.mediaDevices.getUserMedia({ video: constraints }).then(stream => {\n      this.stream = stream;\n      this.videoRef.current!.srcObject = stream;\n      waitForVideoData(this.videoRef.current!).then(() => {\n        this.videoRef.current!.play().then(() => {\n          this.beginUpdateCanvas(this.videoRef.current!, this.state.canvas);\n        });\n      });\n    }).catch(error =>\n      console.log(error)\n    );\n  }\n\n  componentWillUnmount() {\n    this.stream?.getTracks().forEach(track => {\n      this.stream?.removeTrack(track);    // Workaround for https://issuetracker.google.com/u/0/issues/173142922\n      track.stop();                       // from https://github.com/twilio/twilio-video-app-react/issues/355#issuecomment-780368725\n    });\n  }\n\n  beginUpdateCanvas(video: HTMLVideoElement, canvas: HTMLCanvasElement) {\n    const canvasContext = canvas.getContext(\"2d\")!;\n    canvas.height = this.props.resolution;\n    canvas.width = this.props.resolution;\n    const aspectRatio = video.videoWidth / video.videoHeight;\n    const srcResolution = Math.min(video.videoWidth, video.videoHeight);\n    const offsetX = aspectRatio > 1 ? (video.videoWidth - video.videoHeight) / 2 : 0;\n    const offsetY = aspectRatio < 1 ? (video.videoHeight - video.videoWidth) / 2 : 0;\n\n    const canvasUpdateLoop = async () => {\n      try {\n        canvasContext.drawImage(video, offsetX, offsetY, srcResolution, srcResolution, 0, 0, this.props.resolution, this.props.resolution);\n        const code = jsQR(canvasContext.getImageData(0, 0, canvas.width, canvas.height).data, canvas.width, canvas.height, {\n          inversionAttempts: \"dontInvert\"\n        });\n\n        if (code) {\n          this.props.onScannedData(code.data);\n        }\n      } catch (error) {\n        console.log(error);\n      }\n\n      await delay(this.props.interval);\n      requestAnimationFrame(canvasUpdateLoop);\n    };\n\n    canvasUpdateLoop();\n  }\n\n  render() {\n    const { onScannedData, interval, ...rest } = this.props;\n    return (\n      <div {...rest}>\n        <section id={styles.container}>\n          <div/>\n          <video ref={this.videoRef}/>\n        </section>\n      </div>\n    );\n  }\n}\n\nexport default QRScanner;"]},"metadata":{},"sourceType":"module"}