[{"/Users/mac/Desktop/Nako/nako/src/index.tsx":"1","/Users/mac/Desktop/Nako/nako/src/desktop/lobby/lobby.tsx":"2","/Users/mac/Desktop/Nako/nako/src/desktop/Options/options.tsx":"3","/Users/mac/Desktop/Nako/nako/src/desktop/login/login.tsx":"4","/Users/mac/Desktop/Nako/nako/src/desktop/profile/profile.tsx":"5","/Users/mac/Desktop/Nako/nako/src/desktop/register/register.tsx":"6","/Users/mac/Desktop/Nako/nako/src/mobile/login/login.tsx":"7","/Users/mac/Desktop/Nako/nako/src/assets/images/test/index.ts":"8","/Users/mac/Desktop/Nako/nako/src/modules/websocket-messages.ts":"9","/Users/mac/Desktop/Nako/nako/src/modules/account-info.ts":"10","/Users/mac/Desktop/Nako/nako/src/modules/logo/logo.tsx":"11","/Users/mac/Desktop/Nako/nako/src/modules/qr-scanner/qr-scanner.tsx":"12","/Users/mac/Desktop/Nako/nako/src/desktop/RoundTimer/RoundTimer.tsx":"13","/Users/mac/Desktop/Nako/nako/src/desktop/AnsweringTF/answering_TrueOrFalse.tsx":"14","/Users/mac/Desktop/Nako/nako/src/desktop/game/game.tsx":"15","/Users/mac/Desktop/Nako/nako/src/desktop/lobby/game-start-countdown.tsx":"16","/Users/mac/Desktop/Nako/nako/src/desktop/teacher/teacher.tsx":"17","/Users/mac/Desktop/Nako/nako/src/utils/utils.ts":"18","/Users/mac/Desktop/Nako/nako/src/assets/monsters/monster.tsx":"19","/Users/mac/Desktop/Nako/nako/src/assets/monsters/index.ts":"20","/Users/mac/Desktop/Nako/nako/src/desktop/game/result.tsx":"21","/Users/mac/Desktop/Nako/nako/src/desktop/teacher/blueweb.tsx":"22","/Users/mac/Desktop/Nako/nako/src/desktop/teacher/questmake.tsx":"23","/Users/mac/Desktop/Nako/nako/src/desktop/AnsweringMC/answeringModule.tsx":"24","/Users/mac/Desktop/Nako/nako/src/desktop/AnsweringMC/MultipleChoiceModule.tsx":"25","/Users/mac/Desktop/Nako/nako/src/desktop/teacher/questsetbar.tsx":"26","/Users/mac/Desktop/Nako/nako/src/desktop/teacher/selector/TimeSelector.tsx":"27","/Users/mac/Desktop/Nako/nako/src/desktop/teacher/selector/ScoreSelector.tsx":"28","/Users/mac/Desktop/Nako/nako/src/desktop/teacher/question-edit.tsx":"29"},{"size":8713,"mtime":1623759019057,"results":"30","hashOfConfig":"31"},{"size":14412,"mtime":1623759017789,"results":"32","hashOfConfig":"31"},{"size":1642,"mtime":1623759017778,"results":"33","hashOfConfig":"31"},{"size":8361,"mtime":1619762313934,"results":"34","hashOfConfig":"31"},{"size":3354,"mtime":1623759017794,"results":"35","hashOfConfig":"31"},{"size":1386,"mtime":1623759017803,"results":"36","hashOfConfig":"31"},{"size":4889,"mtime":1619762313941,"results":"37","hashOfConfig":"31"},{"size":324,"mtime":1616767204088,"results":"38","hashOfConfig":"31"},{"size":15368,"mtime":1623759019059,"results":"39","hashOfConfig":"31"},{"size":182,"mtime":1616767204107,"results":"40","hashOfConfig":"31"},{"size":1166,"mtime":1619544950984,"results":"41","hashOfConfig":"31"},{"size":3212,"mtime":1619762313949,"results":"42","hashOfConfig":"31"},{"size":1665,"mtime":1620578953446,"results":"43","hashOfConfig":"31"},{"size":5748,"mtime":1623759017771,"results":"44","hashOfConfig":"31"},{"size":7931,"mtime":1623759017786,"results":"45","hashOfConfig":"31"},{"size":1017,"mtime":1619520824835,"results":"46","hashOfConfig":"31"},{"size":32299,"mtime":1623759019032,"results":"47","hashOfConfig":"31"},{"size":687,"mtime":1620303248672,"results":"48","hashOfConfig":"31"},{"size":1192,"mtime":1620303247430,"results":"49","hashOfConfig":"31"},{"size":184,"mtime":1619762313875,"results":"50","hashOfConfig":"31"},{"size":2751,"mtime":1620155455093,"results":"51","hashOfConfig":"31"},{"size":3319,"mtime":1623759017809,"results":"52","hashOfConfig":"31"},{"size":9051,"mtime":1623759018626,"results":"53","hashOfConfig":"31"},{"size":6145,"mtime":1623759017769,"results":"54","hashOfConfig":"31"},{"size":5995,"mtime":1623759017766,"results":"55","hashOfConfig":"31"},{"size":3398,"mtime":1623759018628,"results":"56","hashOfConfig":"31"},{"size":3821,"mtime":1623759019012,"results":"57","hashOfConfig":"31"},{"size":2564,"mtime":1623759019006,"results":"58","hashOfConfig":"31"},{"size":7132,"mtime":1623759018624,"results":"59","hashOfConfig":"31"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62"},"onic66",{"filePath":"63","messages":"64","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"70"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":"80","usedDeprecatedRules":"70"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"70"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"98"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":2,"source":"103"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"110","usedDeprecatedRules":"70"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"120","usedDeprecatedRules":"70"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"123","usedDeprecatedRules":"70"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"70"},"/Users/mac/Desktop/Nako/nako/src/index.tsx",["133"],"import React from \"react\";\nimport * as Device from \"react-device-detect\";\nimport ReactDOM from \"react-dom\";\nimport {\n  BrowserRouter as Router,\n  Link,\n  Redirect,\n  Route,\n  Switch,\n} from \"react-router-dom\";\nimport { imagesWithAltText } from \"./assets/images/test\";\nimport Lobby from \"./desktop/lobby/lobby\";\nimport Login from \"./desktop/login/login\";\nimport Options from \"./desktop/Options/options\";\nimport Profile from \"./desktop/profile/profile\";\nimport Misstea from \"./desktop/teacher/teacher\";\nimport Register from \"./desktop/register/register\";\nimport \"./index.scss\";\nimport MLogin from \"./mobile/login/login\";\nimport { AccountInfo } from \"./modules/account-info\";\nimport AnsweringModule from \"./desktop/AnsweringMC/answeringModule\";\nimport AnsweringTF from \"../src/desktop/AnsweringTF/answering_TrueOrFalse\";\nimport NakoAPI, {\n  GameInfo,\n  QuestionEndRequest,\n  AccountRole,\n} from \"./modules/websocket-messages\";\nimport Game from \"./desktop/game/game\";\nimport Back from \"./desktop/AnsweringMC/BackgroundMusic.mp3\";\nimport Bluebr from \"./desktop/teacher/blueweb\";\nimport Questsetting from \"./desktop/teacher/questsetbar\";\n\nif (Device.isBrowser) {\n  import(\"./font-desktop.scss\");\n} else {\n  import(\"./font-mobile.scss\");\n}\n\ninterface AppState {\n  inGame: boolean;\n  accountInfo?: AccountInfo;\n  gameInfo?: GameInfo<AccountRole>;\n  questionEndRequest?: QuestionEndRequest | undefined;\n}\n\nclass App extends React.Component<{}, AppState> {\n  connection = new NakoAPI(\"ws://localhost:1880/ws\");\n\n  constructor(props: {}) {\n    super(props);\n\n    this.state = {\n      inGame: false,\n    };\n\n    this.connection.on(\"messageSent\", (data) => console.log(\"Sent: \", data));\n    this.connection.on(\"messageReceived\", (data) =>\n      console.log(\"Received: \", data)\n    );\n    this.connection.on(\"close\", (e) => console.log(e));\n    this.connection.on(\"error\", (e) => console.log(e));\n  }\n\n  componentWillUnmount() {\n    this.connection.close();\n  }\n\n  render() {\n    return (\n      <Router>\n        <Switch>\n          <Route exact path=\"/\">\n            {/* <Link to=\"/options\">\n              <p>Options</p>\n            </Link> */}\n            <Link to=\"/play\">\n              <p>Play</p>\n            </Link>\n            <Link to=\"/login\">\n              <p>Login</p>\n            </Link>\n            <Link to=\"/teacher\">\n              <p>Teacher</p>\n            </Link>\n            <Link to=\"/register\">\n              <p>Register</p>\n            </Link>\n            <Link to=\"/blueweb\">\n              <p>Blueweb</p>\n            </Link>\n            <Link to=\"/bosssetting\">\n              <p>questset</p>\n            </Link>\n            <Link\n              to={{\n                pathname: \"/answeringmc\",\n              }}\n            >\n              <Link to=\"/bar\">\n                <p>bar</p>\n              </Link>\n              <p>Mutiple Chioces</p>\n            </Link>\n            <Link\n              to={{\n                pathname: \"/answeringtf\",\n              }}\n            >\n              <p>Mutiple Chioces</p>\n            </Link>\n            <button\n              id={\n                this.state.accountInfo?.role === \"student\" ? \"SetStudent\" : \"\"\n              }\n              onClick={() =>\n                this.setState({\n                  accountInfo: { name: \"DebugStudent\", role: \"student\" },\n                })\n              }\n            >\n              Set student\n            </button>\n            <button\n              id={\n                this.state.accountInfo?.role === \"teacher\" ? \"SetTeacher\" : \"\"\n              }\n              onClick={() =>\n                this.setState({\n                  accountInfo: { name: \"DebugTeacher\", role: \"teacher\" },\n                })\n              }\n            >\n              Set teacher\n            </button>\n          </Route>\n          <Route path=\"/answeringmc\">\n            <AnsweringModule\n              timeLimit={120}\n              connection={this.connection}\n              currentQuestionProps={0}\n              questionInfo={{\n                question: \"2 x 2 = ?\",\n                //choices: [\"mmmmmmmmmmmm\", \"mmmmmmmmmmmm\"],\n                timeLimit: 120,\n                type: \"multiple_choice\",\n              }}\n            />\n          </Route>\n          <Route path=\"/answeringtf\">\n            <AnsweringTF\n              timeLimit={120}\n              connection={this.connection}\n              currentQuestionProps={0}\n              questionInfo={{\n                question: \"2 x 2 = ?\",\n                choices: [\"mmmmmmmmmmmm\", \"mmmmmmmmmmmm\"],\n                timeLimit: 120,\n                type: \"multiple_choice\",\n              }}\n            />\n          </Route>\n          <Route path=\"/options\">\n            <Options pictures={[imagesWithAltText, imagesWithAltText]} />\n          </Route>\n          <Route path=\"/play\">\n            {this.state.inGame ? (\n              <Game\n                className=\"fill-parent\"\n                connection={this.connection}\n                // accountInfo={\n                //   this.state.accountInfo ?? { name: \"Debug\", role: \"teacher\" }\n                // }\n                accountInfo={\n                  this.state.accountInfo ?? { name: \"Debug\", role: \"student\" }\n                }\n                gameInfo={this.state.gameInfo!}\n              />\n            ) : (\n              <Lobby\n                className=\"lobby-component fill-parent\"\n                onEnteredLobby={() => {\n                  const audio = new Audio(Back);\n                  audio.play();\n                  audio.volume = 0.5;\n                  audio.loop = true;\n                  console.log(\"standBy\");\n                }}\n                connection={this.connection}\n                // accountInfo={\n                //   this.state.accountInfo ?? { name: \"Debug\", role: \"teacher\" }\n                // }\n                accountInfo={\n                  this.state.accountInfo ?? { name: \"Student\", role: \"student\" }\n                }\n                onGameStart={(gameInfo) => {\n                  this.setState({ inGame: true, gameInfo: gameInfo });\n                }}\n              />\n            )}\n          </Route>\n          <Route path=\"/login\">\n            {this.state.accountInfo ? (\n              this.state.accountInfo.role === \"student\" ? (\n                <Redirect to=\"/profile\" />\n              ) : (\n                <Redirect to=\"/teacher\" />\n              )\n            ) : Device.isBrowser ? (\n              <Login\n                className=\"fill-parent\"\n                onLoggedIn={(accountInfo) =>\n                  this.setState({ accountInfo: accountInfo })\n                }\n              />\n            ) : (\n              <MLogin className=\"m-login-component fill-parent\" />\n            )}\n          </Route>\n          <Route path=\"/register\">\n            <Register className=\"fill-parent\"></Register>\n          </Route>\n          <Route path=\"/profile\">\n            {(i) =>\n              this.state.accountInfo ? (\n                <Profile\n                  className=\"fill-parent\"\n                  accountInfo={this.state.accountInfo}\n                  {...i}\n                />\n              ) : (\n                <Redirect to=\"/login\" />\n              )\n            }\n            {/* {i => <Profile className=\"fill-parent\" accountInfo={{ name: \"Test\", role: \"student\" }} {...i}/>} */}\n          </Route>\n          <Route path=\"/teacher\">\n            {(i) =>\n              this.state.accountInfo ? (\n                <Misstea\n                  className=\"fill-parent\"\n                  accountInfo={this.state.accountInfo}\n                  {...i}\n                />\n              ) : (\n                <Redirect to=\"/login\" />\n              )\n            }\n            {/* {i => <Profile className=\"fill-parent\" accountInfo={{ name: \"Test\", role: \"student\" }} {...i}/>} */}\n          </Route>\n          <Route path=\"/blueweb\">\n            {(i) =>\n              this.state.accountInfo ? (\n                <Bluebr\n                  className=\"fill-parent\"\n                  accountInfo={this.state.accountInfo}\n                  {...i}\n                />\n              ) : (\n                <Redirect to=\"/login\" />\n              )\n            }\n          </Route>\n          <Route path=\"/bosssetting\">\n            {(i) =>\n              this.state.accountInfo ? (\n                <Questsetting\n                  className=\"fill-parent\"\n                  accountInfo={this.state.accountInfo}\n                  {...i}\n                />\n              ) : (\n                <Redirect to=\"/login\" />\n              )\n            }\n          </Route>\n          <Redirect to=\"/login\" />\n        </Switch>\n      </Router>\n    );\n  }\n}\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n","/Users/mac/Desktop/Nako/nako/src/desktop/lobby/lobby.tsx",["134","135","136"],"import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { CSSTransition } from \"react-transition-group\";\nimport { animate, delay } from \"../../utils/utils\";\nimport styles from \"./lobby.module.scss\";\nimport NakoAPI, { AccountRole, GameInfo, LobbyInfo } from \"../../modules/websocket-messages\";\nimport Logo from \"../../modules/logo/logo\";\nimport GameStartCountdown from \"./game-start-countdown\";\nimport { AccountInfo } from \"../../modules/account-info\";\n\nenum ProgressPhase {\n  Name,\n  LobbyID,\n  Lobby,\n  Starting,\n  Ended\n}\n\nenum ErrorMessage {\n  Generic = \"An error occurred while your request was being processed.\",\n  TimedOut = \"Your request was timed out. Please try again.\",\n  MissingLobby = \"The provided lobby ID does not exist.\"\n}\n\ninterface LobbyProps {\n  connection: NakoAPI;\n  accountInfo: AccountInfo;\n  onGameStart: (gameInfo: GameInfo<AccountRole>) => void;\n  onEnteredLobby?: () => void;\n}\n\ninterface LobbyStates {\n  name: string;\n  lobbyIDInput: string;\n  currentProgress: ProgressPhase;\n  inputParams: React.InputHTMLAttributes<HTMLInputElement>[];\n  inputRef: React.RefObject<HTMLInputElement>;\n  inputTransitioning: boolean;\n  error: {\n    occurred: boolean;\n    message: ErrorMessage;\n  };\n  transitionedToLobby: boolean;\n  lobbyInfo?: LobbyInfo;\n  gameInfo?: GameInfo<AccountRole>;\n}\n\nclass Lobby extends React.Component<LobbyProps & React.HTMLAttributes<HTMLDivElement>, LobbyStates> {\n  constructor(props: LobbyProps & React.HTMLAttributes<HTMLDivElement>) {\n    super(props);\n\n    this.state = {\n      name: this.props.accountInfo.name,\n      lobbyIDInput: \"\",\n      currentProgress: this.props.accountInfo.role === \"student\" ? ProgressPhase.Name : ProgressPhase.LobbyID,\n      inputParams: [{\n        className: \"box-shadow\",\n        type: \"text\",\n        placeholder: \"Enter name...\",\n        defaultValue: this.props.accountInfo.name,\n        onChange: e => this.setState({ name: e.target.value })\n      }, {\n        className: \"box-shadow hide-number-buttons\",\n        type: \"number\",\n        placeholder: \"Enter game ID\",\n        onChange: e => this.setState({ lobbyIDInput: e.target.value })\n      }],\n      inputRef: React.createRef<HTMLInputElement>(),\n      inputTransitioning: false,\n      error: {\n        occurred: false,\n        message: ErrorMessage.Generic\n      },\n      transitionedToLobby: false\n    };\n\n    this.props.connection.subscribe(\"req\", \"keep_alive\", () => this.props.connection.send({\n      method: \"res\",\n      type: \"keep_alive\",\n      payload: {\n        name: this.state.name,\n        lobbyID: this.state.lobbyInfo!.id\n      }\n    }));\n\n    if (this.props.accountInfo.role === \"teacher\") {\n      this.props.connection.send({\n        method: \"req\",\n        type: \"lobby_create\",\n        payload: null\n      }).then(payload => {\n        this.props.connection.send({\n          method: \"req\",\n          type: \"lobby_join\",\n          payload: {\n            lobbyID: payload.lobbyID,\n            accountInfo: this.props.accountInfo\n          }\n        }).then(payload => {\n          if (payload.lobbyInfo) {\n            this.setState({ lobbyInfo: payload.lobbyInfo });\n          } else {\n            console.error(\"Could not join lobby after lobby creation.\");\n          }\n        });\n      });\n    }\n  }\n\n  lobbyNotFoundHandler(error: string) {\n    console.log(error);\n  }\n\n  // For student`\n  // eslint-disable-next-line camelcase\n  async s_formSubmitHandler(e: React.FormEvent<HTMLFormElement>, ms?: number) {\n    e.preventDefault();\n    this.setState({ error: { ...this.state.error, occurred: false } });\n\n    const triggerNextProgressPhase = () => {\n      if (this.state.currentProgress < ProgressPhase.Ended) {\n        this.setState({ currentProgress: this.state.currentProgress + 1 });\n      }\n    };\n\n    const invalidAnimation = () => {\n      animate(\"shake\", this.state.inputRef.current!, 500);\n    };\n\n    const triggerDelay = async () => {\n      if (ms) {\n        this.setState({\n          inputTransitioning: true\n        });\n\n        await delay(ms);\n\n        this.setState({\n          inputTransitioning: false\n        });\n      }\n    };\n\n    switch (this.state.currentProgress) {\n      case ProgressPhase.Name:\n        if (this.state.name !== \"\") {\n          await triggerDelay();\n          triggerNextProgressPhase();\n        } else {\n          invalidAnimation();\n        }\n\n        break;\n      \n      case ProgressPhase.LobbyID:\n        if (this.state.lobbyIDInput !== \"\") {\n          this.props.connection.send({\n            method: \"req\",\n            type: \"lobby_join\",\n            payload: {\n              lobbyID: Number(this.state.lobbyIDInput),\n              accountInfo: {\n                ...this.props.accountInfo,\n                name: this.state.name\n              }\n            }\n          }, 10000).then(async res => {\n            if (res) {\n              if (res.lobbyInfo) {\n                this.setState({ lobbyInfo: res.lobbyInfo });\n                this.props.onEnteredLobby?.();\n\n                this.props.connection.subscribe(\"res\", \"lobby_update\", msg => {\n                  this.setState({ lobbyInfo: msg.lobbyInfo });\n                });\n\n                this.props.connection.subscribe(\"req\", \"game_start\").then(msg => {\n                  this.setState({ gameInfo: msg.gameInfo });\n\n                  this.props.connection.send({\n                    method: \"res\",\n                    type: \"game_start\",\n                    payload: null\n                  });\n\n                  triggerNextProgressPhase();\n                });\n\n                await triggerDelay();\n                triggerNextProgressPhase();\n              } else {\n                this.setState({ error: { occurred: true, message: ErrorMessage.MissingLobby } });\n                console.log(res.error);\n              }\n            } else {\n              this.setState({ error: { occurred: true, message: ErrorMessage.TimedOut } });\n            }\n          }).catch(e => {\n            console.log(e);\n            this.setState({ error: { occurred: true, message: ErrorMessage.Generic } });\n          });\n        } else {\n          invalidAnimation();\n        }\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  // For teacher\n  // eslint-disable-next-line camelcase\n  t_onEnterButtonHandler() {\n    this.props.onEnteredLobby?.();\n\n    this.setState({ currentProgress: ProgressPhase.Lobby });\n\n    this.props.connection.subscribe(\"res\", \"lobby_update\", payload => {\n      this.setState({ lobbyInfo: payload.lobbyInfo });\n    });\n\n    this.props.connection.subscribe(\"req\", \"game_start\").then(payload => {\n      this.setState({ currentProgress: ProgressPhase.Starting, gameInfo: payload.gameInfo });\n\n      this.props.connection.send({\n        method: \"res\",\n        type: \"game_start\",\n        payload: null\n      });\n    });\n  }\n\n  // eslint-disable-next-line camelcase\n  t_startGameButtonHandler() {\n    this.props.connection.send({\n      method: \"req\",\n      type: \"game_start\",\n      payload: {\n        gameInfo: {\n          role: \"teacher\",\n          questions: [{\n            question: \"TypeScript is a(n) ________ of JavaScript.\",\n            choices: [\"subset\", \"superset\", \"upperset\", \"inclusion\"],\n            timeLimit: 10,\n            answer: 1,\n            type: \"multiple_choice\"\n          }, {\n            question: \"To get changes from a remote repository, the user needs to run:\",\n            choices: [\"npm i\", \"git merge\", \"git commit\", \"git fetch\"],\n            timeLimit: 10,\n            answer: 3,\n            type: \"multiple_choice\"\n          }]\n        }\n      }\n    });\n  }\n  \n  render() {\n    const { connection, accountInfo, onGameStart, onEnteredLobby, ...rest } = this.props;\n\n    return (\n      <div {...rest}>\n        <div className={styles[\"lobby-container\"]}>\n          <Link to=\"/profile\">\n            <button id={styles.back} className=\"box-shadow\" >\n              <span className={\"arrow-left\"}/>\n              <span>Back</span>\n            </button>\n          </Link>\n          {/* <button\n            style={{position: \"absolute\", zIndex: 1, bottom: 0, right: 0}}\n            onClick={() => this.setState({\n              lobbyInfo: this.state.lobbyInfo ? undefined : {\n                id: 0,\n                players: [this.state.name, \"Test1\", \"Test2\", \"Test3\", \"Test4\", \"Test5\", \"Test6\", \"Test7\", \"Test8\", \"Test9\", \"Test10\", \"Test11\", \"Test12\"]\n              },\n              currentProgress: this.state.currentProgress === ProgressPhase.Lobby ? ProgressPhase.Name : ProgressPhase.Lobby\n            })}\n          >\n            Test\n          </button> */}\n          <CSSTransition\n            in={this.state.lobbyInfo !== undefined && this.state.currentProgress >= ProgressPhase.Lobby}\n            timeout={500}\n            classNames={{\n              enter: styles[\"background-top-enter\"],\n              enterActive: styles[\"background-top-enter-active\"],\n              enterDone: styles[\"background-top-enter-done\"],\n              exit: styles[\"background-top-exit\"],\n              exitActive: styles[\"background-top-exit-active\"],\n              exitDone: styles[\"background-top-exit-done\"]\n            }}\n          >\n            <div id={this.state.transitionedToLobby ? styles.background : styles[\"background-top\"]} className={this.props.accountInfo.role === \"student\" ? styles.student : styles.teacher}>\n              <CSSTransition\n                in={this.state.lobbyInfo === undefined || !(this.state.currentProgress >= ProgressPhase.Lobby)} timeout={500}\n                classNames={{\n                  enter: styles[\"title-container-enter\"],\n                  enterActive: styles[\"title-container-enter-active\"],\n                  enterDone: styles[\"title-container-enter-done\"],\n                  exit: styles[\"title-container-exit\"],\n                  exitActive: styles[\"title-container-exit-active\"],\n                  exitDone: styles[\"title-container-exit-done\"]\n                }}\n                onExited={() => this.setState({ transitionedToLobby: true })}\n                mountOnEnter unmountOnExit\n              >\n                <Logo id={styles[\"title-container\"]} role={this.props.accountInfo.role}/>\n              </CSSTransition>\n              <CSSTransition\n                in={this.state.transitionedToLobby && this.state.lobbyInfo !== undefined}\n                timeout={500}\n                classNames={{\n                  enter: styles[\"lobby-info-container-enter\"],\n                  enterActive: styles[\"lobby-info-container-enter-active\"],\n                  enterDone: styles[\"lobby-info-container-enter-done\"],\n                  exit: styles[\"lobby-info-container-exit\"],\n                  exitActive: styles[\"lobby-info-container-exit-active\"],\n                  exitDone: styles[\"lobby-info-container-exit-done\"]\n                }}\n                onExit={() => this.setState({ transitionedToLobby: false })}\n                mountOnEnter unmountOnExit\n              >\n                <div id={styles[\"lobby-info-container\"]}>\n                  {this.state.currentProgress !== ProgressPhase.Starting ?\n                    <>\n                      <h3>{this.props.accountInfo.role === \"teacher\" ? \"Students in lobby\" : \"You are playing with\"}:</h3>\n                      <div id={styles[\"player-list\"]}>\n                        {this.state.lobbyInfo !== undefined ? this.state.lobbyInfo!.players.map((player, i) => <p key={i}>{player}</p>) : null}\n                      </div>\n                      {this.props.accountInfo.role === \"teacher\" ? <button onClick={() => this.t_startGameButtonHandler()}>Let's begin!</button> : null}\n                    </> :\n                    <GameStartCountdown\n                      onCountdownEnd={() => {\n                        if (this.state.gameInfo) {\n                          console.log(\"Game starting\");\n                          this.props.onGameStart(this.state.gameInfo);\n                        } else {\n                          throw new Error(\"Game start was triggered but game info was missing.\");\n                        }\n                      }}\n                    />\n                  }\n                </div>\n              </CSSTransition>\n            </div>\n          </CSSTransition>\n          <CSSTransition\n            in={this.state.lobbyInfo === undefined || !(this.state.currentProgress >= ProgressPhase.Lobby)}\n            timeout={500}\n            classNames={{\n              enter: styles[\"background-bottom-enter\"],\n              enterActive: styles[\"background-bottom-enter-active\"],\n              enterDone: styles[\"background-bottom-enter-done\"],\n              exit: styles[\"background-bottom-exit\"],\n              exitActive: styles[\"background-bottom-exit-active\"],\n              exitDone: styles[\"background-bottom-exit-done\"]\n            }}\n            unmountOnExit\n          >\n           <div id={styles[\"background-bottom\"]} className={`box-shadow-inner ${this.props.accountInfo.role === \"student\" ? styles.student : styles.teacher}`}>\n              {this.props.accountInfo.role === \"teacher\" ?\n                <div id={styles[\"input-container\"]}>\n                  {this.state.lobbyInfo ?\n                    <>\n                      <span>Your lobby is ready! ID: {this.state.lobbyInfo.id}</span>\n                      <button id={styles.submit} className={`box-shadow ${styles.teacher}`} onClick={() => this.t_onEnterButtonHandler()}>Start</button>\n                    </> :\n                    <span>Creating your lobby...</span>\n                  }\n                </div> :\n                <form id={styles[\"input-container\"]} onSubmit={e => this.s_formSubmitHandler(e, this.state.currentProgress === ProgressPhase.Name ? 600 : 0)}>\n                  <CSSTransition in={!this.state.inputTransitioning} timeout={500} classNames=\"fade-rtl\">\n                    <input\n                      ref={this.state.inputRef}\n                      id={styles.input}\n                      {...this.state.inputParams[this.state.currentProgress]}\n                    />\n                  </CSSTransition>\n                  {this.state.error.occurred ? <p className=\"error\">{this.state.error.message}</p> : null}\n                  <button id={styles.submit} className={`box-shadow ${styles.student}`} type=\"submit\">Enter</button>\n                </form>\n              }\n            </div>\n          </CSSTransition>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Lobby;","/Users/mac/Desktop/Nako/nako/src/desktop/Options/options.tsx",[],"/Users/mac/Desktop/Nako/nako/src/desktop/login/login.tsx",[],["137","138"],"/Users/mac/Desktop/Nako/nako/src/desktop/profile/profile.tsx",[],"/Users/mac/Desktop/Nako/nako/src/desktop/register/register.tsx",[],"/Users/mac/Desktop/Nako/nako/src/mobile/login/login.tsx",["139","140"],"import React from \"react\";\nimport Axios from \"axios\";\nimport { isAccountInfo, AccountInfo } from \"../../modules/account-info\";\nimport styles from \"./login.module.scss\";\nimport QRScanner from \"../../modules/qr-scanner/qr-scanner\";\nimport Logo from \"../../modules/logo/logo\";\nimport { delay } from \"../../utils/utils\";\n\nenum LoginPhase {\n  menu,\n  NFC,\n  QR,\n}\n\ninterface LoginProps {\n  serverURL: string;\n}\n\ninterface LoginState {\n  nfcCapable: boolean;\n  loginPhase: LoginPhase;\n  controller: AbortController;\n  loginInfo?: AccountInfo;\n}\n\nexport class Login extends React.Component<\n  LoginProps & React.HTMLAttributes<HTMLDivElement>,\n  LoginState\n> {\n  static defaultProps = {\n    serverURL: \"http://113.252.44.34:5000/\",\n  };\n\n  private NDEF = new NDEFReader();\n  private UTF8Decoder = new TextDecoder();\n\n  constructor(props: LoginProps & React.HTMLAttributes<HTMLDivElement>) {\n    super(props);\n\n    this.state = {\n      nfcCapable: true,\n      loginPhase: LoginPhase.menu,\n      controller: new AbortController(),\n    };\n\n    this.NDEF.onreading = async (e) => {\n      // console.log(e.serialNumber);\n      // console.log(e.message.records);\n      const info = JSON.parse(\n        this.UTF8Decoder.decode(e.message.records[0].data?.buffer)\n      );\n      console.log(info);\n\n      if (isAccountInfo(info)) {\n        this.setState({ loginInfo: info, loginPhase: LoginPhase.menu });\n        await delay(1000);\n        this.endNFCScan();\n      }\n    };\n  }\n\n  componentWillUnmount() {\n    this.state.controller.abort();\n  }\n\n  //#region NFC\n  startNFCScan() {\n    this.NDEF.scan(this.state.controller)\n      .then(() => this.setState({ loginPhase: LoginPhase.NFC }))\n      .catch((error) => {\n        console.log(error);\n        this.endNFCScan();\n        this.setState({ loginPhase: LoginPhase.menu, nfcCapable: false });\n      });\n  }\n\n  endNFCScan() {\n    this.state.controller.abort();\n    this.setState({ controller: new AbortController() });\n  }\n\n  initNFC() {\n    this.NDEF.write(\n      JSON.stringify({\n        name: \"Nako\",\n      })\n    )\n      .then(() => console.log(\"Message written\"))\n      .catch((error) => console.log(error));\n  }\n  //#endregion\n\n  //#region QR\n  handleQRData(data: string) {\n    console.log(`${data}/${JSON.stringify(this.state.loginInfo!)}`);\n\n    Axios.get(\n      `${data.replace(\"192.168.0.105\", \"113.252.44.34\")}/${JSON.stringify(this.state.loginInfo!)}`\n    ).catch((error) => console.log(error));\n  }\n  //#endregion\n\n  render() {\n    const { serverURL, ...rest } = this.props;\n    return (\n      <div {...rest}>\n        <div className={`${styles[\"m-login-container\"]} fill-parent`}>\n          {this.state.loginInfo ? (\n            <>\n              <h1>Welcome back, {this.state.loginInfo.name}!</h1>\n              <button\n                onClick={() => this.setState({ loginPhase: LoginPhase.QR })}\n              >\n                Desktop login with QR code\n              </button>\n              {this.state.loginPhase === LoginPhase.QR ? (\n                <div id={styles.qr} className={`${styles.overlay} fill-parent`}>\n                  <span\n                    className=\"close\"\n                    onClick={() =>\n                      this.setState({ loginPhase: LoginPhase.menu })\n                    }\n                  />\n                  <div>\n                    <p>Scan the QR code shown on the webpage.</p>\n                    <QRScanner\n                      className={styles[\"qr-component\"]}\n                      onScannedData={(data) => this.handleQRData(data)}\n                    />\n                  </div>\n                </div>\n              ) : null}\n            </>\n          ) : (\n            <>\n              <Logo id={styles.logo} role=\"student\" />\n              <button onClick={() => this.startNFCScan()}>\n                Login using NFC\n              </button>\n              {/*<button onClick={() => this.initNFC()}>Init NFC card</button> \n              <button\n                onClick={() =>\n                  this.setState({\n                    loginInfo: { name: \"Nako\", role: \"student\" },\n                  })\n                }\n              >\n                Debug\n              </button>*/}\n              {this.state.loginPhase === LoginPhase.NFC ? (\n                <div\n                  id={styles.nfc}\n                  className={`${styles.overlay} fill-parent`}\n                >\n                  <span\n                    className=\"close\"\n                    onClick={() => {\n                      this.endNFCScan();\n                      this.setState({ loginPhase: LoginPhase.menu });\n                    }}\n                  />\n                  <div>\n                    <p>Place your Nako card on the back of your device.</p>\n                  </div>\n                </div>\n              ) : null}\n            </>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Login;\n","/Users/mac/Desktop/Nako/nako/src/assets/images/test/index.ts",["141","142"],"import zero from \"./0.png\";\nimport one from \"./1.png\";\nimport two from \"./2.png\";\n\nexport const images = {\n    zero,\n    one,\n    two\n}\n\nexport const imagesWithAltText = [\n    {\n        img: zero,\n        alt: \"zero\"\n    },\n    {\n        img: one,\n        alt: \"one\"\n    },\n    {\n        img: two,\n        alt: \"two\"\n    }\n]","/Users/mac/Desktop/Nako/nako/src/modules/websocket-messages.ts",["143"],"import EventEmitter from \"events\";\nimport TypedEmitter from \"typed-emitter\";\nimport { delay } from \"../utils/utils\";\nimport { AccountInfo } from \"./account-info\";\n\n// eslint-disable-next-line @typescript-eslint/ban-types\ntype Narrowable = string | number | boolean | symbol | object | {} | void | null | undefined;\nconst tuple = <T extends Narrowable[]>(...args: T) => args;\ntype UnionToIntersection<U> = (U extends any ? (k: U)=>void : never) extends ((k: infer I)=>void) ? I : never;\n\ninterface WebSocketSubscription<M extends WebSocketMessageMethod, T extends WebSocketMessageType> extends WebSocketMessageMetadata<M, T> {\n  fn: (res: WebSocketMessagePayload<M, T>, id: number) => void;\n  res: (value: WebSocketMessagePayload<M, T> | PromiseLike<WebSocketMessagePayload<M, T>>) => void;\n  id: number;\n}\n\ntype NakoAPIEvent = {\n  messageSent: (data: WebSocketMessage<WebSocketMessageMethod, WebSocketMessageType>) => void,\n  messageReceived: (data: WebSocketMessage<WebSocketMessageMethod, WebSocketMessageType>) => void,\n  close: (e: CloseEvent) => void,\n  error: (e: Event) => void;\n};\n\n/**`\n * @class A class to send and receive Nako WebSocket messages.\n */\nclass NakoAPI {\n  private connection: WebSocket;\n\n  private subscriptions = new Array<WebSocketSubscription<WebSocketMessageMethod, WebSocketMessageType>>();\n\n  private lifetimeSubscriptionCount = 0;\n\n  /**\n   * Returns a Promise that resolves to the first matching message. The subscription is cancelled after the promise is returned.\n   * @param method The method of the message.\n   * @param type   The type of the message.\n   * @returns      A Promise that resolves to the first matching message.\n   */\n  public subscribe<M extends WebSocketMessageMethod, T extends WebSocketMessageType>(method: M, type: T): Promise<WebSocketMessagePayload<M, T>>;\n\n  /**\n   * Triggers the callback function when a message of matching method and type is received.\n   * @param method     The method of the message.\n   * @param type       The type of the message.\n   * @param callbackFn The callback function that will be called when a matching message is received.\n   * @returns          The ID of the subscription.\n   */\n  public subscribe<M extends WebSocketMessageMethod, T extends WebSocketMessageType>(\n    method: M, type: T, callbackFn: (message: WebSocketMessagePayload<M, T>, id: number) => void\n  ): number;\n\n  // I hope I find a way such that it is possible to do .subscribe<M, T>(...).reply(msg) like a Promise.\n\n  public subscribe<M extends WebSocketMessageMethod, T extends WebSocketMessageType>(\n    method: M, type: T, callbackFn?: (payload: WebSocketMessagePayload<M, T>, id: number) => void\n  ): number | Promise<WebSocketMessagePayload<M, T>> {\n    this.lifetimeSubscriptionCount++;\n    let resolve: (value: WebSocketMessagePayload<M, T> | PromiseLike<WebSocketMessagePayload<M, T>>) => void;\n    const promise = new Promise<WebSocketMessagePayload<M, T>>(res => resolve = res);\n    const id = this.lifetimeSubscriptionCount;\n\n    const sub: WebSocketSubscription<M, T> = {\n      method: method,\n      type: type,\n      fn: callbackFn ?? (() => {this.unsubscribe(id);}),\n      res: resolve!,\n      id: id\n    };\n    \n    this.subscriptions.push(sub);\n\n    return callbackFn ? id : promise;\n  }\n\n  /**\n   * Unsubscribes a subscription by ID.\n   * @param id The ID of the subscription.\n   */\n  public unsubscribe(id: number) {\n    const idx = this.subscriptions.findIndex(i => i.id === id);\n\n    if (idx !== -1) {\n      this.subscriptions.splice(idx, 1);\n    } else {\n      throw new Error(`Subscription with ID ${id} not found.`);\n    }\n  }\n\n  /**\n   * Unsubscribes all active subscriptions.\n   */\n  public unsubscribeAll() {\n    this.subscriptions = [];\n  }\n\n  private emitter = new EventEmitter() as TypedEmitter<NakoAPIEvent>;\n\n  // You can't do public on = this.emitter.on; :[\n  public on = <E extends keyof NakoAPIEvent>(event: E, listener: NakoAPIEvent[E]) => this.emitter.on(event, listener);\n\n  public off = <E extends keyof NakoAPIEvent>(event: E, listener: NakoAPIEvent[E]) => this.emitter.off(event, listener);\n\n  public close(removeAllListeners = true, code?: number, reason?: string) {\n    this.connection.close(code, reason);\n\n    if (removeAllListeners) {\n      this.emitter.removeAllListeners();\n    }\n  }\n\n  /**\n   * Sends a message through the WebSocket connection.\n   * @param  msg The message to send.\n   */\n  public async send<M extends Exclude<WebSocketMessageMethod, \"req\">, T extends WebSocketMessageType>(msg: WebSocketMessage<M, T>): Promise<void>;\n  \n\n  /**\n   * Sends a message through the WebSocket connection.\n   * @param  msg     The message to send.\n   * @returns        A promise that is resolved toa WebSocketMessagePayload when a response is received.\n   */\n  public async send<M extends \"req\", T extends WebSocketMessageType>(msg: WebSocketMessage<M, T>): Promise<WebSocketMessagePayload<\"res\", T>>;\n\n    /**\n   * Sends a message through the WebSocket connection.\n   * @param  msg     The message to send.\n   * @param  timeout This is the duration in ms that this function will wait for a response. Default is -1.\n   *                 Any value below 0 represents no timeout limit. No effects on response messages.\n   * @returns        A promise that is resolved to either a WebSocketMessagePayload when a response is received, or undefined if no response is received before timeout.\n   */\n     public async send<M extends \"req\", T extends WebSocketMessageType>(msg: WebSocketMessage<M, T>, timeout?: number): Promise<undefined | WebSocketMessagePayload<\"res\", T>>;\n\n  public async send<M extends WebSocketMessageMethod, T extends WebSocketMessageType>(msg: WebSocketMessage<M, T>, timeout = -1): Promise<void | undefined | WebSocketMessagePayload<\"res\", T>> {\n    while (this.connection.readyState !== this.connection.OPEN) {\n      await delay(500);\n    }\n\n    this.connection.send(JSON.stringify(msg));\n    this.emitter.emit(\"messageSent\", msg);\n\n    if (msg.method === \"req\") {\n      let res: undefined | WebSocketMessagePayload<\"res\", T>;\n      if (timeout >= 0) {\n        res = await Promise.race([this.subscribe(\"res\", msg.type), delay(timeout).then(() => undefined)]);\n      } else {\n        res = (await this.subscribe(\"res\", msg.type)) as WebSocketMessagePayload<\"res\", T>;\n      }\n\n      return res;\n    }\n  }\n\n  constructor(socketURL: string) {\n    (window as any).Nako = this;\n    this.connection = new WebSocket(socketURL);\n\n    this.connection.onmessage = e => {\n      try {\n        const msg = JSON.parse(e.data);\n\n        if (WebSocketMessageMethodArray.includes(msg.method) && WebSocketMessageTypeArray.includes(msg.type)) {\n          const parsedMsg = msg as WebSocketMessage<WebSocketMessageMethod, WebSocketMessageType>;\n          this.emitter.emit(\"messageReceived\", parsedMsg);\n          \n          // Resolve subscriptions\n          for (const i of this.subscriptions.filter(j => j.method === parsedMsg.method && j.type === parsedMsg.type)) {\n            i.res(parsedMsg.payload);\n            i.fn(parsedMsg.payload, i.id);\n          }\n        } else {\n          console.warn(\"Invalid message:\");\n          console.warn(msg);\n        }\n      } catch (error) {\n        console.log(\"An error occurred while processing the message:\");\n        console.error(error);\n        console.error(e.data);\n      }\n    };\n\n    this.connection.onclose = e => this.emitter.emit(\"close\", e);\n    this.connection.onerror = e => this.emitter.emit(\"error\", e);\n  }\n}\n\nexport type AccountRole = \"student\" | \"teacher\";\n\nexport type LobbyInfo = {\n  id: number;\n  players: string[];    // Should include self\n}\n\ntype BaseQuestionInfo<A, T extends QuestionType> = {\n  question: string;\n  timeLimit: number;\n  answer: A;\n  type: T;\n}\n\ntype SelectableChoices = {\n  choices: string[];\n  maxSelection: number;\n}\n\nexport type MultipleChoiceAnswer = number | number[];\n\n// T is the type of answer\nexport type MultipleChoiceQuestion<T extends MultipleChoiceAnswer = MultipleChoiceAnswer> = BaseQuestionInfo<T, \"multiple_choice\"> &\n  (T extends number ? Omit<SelectableChoices, \"maxSelection\"> : SelectableChoices);    // Imply 1 when omitted\n\nexport type FillBlankAnswer = string | string[] | number | number[];\n\ntype BaseFillBlankQuestion<T extends [string, string] | string[]> = {\n  context: T;\n}\n\n/**\n * T is the type of the answer.\n * \n * Assignable objects, when T is:\n * @example\n * string   => { question: string, answer: string, context: [string, string], timeLimit: number }\n * string[] => { question: string, answer: string[], context: string[], timeLimit: number }\n * number   => { question: string, answer: number, context: [string, string], timeLimit: number, choices: string[] }\n * number[] => { question: string, answer: number[], context: string[], timeLimit: number, choices: string[] }\n */\nexport type FillBlankQuestion<T extends FillBlankAnswer = FillBlankAnswer> = BaseQuestionInfo<T, \"fill_blank\"> & (\n  UnionToIntersection<T> extends UnionToIntersection<FillBlankAnswer> ?\n    (BaseFillBlankQuestion<[string, string] | string[]> & Partial<Omit<SelectableChoices, \"maxSelection\">>) :\n    ((T extends string | number ? BaseFillBlankQuestion<[string, string]> : BaseFillBlankQuestion<string[]>) &\n      (T extends number | number[] ? Omit<SelectableChoices, \"maxSelection\"> : {}))\n    // Equivalent to this:\n    // T extends string ? BaseFillBlankQuestion<[string, string]> :\n    // T extends string[] ? BaseFillBlankQuestion<string[]> :\n    // T extends number ? BaseFillBlankQuestion<[string, string]> & Omit<SelectableChoices, \"maxSelection\"> :\n    // T extends number[] ? BaseFillBlankQuestion<string[]> & Omit<SelectableChoices, \"maxSelection\"> :\n    // never\n);\n\nexport type QuestionType = \"multiple_choice\" | \"fill_blank\";\n\nexport type Question<QuestionType> = \n  QuestionType extends \"multiple_choice\" ? MultipleChoiceQuestion<MultipleChoiceAnswer> : \n  QuestionType extends \"fill_blank\" ? FillBlankQuestion<FillBlankAnswer> :\n  never;\n\nexport type QuestionInfo<R extends AccountRole, T extends Question<QuestionType>> = R extends \"teacher\" ? T : Omit<T, \"answer\">;\n\nexport function isQuestion(obj: unknown): obj is Question<QuestionType> {\n  return typeof obj === \"object\" && obj !== null && \"question\" in obj && \"timeLimit\" in obj && \"answer\" in obj && \"type\" in obj;\n}\n\nexport type GameInfo<R extends AccountRole> = {\n  role: R;\n  questions: QuestionInfo<R, Question<QuestionType>>[];\n}\n\nconst WebSocketMessageMethodArray = tuple(\"req\", \"res\", \"post\");\n\nexport type WebSocketMessageMethod = (typeof WebSocketMessageMethodArray)[number];\n\nconst WebSocketMessageTypeArray = tuple(\"lobby_create\", \"lobby_join\", \"lobby_leave\", \"lobby_update\", \"keep_alive\", \"game_start\", \"game_update\", \"game_end\",\n                                        \"question_start\", \"question_end\", \"answer_question\", \"lobby_close\");\n\nexport type WebSocketMessageType = (typeof WebSocketMessageTypeArray)[number];\n\nexport type WebSocketMessagePayload<M extends WebSocketMessageMethod, T extends WebSocketMessageType> =\n  M extends \"req\" ?\n    T extends \"lobby_create\" ? LobbyCreateRequest :\n    T extends \"lobby_join\" ? LobbyJoinRequest :\n    T extends \"lobby_leave\" ? LobbyLeaveRequest :\n    T extends \"lobby_update\" ? LobbyUpdateRequest :\n    T extends \"keep_alive\" ? KeepAliveRequest :\n    T extends \"game_start\" ? GameStartRequest :\n    T extends \"game_update\" ? GameUpdateRequest :\n    T extends \"game_end\" ? GameEndRequest :\n    T extends \"question_start\" ? QuestionStartRequest :\n    T extends \"question_end\" ? QuestionEndRequest :\n    T extends \"answer_question\" ? AnswerQuestionRequest :\n    T extends \"lobby_close\" ? never :\n    WebSocketRequest :\n  M extends \"res\" ?\n    T extends \"lobby_create\" ? LobbyCreateResponse :\n    T extends \"lobby_join\" ? LobbyJoinResponse :\n    T extends \"lobby_leave\" ? LobbyLeaveResponse :\n    T extends \"lobby_update\" ? LobbyUpdateResponse :\n    T extends \"keep_alive\" ? KeepAliveResponse :\n    T extends \"game_start\" ? GameStartResponse :\n    T extends \"game_update\" ? GameUpdateResponse :\n    T extends \"game_end\" ? GameEndResponse :\n    T extends \"question_start\" ? QuestionStartResponse :\n    T extends \"question_end\" ? QuestionEndResponse :\n    T extends \"answer_question\" ? AnswerQuestionResponse :\n    T extends \"lobby_close\" ? never :\n    WebSocketResponse :\n  M extends \"post\" ?\n    T extends \"lobby_close\" ? LobbyCloseEvent :\n    T extends Omit<WebSocketMessageType, \"lobby_close\"> ? never :\n    // T extends \"lobby_join\" ? never :\n    // T extends \"lobby_leave\" ? never :\n    // T extends \"lobby_update\" ? never :\n    // T extends \"keep_alive\" ? never :\n    // T extends \"game_start\" ? never :\n    // T extends \"game_update\" ? never :\n    // T extends \"game_end\" ? never :\n    // T extends \"question_start\" ? never :\n    // T extends \"question_end\" ? never :\n    // T extends \"answer_question\" ? never :\n    WebSocketPost :\n  WebSocketRequest | WebSocketResponse\n\nexport type WebSocketMessageMetadata<M extends WebSocketMessageMethod, T extends WebSocketMessageType> = {\n  method: M;\n  type: T;\n}\n\nexport type WebSocketMessage<M extends WebSocketMessageMethod, T extends WebSocketMessageType> = WebSocketMessageMetadata<M, T> & {\n  payload: WebSocketMessagePayload<M, T>;\n}\n\nexport type WebSocketRequest = LobbyCreateRequest | LobbyJoinRequest | LobbyLeaveRequest | LobbyUpdateRequest | GameStartRequest | GameUpdateRequest |\n                               GameEndRequest | QuestionStartRequest | QuestionEndRequest | AnswerQuestionRequest | KeepAliveRequest;\n\nexport type WebSocketResponse = LobbyCreateResponse | LobbyJoinResponse | LobbyLeaveResponse | LobbyUpdateResponse | GameStartResponse | GameUpdateResponse |\n                                GameEndResponse | QuestionStartResponse | QuestionEndResponse | AnswerQuestionResponse | KeepAliveResponse;\n\nexport type WebSocketPost = LobbyCloseEvent;\n\nexport type LobbyCreateRequest = null;\n\nexport type LobbyCreateResponse = {\n  lobbyID: number;\n}\n\nexport type LobbyUpdateRequest = {    // Used only to check if the lobby exists\n  lobbyID: number;\n};\n\nexport type LobbyUpdateResponse = {\n  lobbyInfo: LobbyInfo;\n};\n\nexport type LobbyJoinRequest = {\n  lobbyID: number;\n  accountInfo: AccountInfo;\n};\n\nexport type LobbyJoinResponse = {\n  lobbyInfo: LobbyInfo | null;\n  error?: string;\n};\n\nexport type LobbyLeaveRequest = {\n  lobbyID: number;\n  name: string;\n};\n\nexport type LobbyLeaveResponse = {\n  lobbyInfo: LobbyInfo | null;\n  error?: string;\n};\n\nexport type KeepAliveRequest = null;\n\nexport type KeepAliveResponse = {\n  name: string;\n  lobbyID: number;\n};\n\nexport type GameStartRequest = {\n  gameInfo: GameInfo<AccountRole>;\n};\n\nexport type GameStartResponse = null;\n\nexport type GameUpdateRequest = {\n  currentQuestion: number;\n};\n\nexport type GameUpdateResponse = null;\n\nexport type GameEndRequest = {\n  name: string;\n  score: number;\n}[]\n\nexport type GameEndResponse = null;\n\nexport type QuestionStartRequest = null;\n\nexport type QuestionStartResponse = null;\n\nexport type QuestionEndRequest = {\n  correctAnswer: number[];\n  stats: {\n    correct: number;\n    incorrect: number;\n    noAnswer: number;\n  }\n};\n\nexport type QuestionEndResponse = null;\n\nexport type AnswerQuestionRequest = {\n  choice: number;\n  currentQuestionCheck: number;\n};\n\nexport type AnswerQuestionResponse = null;\n\nexport type LobbyCloseEvent = {\n  reason?: string;\n};\n\nexport default NakoAPI;","/Users/mac/Desktop/Nako/nako/src/modules/account-info.ts",[],"/Users/mac/Desktop/Nako/nako/src/modules/logo/logo.tsx",[],"/Users/mac/Desktop/Nako/nako/src/modules/qr-scanner/qr-scanner.tsx",["144","145","146","147","148"],"import React from \"react\";\nimport jsQR from \"jsqr\";\nimport { delay, waitForVideoData } from \"../../utils/utils\";\nimport styles from \"./qr-scanner.module.scss\";\n\ninterface QRScannerProps {\n  onScannedData: (data: string) => void;\n  interval: number;\n  resolution: number;\n}\n\ninterface QRScannerStates {\n  canvas: HTMLCanvasElement;\n}\n\nexport class QRScanner extends React.Component<QRScannerProps & React.HTMLAttributes<HTMLDivElement>, QRScannerStates> {\n  static defaultProps = {\n    interval: 500,\n    resolution: 600\n  };\n\n  private videoRef = React.createRef<HTMLVideoElement>();\n  private stream?: MediaStream;\n\n  constructor(props: QRScannerProps) {\n    super(props);\n\n    this.state = {\n      canvas: document.createElement(\"canvas\")\n    };\n  }\n\n  componentDidMount() {\n    const supportedConstraints = navigator.mediaDevices.getSupportedConstraints();\n    const constraints: MediaTrackConstraints = {};\n\n    if (supportedConstraints.facingMode) {\n      constraints.facingMode = { ideal: \"environment\" };\n    }\n\n    navigator.mediaDevices.getUserMedia({ video: constraints }).then(stream => {\n      this.stream = stream;\n      this.videoRef.current!.srcObject = stream;\n      waitForVideoData(this.videoRef.current!).then(() => {\n        this.videoRef.current!.play().then(() => {\n          this.beginUpdateCanvas(this.videoRef.current!, this.state.canvas);\n        });\n      });\n    }).catch(error =>\n      console.log(error)\n    );\n  }\n\n  componentWillUnmount() {\n    this.stream?.getTracks().forEach(track => {\n      this.stream?.removeTrack(track);    // Workaround for https://issuetracker.google.com/u/0/issues/173142922\n      track.stop();                       // from https://github.com/twilio/twilio-video-app-react/issues/355#issuecomment-780368725\n    });\n  }\n\n  beginUpdateCanvas(video: HTMLVideoElement, canvas: HTMLCanvasElement) {\n    const canvasContext = canvas.getContext(\"2d\")!;\n    canvas.height = this.props.resolution;\n    canvas.width = this.props.resolution;\n    const aspectRatio = video.videoWidth / video.videoHeight;\n    const srcResolution = Math.min(video.videoWidth, video.videoHeight);\n    const offsetX = aspectRatio > 1 ? (video.videoWidth - video.videoHeight) / 2 : 0;\n    const offsetY = aspectRatio < 1 ? (video.videoHeight - video.videoWidth) / 2 : 0;\n\n    const canvasUpdateLoop = async () => {\n      try {\n        canvasContext.drawImage(video, offsetX, offsetY, srcResolution, srcResolution, 0, 0, this.props.resolution, this.props.resolution);\n        const code = jsQR(canvasContext.getImageData(0, 0, canvas.width, canvas.height).data, canvas.width, canvas.height, {\n          inversionAttempts: \"dontInvert\"\n        });\n\n        if (code) {\n          this.props.onScannedData(code.data);\n        }\n      } catch (error) {\n        console.log(error);\n      }\n\n      await delay(this.props.interval);\n      requestAnimationFrame(canvasUpdateLoop);\n    };\n\n    canvasUpdateLoop();\n  }\n\n  render() {\n    const { onScannedData, interval, ...rest } = this.props;\n    return (\n      <div {...rest}>\n        <section id={styles.container}>\n          <div/>\n          <video ref={this.videoRef}/>\n        </section>\n      </div>\n    );\n  }\n}\n\nexport default QRScanner;","/Users/mac/Desktop/Nako/nako/src/desktop/RoundTimer/RoundTimer.tsx",[],"/Users/mac/Desktop/Nako/nako/src/desktop/AnsweringTF/answering_TrueOrFalse.tsx",["149","150","151"],"import * as React from \"react\";\nimport \"./AnsweringTF.scss\";\nimport RoundTimer from \"../RoundTimer/RoundTimer\";\nimport TimerBack from \"./Group_815.svg\";\nimport NakoAPI, {\n  QuestionInfo,\n  QuestionEndRequest,\n  MultipleChoiceQuestion,\n} from \"../../modules/websocket-messages\";\n\nexport interface Props {\n  connection: NakoAPI;\n  questionInfo: QuestionInfo<\"student\", MultipleChoiceQuestion>;\n  correctAnswer?: QuestionEndRequest;\n  currentQuestionProps: number;\n}\n\ninterface State {\n  imgRef: React.RefObject<HTMLImageElement>;\n  targetTimerSize: number;\n  resizeObserver: ResizeObserver;\n  userAnswer: number;\n  changeColor: number;\n}\n\nclass Answering_TF extends React.Component<Props, State> {\n  static defaultProps = {\n    question: \"2 x 2 = ?\",\n    timeLimit: 120,\n  };\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      imgRef: React.createRef<HTMLImageElement>(),\n      targetTimerSize: 0,\n      resizeObserver: new ResizeObserver((entries) => {\n        for (const entry of entries) {\n          if (entry.target === this.state.imgRef.current) {\n            this.setState({ targetTimerSize: entry.contentRect.height - 12 });\n          }\n        }\n      }),\n      userAnswer: 7,\n      changeColor: 0,\n    };\n  }\n\n  componentWillUnmount() {\n    this.state.resizeObserver.disconnect();\n  }\n\n  componentDidUpdate(Props: Props) {\n    if (\n      this.props.correctAnswer?.correctAnswer !== undefined &&\n      this.state.userAnswer !== 7\n    ) {\n      if (\n        this.props.correctAnswer?.correctAnswer[0] === this.state.userAnswer\n      ) {\n        this.props.connection.send({\n          method: \"req\",\n          type: \"answer_question\",\n          payload: {\n            choice: this.state.userAnswer,\n            currentQuestionCheck: this.props.currentQuestionProps,\n          },\n        });\n        this.setState({ changeColor: 1 });\n      } else {\n        this.props.connection.send({\n          method: \"req\",\n          type: \"answer_question\",\n          payload: {\n            choice: this.state.userAnswer,\n            currentQuestionCheck: this.props.currentQuestionProps,\n          },\n        });\n        this.setState({ changeColor: 2 });\n      }\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"AnsweringTF-background-wrapper\">\n        <div className=\"AnsweringTF-Grid-wrapper\">\n          {/*The left grid*/}\n          <div className=\"AnsweringTF-left\">\n            <div className=\"AnsweringTF-left-inline\">\n              <div className=\"AnsweringTF-back-box\">\n                <button className=\"AnsweringTF-back-button\">\n                  <span className=\"arrow-left\" />\n                  <span>Back</span>\n                </button>\n                <div className=\"AnsweringTF-left-flex\">\n                  <p className=\"AnsweringTF-question-content\">\n                    {this.props.questionInfo.question}\n                  </p>\n                  <div className=\"AnsweringTF-left-icon-box\">\n                    <p className=\"AnsweringTF-question-icon1\">Answer</p>\n                    <p className=\"AnsweringTF-question-icon2\">Answer</p>\n                  </div>\n                  <p className=\"AnsweringTF-question-text\">\n                    Click to choose the answer\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n          {/*The right grid*/}\n          <div className=\"AnsweringTF-right\">\n            <div className=\"AnsweringTF-right-timer-box\">\n              <div\n                className=\"\n                 AnsweringTF-Right-timer-background-wrapper\"\n              >\n                <img\n                  ref={this.state.imgRef}\n                  className=\"AnsweringTF-right-timer-background\"\n                  src={TimerBack}\n                  alt=\"I am\"\n                  onLoad={(e) =>\n                    this.state.resizeObserver.observe(e.currentTarget)\n                  }\n                />\n                <RoundTimer\n                  className=\"background-wrapper\"\n                  time={this.props.questionInfo.timeLimit}\n                  timerSize={this.state.targetTimerSize - 60}\n                />\n              </div>\n              {/* <div className=\"AnsweringTF-Timer\">\n              </div> */}\n            </div>\n            <div className=\"AnsweringTF-muti-wrapper\">\n              {this.props.questionInfo.choices.map((value, index) => {\n                return (\n                  <button\n                    className=\"AnsweringsMC-button\"\n                    onClick={() => {\n                      this.setState({ userAnswer: index }, () => {\n                        console.log(this.state.userAnswer);\n                      });\n                      this.props.connection.send({\n                        method: \"req\",\n                        type: \"answer_question\",\n                        payload: {\n                          choice: this.state.userAnswer,\n                          currentQuestionCheck: this.props.currentQuestionProps,\n                        },\n                      });\n                      console.log(this.props.currentQuestionProps);\n                    }}\n                    style={\n                      this.state.changeColor === 1\n                        ? { border: \"7px solid green\" }\n                        : this.state.changeColor === 2\n                        ? { border: \"7px solid red\" }\n                        : { border: \"7px solid #4ed02c\" }\n                    }\n                  >\n                    {value}\n                  </button>\n                );\n              })}\n            </div>\n          </div>\n        </div>\n        {/* <div className=\"warn\">content: \"mobile not supported yet\";</div> */}\n      </div>\n    );\n  }\n}\n\nexport default Answering_TF;\n","/Users/mac/Desktop/Nako/nako/src/desktop/game/game.tsx",["152","153","154"],"import React from \"react\";\nimport { CSSTransition } from \"react-transition-group\";\nimport Monster from \"../../assets/monsters/monster\";\nimport { AccountInfo } from \"../../modules/account-info\";\nimport NakoAPI, {\n  AccountRole,\n  GameEndRequest,\n  GameInfo,\n  QuestionEndRequest,\n} from \"../../modules/websocket-messages\";\nimport { animate, delay } from \"../../utils/utils\";\nimport AnsweringModule from \"../AnsweringMC/answeringModule\";\nimport styles from \"./game.module.scss\";\nimport WinSound from \"./Nako Win.wav\";\nimport FailSound from \"./Nako Wrong.wav\";\nimport Result from \"./result\";\n\n\ninterface GameProps extends React.HTMLAttributes<HTMLDivElement> {\n  connection: NakoAPI;\n  accountInfo: AccountInfo;\n  gameInfo: GameInfo<AccountRole>;\n}\n\ninterface GameState {\n  questionCount: number;\n  currentQuestion: number;\n  currentPhase: GamePhase;\n  questionNumberElement: React.RefObject<HTMLHeadingElement>;\n  //resultScrollDiv: React.RefObject<HTMLDivElement>;\n  //sequentialDisplayCounter: number;\n  monsterRef: React.RefObject<Monster>;\n  showResult: boolean;\n  onSlideAnimComplete?: (value: void | PromiseLike<void>) => void;\n  correctAnswer?: QuestionEndRequest;\n  result?: GameEndRequest;\n}\n\nenum GamePhase {\n  Transition,\n  Active,\n  Ended,\n}\n\nexport default class Game extends React.Component<GameProps, GameState> {\n  constructor(props: GameProps) {\n    super(props);\n\n    this.state = {\n      questionCount: 0,\n      currentQuestion: -1,\n      currentPhase: this.props.accountInfo.role === \"student\" ? GamePhase.Transition : GamePhase.Active,\n      questionNumberElement: React.createRef<HTMLHeadingElement>(),\n      //resultScrollDiv: React.createRef<HTMLDivElement>(),\n      //sequentialDisplayCounter: 0,\n      monsterRef: React.createRef<Monster>(),\n      showResult: false,\n      result: [{\n        name: \"Test1\",\n        score: 0\n      }, {\n        name: \"Test2\",\n        score: 1\n      }, {\n        name: \"Test3\",\n        score: 2\n      }, {\n        name: \"Test4\",\n        score: 3\n      }, {\n        name: \"Test5\",\n        score: 4\n      }]\n    };\n\n    this.props.connection.subscribe(\"req\", \"game_end\").then((msg) => {\n      this.props.connection.send({\n        method: \"res\",\n        type: \"game_end\",\n        payload: null,\n      });\n  \n      console.log(\"Game ended\");\n      console.log(msg);\n  \n      this.setState(\n        { currentPhase: GamePhase.Ended, result: [...msg].sort((a, b) => b.score - a.score), showResult: true },\n        () => {\n          if (this.state.result!.indexOf(this.state.result!.filter(i => i.name === this.props.accountInfo.name)[0]) <= 2) {\n            // Play win Audio \n            this.play(WinSound);\n          } else {\n            // Play loss audio\n            this.play(FailSound);\n          }\n        }\n      );\n    });\n\n    this.props.accountInfo.role === \"student\" ? this.studentFlow() : this.teacherFlow();\n\n    (window as any).toggleSequentialDisplay = () => this.setState({ showResult: !this.state.showResult });\n  }\n\n  play = (music: string) => {\n    let audio = new Audio(music);\n    audio.play();\n  };\n\n  studentFlow = () => {\n    console.log(\"subbing\");\n    this.props.connection.subscribe(\"req\", \"game_update\").then(async (msg) => {\n    this.setState({ currentPhase: GamePhase.Transition });\n    await new Promise<void>(\n      res => this.setState({ onSlideAnimComplete: res }, \n      () => console.log(\"Waiting for slide-in animation to complete\"))\n    );\n\n    this.setState({\n      questionCount: this.state.questionCount + 1,\n      currentQuestion: msg.currentQuestion,\n    });\n\n    if (this.state.questionNumberElement.current) {\n      await animate(\"bounce\", this.state.questionNumberElement.current, 500);\n    } else {\n      console.warn(\"questionNumberElement was not found in DOM\");\n    }\n\n    this.props.connection.send({\n      method: \"res\",\n      type: \"game_update\",\n      payload: null,\n    });\n\n    this.props.connection.subscribe(\"req\", \"question_start\").then(() => {\n      this.props.connection.send({\n        method: \"res\",\n        type: \"question_start\",\n        payload: null,\n      });\n\n      console.log(\"Question started\");\n      this.setState({ currentPhase: GamePhase.Active, correctAnswer: undefined });\n\n      this.props.connection.subscribe(\"req\", \"question_end\").then((msg) => {\n        this.props.connection.send({\n          method: \"res\",\n          type: \"question_end\",\n          payload: null,\n        });\n\n        console.log(\"Question ended\");\n        this.setState({ correctAnswer: msg });\n\n        if (this.state.currentPhase !== GamePhase.Ended) {\n          this.studentFlow();\n        }\n      });\n    });\n  });\n}\n  teacherFlow = () => {\n    this.props.connection.subscribe(\"req\", \"game_update\", payload => {\n      this.setState({ currentQuestion: payload.currentQuestion });\n\n      this.props.connection.send({\n        method: \"res\",\n        type: \"game_update\",\n        payload: null\n      });\n    });\n\n    this.props.connection.subscribe(\"req\", \"question_end\", payload => {\n      this.state.monsterRef.current?.changeHealth(-payload.stats.correct / this.props.gameInfo.questions.length);\n\n      this.props.connection.send({\n        method: \"res\",\n        type: \"question_end\",\n        payload: null\n      });\n    });\n  }\n\n  render() {\n    const { connection, accountInfo, gameInfo, ...rest } = this.props;\n    let renderTarget: JSX.Element;\n\n    switch (this.state.currentPhase) {\n      case GamePhase.Transition:\n        renderTarget = (\n          <div className=\"fill-parent\" id={styles.transition}>\n            <CSSTransition\n              in={true}\n              appear={true}\n              exit={false}\n              timeout={1500}\n              classNames={{\n                appear: styles[\"slide-t2b-appear\"],\n                appearActive: styles[\"slide-t2b-appear-active\"],\n                appearDone: styles[\"slide-t2b-appear-done\"]\n              }}\n              onEntered={async () => {\n                console.log(\"Animation completed\");\n\n                let loggedWarning = false;\n\n                while (!this.state.onSlideAnimComplete) {\n                  if (!loggedWarning) {\n                    console.log(\"There was no promise to resolve, forcing delay for one...\");\n                    loggedWarning = true;\n                  }\n\n                  await delay(200);\n                }\n\n                this.state.onSlideAnimComplete();\n              }}\n            >\n              <span>\n                <h1>Question </h1>\n                <h1 ref={this.state.questionNumberElement}>\n                  {this.state.questionCount.toString()}\n                </h1>\n              </span>\n            </CSSTransition>\n          </div>\n        );\n        break;\n\n      case GamePhase.Active:\n        renderTarget = this.props.accountInfo.role === \"student\" ?\n          // TODO: Make Answering page generic\n          <AnsweringModule\n            connection={this.props.connection}\n            questionInfo={\n              this.props.gameInfo.questions[this.state.currentQuestion]\n            }\n            correctAnswer={this.state.correctAnswer}\n            currentQuestionProps={this.state.currentQuestion}\n          /> :\n          <div id={styles[\"monster-container\"]} className=\"fill-parent\">\n            <div>\n              <div>\n                <button><span className=\"arrow-left\"/><span>Back</span></button>\n                <span>Question: {this.state.currentQuestion + 1}</span>\n              </div>\n              <Monster ref={this.state.monsterRef} id={styles.monster}/>\n            </div>\n            <div>\n              <span>{this.state.currentQuestion !== -1 ? this.props.gameInfo.questions[this.state.currentQuestion].question : \"Waiting for question...\"}</span>\n            </div>\n          </div>;\n        break;\n\n      default:\n        renderTarget = <Result in={this.state.showResult} data={this.state.result}/>;\n        break;\n    }\n\n    return <div {...rest}>{renderTarget}</div>;\n  }\n}\n","/Users/mac/Desktop/Nako/nako/src/desktop/lobby/game-start-countdown.tsx",[],"/Users/mac/Desktop/Nako/nako/src/desktop/teacher/teacher.tsx",["155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172"],"import React from \"react\";\nimport { Link, Route, RouteChildrenProps } from \"react-router-dom\";\nimport { AccountInfo } from \"../../modules/account-info\";\nimport Logo from \"../../modules/logo/logo\";\nimport styles from \"./teacher.module.scss\";\nimport threeline from \"./Group 842.svg\";\nimport Quest from \"./questmake\";\nimport TimeSelector from \"./selector/TimeSelector\";\nimport ScoreSelector from \"./selector/ScoreSelector\";\nimport Select from \"react-select\";\nimport bossimg from \"./monster-stay-unscreen.svg\";\nimport Axios, { AxiosInstance } from \"axios\";\nimport QuestionEdit from \"./question-edit\";\nimport { Swiper, SwiperSlide } from \"swiper/react\";\nimport SwiperCore, { Navigation } from \"swiper/core\";\nimport Monster from \"./monster-stay-unscreen.gif\";\nimport Frong from \"./oie_27192261q7gwKFt.gif\";\nimport Mushroom from \"./mushroom stand.gif\";\nimport Dragon from \"./red dragon.gif\";\nimport Robo from \"./robo.gif\";\nimport SeaMon from \"./sea monster.gif\";\n\nimport \"swiper/swiper.min.css\";\nimport \"swiper/components/navigation/navigation.min.css\";\n\nSwiperCore.use([Navigation]);\n\ninterface ProfileProps {\n  accountInfo: AccountInfo;\n}\n\ninterface ProfileState extends QuestionBankStates {\n  resizeObserver: ResizeObserver;\n  targetTopBarHeight: number;\n  dataSet: {\n    name: string;\n    type: string;\n    teacher: string;\n  }[];\n  AnswerSet: {\n    question: string;\n    type: string;\n    choices: string[];\n    timeLimit: number;\n    corr: number[];\n  }[];\n  mins: number;\n  secs: number;\n  scores: number;\n  selectedOption: {\n    label: string;\n    value: string;\n  };\n  clearDefaultValue: boolean;\n  currentQuestionIdx: number;\n  mcRefs: [\n    { text: React.RefObject<HTMLInputElement>, checkbox: React.RefObject<HTMLInputElement> },\n    { text: React.RefObject<HTMLInputElement>, checkbox: React.RefObject<HTMLInputElement> },\n    { text: React.RefObject<HTMLInputElement>, checkbox: React.RefObject<HTMLInputElement> },\n    { text: React.RefObject<HTMLInputElement>, checkbox: React.RefObject<HTMLInputElement> },\n    { text: React.RefObject<HTMLInputElement>, checkbox: React.RefObject<HTMLInputElement> },\n    { text: React.RefObject<HTMLInputElement>, checkbox: React.RefObject<HTMLInputElement> }\n  ];\n  tfRefs: [React.RefObject<HTMLInputElement>, React.RefObject<HTMLInputElement>];\n  connection: AxiosInstance;\n}\n\ninterface QuestionBankStates {\n  AnswerSet: {\n    question: string;\n    type: string;\n    choices: string[];\n    timeLimit: number;\n    corr: number | number[];\n  }[];\n  question: string;\n  type: string;\n  choices1: string;\n  choices2: string;\n  choices3: string;\n  choices4: string;\n  choices5: string;\n  choices6: string;\n  choices1check: number;\n  choices2check: number;\n  choices3check: number;\n  choices4check: number;\n  choices5check: number;\n  choices6check: number;\n  timeLimit: number;\n  corr: number[];\n  holdArray: number[];\n  stayArray: string[];\n  totalTime: number;\n  TFAnswer: boolean[];\n  declare: React.RefObject<HTMLInputElement>;\n  questionEditRef: React.RefObject<QuestionEdit>;\n  temoCase: boolean;\n  currentSwiperIdx: number;\n  newQuestionIdx: number;\n  checkInitial: boolean;\n  thenText: string;\n}\n\nexport class Misstea extends React.Component<ProfileProps & React.HTMLAttributes<HTMLDivElement> & RouteChildrenProps, ProfileState> {\n  constructor(props: ProfileProps & React.HTMLAttributes<HTMLDivElement> & RouteChildrenProps) {\n    super(props);\n\n    this.state = {\n      resizeObserver: new ResizeObserver(entries => {\n        for (const i of entries) {\n          this.setState({ targetTopBarHeight: i.target.clientHeight });\n        }\n      }),\n      targetTopBarHeight: 0,\n      mins: 0,\n      secs: 0,\n      scores: 0,\n      selectedOption: { label: \"Multiple Choices\", value: \"Multiple\" },\n      currentQuestionIdx: 0,\n      mcRefs: [\n        { text: React.createRef<HTMLInputElement>(), checkbox: React.createRef<HTMLInputElement>() },\n        { text: React.createRef<HTMLInputElement>(), checkbox: React.createRef<HTMLInputElement>() },\n        { text: React.createRef<HTMLInputElement>(), checkbox: React.createRef<HTMLInputElement>() },\n        { text: React.createRef<HTMLInputElement>(), checkbox: React.createRef<HTMLInputElement>() },\n        { text: React.createRef<HTMLInputElement>(), checkbox: React.createRef<HTMLInputElement>() },\n        { text: React.createRef<HTMLInputElement>(), checkbox: React.createRef<HTMLInputElement>() }\n      ],\n      tfRefs: [React.createRef<HTMLInputElement>(), React.createRef<HTMLInputElement>()],\n      connection: Axios.create({\n        baseURL: \"http://localhost:5000/\",\n        timeout: 10000,\n      }),\n      ///////////////////////////////////\n      AnswerSet: [\n        // {\n        //   question: \"1 x 1 = ?\",\n        //   type: \"Multiple Choices\",\n        //   choices: [\"\", \"\", \"\", \"\"],\n        //   timeLimit: 0,\n        //   corr: [],\n        // },\n      ],\n      question: \"\",\n      type: \"Multiple\",\n      choices1: \"\",\n      choices2: \"\",\n      choices3: \"\",\n      choices4: \"\",\n      choices5: \"\",\n      choices6: \"\",\n      choices1check: 0,\n      choices2check: 0,\n      choices3check: 0,\n      choices4check: 0,\n      choices5check: 0,\n      choices6check: 0,\n      timeLimit: 0,\n      corr: [],\n      holdArray: [],\n      stayArray: [],\n      totalTime: 0,\n      TFAnswer: [false, false],\n      clearDefaultValue: false,\n      declare: React.createRef<HTMLInputElement>(),\n      temoCase: false,\n      currentSwiperIdx: 0,\n      newQuestionIdx: 0,\n      checkInitial: false,\n      thenText:\"\",\n      ///////////////////////////////////\n\n      dataSet: [\n        {\n          name: \"Game 10\",\n          type: \"Boss Fight\",\n          teacher: \"Sum Ting Wong\",\n        },\n        {\n          name: \"Game 11\",\n          type: \"Boss Fight\",\n          teacher: \"Amy Wong\",\n        },\n        {\n          name: \"Game 12\",\n          type: \"Boss Fight\",\n          teacher: \"Lee Man Ho\",\n        },\n        {\n          name: \"Game 13\",\n          type: \"Boss Fight\",\n          teacher: \"Lee Man Ho\",\n        },\n        {\n          name: \"Game 14\",\n          type: \"Boss Fight\",\n          teacher: \"Amy Wong\",\n        },\n        {\n          name: \"Game 15\",\n          type: \"Boss Fight\",\n          teacher: \"Sum Ting Wong\",\n        },\n        {\n          name: \"Game 16\",\n          type: \"Boss Fight\",\n          teacher: \"Sum Ting Wong\",\n        },\n        {\n          name: \"Game 17\",\n          type: \"Boss Fight\",\n          teacher: \"Lee Man Ho\",\n        },\n        {\n          name: \"Game 18\",\n          type: \"Boss Fight\",\n          teacher: \"Amy Wong\",\n        },\n        {\n          name: \"Game 19\",\n          type: \"Boss Fight\",\n          teacher: \"Sum Ting Wong\",\n        },\n        {\n          name: \"Game 20\",\n          type: \"Boss Fight\",\n          teacher: \"Lee Man Ho\",\n        },\n        {\n          name: \"Game 21\",\n          type: \"Boss Fight\",\n          teacher: \"Amy Wong\",\n        },\n        {\n          name: \"Game 22\",\n          type: \"Boss Fight\",\n          teacher: \"Lee Man Ho\",\n        },\n        {\n          name: \"Game 23\",\n          type: \"Boss Fight\",\n          teacher: \"Sum Ting Wong\",\n        },\n        {\n          name: \"Game 24\",\n          type: \"Boss Fight\",\n          teacher: \"Amy Wong\",\n        },\n      ],\n      questionEditRef: React.createRef<QuestionEdit>()\n    };\n  }\n\n  data = [\n    { label: \"Multiple Choices\", value: \"Multiple\" },\n    { label: \"True or False\", value: \"True/False\" },\n  ];\n\n  handleChange = (selectedOption: { label: string; value: string; } | null) => {\n    if (selectedOption === null) {\n      this.setState({ selectedOption: { label: \"\", value: \"\" } }, () =>\n        console.log(`Option selected:`, this.state.selectedOption)\n      );\n      const olddata = this.state.AnswerSet;\n      olddata.push({ question: \"\", type: \"\", choices: [\"\"], timeLimit: 0, corr: [3]});\n    }\n    else {\n      this.setState({ selectedOption: selectedOption }, () =>\n        console.log(`Option selected:`, this.state.selectedOption)\n      );\n    }\n  };\n  //I know that it is so spaghettily I will fix this in someday\n  ///////////////////////////////////////////////////////////////////////////////////////////\n  kaary = (e: number, g?: boolean) => {\n    let olddata2 = this.state.holdArray;\n    if(e === 0 && g === false && this.state.checkInitial === true){\n      olddata2.push(e);\n      this.setState({checkInitial: false});\n      console.log(`olddata2`+olddata2);\n    }\n    if (e !== 0) {\n      olddata2.push(e);\n      console.log(`olddata2`+olddata2);\n    }\n     if (g === true) {\n      olddata2 = [];\n      this.setState({holdArray: []}, () => {console.log(`hold` + this.state.holdArray);});\n      console.log(`olddata2`+olddata2);\n    }\n  };\n\ntyyy = () =>{\n\n    this.state.connection.post(\n      `/qbank`, {\n        questions: \n          this.state.AnswerSet.map((value, index)=>({\n                question: value.question,\n                choices: value.choices,\n                timeLimit: value.timeLimit,\n                corr: value.corr,\n          })),\n      }      \n    ) \n      .then((res) => {\n        this.setState({thenText: res.data});\n        console.log(res);\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  }\n\n\n  keep = () => {\n    let olddata = this.state.AnswerSet;\n      this.kaary(this.state.choices1check, false);\n      this.kaary(this.state.choices2check);\n      this.kaary(this.state.choices3check);\n      this.kaary(this.state.choices4check);\n      this.kaary(this.state.choices5check);\n      this.kaary(this.state.choices6check);\n      this.handleChangeForTime();\n    if (this.state.type === \"Multiple\") {\n      this.ChoicesRemoveEmpty(this.state.choices1);\n      this.ChoicesRemoveEmpty(this.state.choices2);\n      this.ChoicesRemoveEmpty(this.state.choices3);\n      this.ChoicesRemoveEmpty(this.state.choices4);\n      this.ChoicesRemoveEmpty(this.state.choices5);\n      this.ChoicesRemoveEmpty(this.state.choices6);\n      olddata.push({\n        question: this.state.question,\n        type: this.state.type,\n        choices: this.state.stayArray,\n        timeLimit: this.state.mins * 60 + this.state.secs,\n        corr: this.state.holdArray,\n      });\n    }\n    else if (this.state.type === \"True/False\") {\n      olddata.push({\n        question: this.state.question,\n        type: this.state.type,\n        choices: [\"True\", \"False\"],\n        timeLimit: this.state.mins * 60 + this.state.secs,\n        corr: this.state.holdArray,\n      });\n    }\n        this.setState({\n          choices1check: 0,\n          choices2check: 0,\n          choices3check: 0, \n          choices4check: 0, \n          choices5check: 0, \n          choices6check: 0,\n          checkInitial: false,   \n        }, ()=>{\n          console.log(this.state.choices1check + this.state.choices2check + this.state.choices3check + this.state.choices4check + this.state.choices5check + this.state.choices6check);\n        });\n        this.kaary(0, true);\n        this.ChoicesRemoveEmpty(\"\", true);\n        this.setState({currentQuestionIdx: this.state.currentQuestionIdx + 1, newQuestionIdx: this.state.newQuestionIdx + 1});\n        console.log(this.state.mins);\n        console.log(this.state.secs);\n        console.log(this.state.AnswerSet);\n  };\n\n  Edit = () =>{\n      this.kaary(this.state.choices1check);\n      this.kaary(this.state.choices2check);\n      this.kaary(this.state.choices3check);\n      this.kaary(this.state.choices4check);\n      this.kaary(this.state.choices5check);\n      this.kaary(this.state.choices6check);\n      this.handleChangeForTime();\n    this.setState(state => {\n      state.AnswerSet[this.state.currentQuestionIdx] = {\n        question: this.state.question,\n        type: this.state.type,\n        choices: [\n          this.state.choices1,\n          this.state.choices2,\n          this.state.choices3,\n          this.state.choices4,\n          this.state.choices5,\n          this.state.choices6,\n        ],\n        timeLimit: this.state.mins * 60 + this.state.secs,\n        corr: this.state.holdArray,\n      };\n    });\n        console.log(this.state.AnswerSet);\n  }\n\n  handlesss = (e: number) => {\n    switch (e) {\n      case 0:\n        if (this.state.choices1check !== e) {\n          this.setState({ choices1check: e }, () => {\n            console.log(this.state.choices1check);\n          });\n        } else {\n          this.setState({ choices1check: 0 }, () => {\n            console.log(this.state.choices1check);\n          });\n        }\n        break;\n      case 1:\n        if (this.state.choices2check !== e) {\n          this.setState({ choices2check: e }, () => {\n            console.log(this.state.choices2check);\n          });\n        } else {\n          this.setState({ choices2check: 0 }, () => {\n            console.log(this.state.choices2check);\n          });\n        }\n        break;\n      case 2:\n        if (this.state.choices3check !== e) {\n          this.setState({ choices3check: e }, () => {\n            console.log(this.state.choices3check);\n          });\n        } else {\n          this.setState({ choices3check: 0 }, () => {\n            console.log(this.state.choices3check);\n          });\n        }\n        break;\n      case 3:\n        if (this.state.choices4check !== e) {\n          this.setState({ choices4check: e }, () => {\n            console.log(this.state.choices4check);\n          });\n        } else {\n          this.setState({ choices4check: 0 }, () => {\n            console.log(this.state.choices4check);\n          });\n        }\n        break;\n      case 4:\n        if (this.state.choices5check !== e) {\n          this.setState({ choices5check: e }, () => {\n            console.log(this.state.choices5check);\n          });\n        } else {\n          this.setState({ choices5check: 0 }, () => {\n            console.log(this.state.choices5check);\n          });\n        }\n        break;\n      case 5:\n        if (this.state.choices6check !== e) {\n          this.setState({ choices6check: e }, () => {\n            console.log(this.state.choices6check);\n          });\n        } else {\n          this.setState({ choices6check: 0 }, () => {\n            console.log(this.state.choices6check);\n          });\n        }\n        break;\n    }\n  };\n\n  handleChangeForReal = (selectedOption: { label: string, value: string } | null) => {\n    this.setState({ selectedOption: selectedOption!, type: selectedOption!.value }, () => {\n      console.log(`Option selected:`, this.state.selectedOption);\n      console.log(this.state.type);\n    });\n  }\n\n  // handleChangeForReal = (selectedOption: (value: {\n  //   label: string,\n  //   value: string\n  // } | null) => void) => {\n  //   this.setState({ selectedOption, type: selectedOption.value \n  //     }, () =>{\n  //     console.log(`Option selected:`, this.state.selectedOption);\n  //     console.log(this.state.type);\n  //   }\n  //   );\n  // };\n\n  handleChangeForTime = () => {\n    this.setState({ totalTime: this.state.mins }, () => { console.log(this.state.totalTime);});\n  }\n\n  ChoicesRemoveEmpty = (e: string, g?: boolean) => {\n    let olddata3 = this.state.stayArray;\n    if(e !== \"\"){\n      olddata3.push(e);\n    }\n    if(g === true){\n      olddata3 = [];\n      this.setState({stayArray: []});\n    }\n  }\n\n  ///////////////////////////////////////////////////////////////////////////////////////////\n\n\n  componentWillUnmount() {\n    this.state.resizeObserver.disconnect();\n  }\n\n  render() {\n    const { accountInfo, location, history, match, ...rest } = this.props;\n    let renderTarget: JSX.Element;\n    let renderSlider: JSX.Element;\n    switch (this.state.selectedOption.label) {\n      case \"Multiple Choices\":\n        renderTarget = (\n          <>\n            <div id={styles[\"answer-1\"]} className={styles[\"answer\"]}>\n              <input ref={this.state.mcRefs[0].text} placeholder=\"Add Answer...\" type=\"text\" className={styles[\"answerbox\"]}\n                onChange={(e: any) => {\n                  this.setState({ choices1: e.target.value });\n                }} />\n              <br />\n              <input ref={this.state.mcRefs[0].checkbox} type=\"checkbox\" className={styles[\"answercheck\"]}\n                onChange={() => {this.handlesss(0); this.setState({checkInitial:true});}} />\n            </div>\n\n            <div id={styles[\"answer-2\"]} className={styles[\"answer\"]}>\n              <input ref={this.state.mcRefs[1].text} placeholder=\"Add Answer...\" type=\"text\" className={styles[\"answerbox\"]}\n                onChange={(e: any) => {\n                  this.setState({ choices2: e.target.value });\n                }} />\n              <br />\n              <input ref={this.state.mcRefs[1].checkbox} type=\"checkbox\" className={styles[\"answercheck\"]}\n                onChange={() => this.handlesss(1)} />\n            </div>\n\n            <div id={styles[\"answer-3\"]} className={styles[\"answer\"]}>\n              <input ref={this.state.mcRefs[2].text} placeholder=\"Add Answer...\" type=\"text\" className={styles[\"answerbox\"]}\n                onChange={(e: any) => {\n                  this.setState({ choices3: e.target.value });\n                }} />\n              <br />\n              <input ref={this.state.mcRefs[2].checkbox} type=\"checkbox\" className={styles[\"answercheck\"]}\n                onChange={() => this.handlesss(2)} />\n            </div>\n\n            <div id={styles[\"answer-4\"]} className={styles[\"answer\"]}>\n              <input ref={this.state.mcRefs[3].text} placeholder=\"Add Answer...\" type=\"text\" className={styles[\"answerbox\"]}\n                onChange={(e: any) => {\n                  this.setState({ choices4: e.target.value });\n                }} />\n              <br />\n              <input ref={this.state.mcRefs[3].checkbox} type=\"checkbox\" className={styles[\"answercheck\"]}\n                onChange={() => this.handlesss(3)} />\n            </div>\n\n            <div id={styles[\"answer-5\"]} className={styles[\"answer\"]}>\n              <input ref={this.state.mcRefs[4].text} placeholder=\"Add Answer...\" type=\"text\" className={styles[\"answerbox\"]}\n                onChange={(e: any) => {\n                  this.setState({ choices5: e.target.value });\n                }} />\n              <br />\n              <input ref={this.state.mcRefs[4].checkbox} type=\"checkbox\" className={styles[\"answercheck\"]}\n                onChange={() => this.handlesss(4)} />\n            </div>\n\n            <div id={styles[\"answer-6\"]} className={styles[\"answer\"]}>\n              <input ref={this.state.mcRefs[5].text} placeholder=\"Add Answer...\" type=\"text\" className={styles[\"answerbox\"]}\n                onChange={(e: any) => {\n                  this.setState({ choices6: e.target.value });\n                }} />\n              <br />\n              <input ref={this.state.mcRefs[5].checkbox} type=\"checkbox\" className={styles[\"answercheck\"]}\n                onChange={() => this.handlesss(5)} />\n            </div>\n          </>\n        );\n        break;\n\n      case \"True or False\":\n        renderTarget = (\n          <>\n            <div id={styles[\"truebutton\"]}>\n              <p className={styles.true}>True\n                <input ref={this.state.tfRefs[0]} type=\"checkbox\" \n                  className={styles[\"tfcheck\"]}\n                  // onChange={() => this.state.TFAnswer !== true ? this.setState({ TFAnswer: true }) : this.setState({ TFAnswer: false })} />\n                  onChange={e => {\n                    this.state.tfRefs[1].current!.checked = !e;\n                    this.setState({TFAnswer: [true, false]});\n                    e.target.checked === true ? \n                    this.handlesss(0) : console.log(\"None\");\n                    e.target.checked === true ?\n                    this.setState({checkInitial: true}) : console.log(\"Nonr Change\");\n                    //this.setState({choices1check: 1}, ()=>{console.log(this.state.choices1check);}) : this.setState({choices1check: 0}, ()=>{console.log(this.state.choices1check);});\n                    //e.target.checked === true ? this.setState({TFAnswer: true}) : this.setState({TFAnswer: false});\n                  }} />\n              </p>\n            </div>\n            <div id={styles[\"falsebutton\"]}>\n              <p className={styles.false}>False\n                <input ref={this.state.tfRefs[1]} type=\"checkbox\" className={styles[\"tfcheck\"]}\n                  onChange={e => {\n                    this.state.tfRefs[0].current!.checked = !e;\n                    this.setState({TFAnswer: [false, true]});\n                    e.target.checked === true ? \n                    this.handlesss(1) : console.log(\"None\");\n                    //this.setState({choices2check: 1}, ()=>{console.log(this.state.choices2check);}) : this.setState({choices2check: 0}, ()=>{console.log(this.state.choices2check);});\n                    //e.target.checked === true ? this.setState({TFAnswer: true}) : this.setState({TFAnswer: false});\n                   }}/>\n              </p>\n            </div>\n          </>);\n        break;\n\n      default:\n        renderTarget = (<p>Hellp</p>);\n        break;\n    }\n\n    return (\n      <div {...rest}>\n        <div id={styles[\"profile-container\"]} className=\"fill-parent\">\n          <div>\n            <Logo\n              elementRefUpdate={element => this.state.resizeObserver.observe(element)}\n              id={styles.logo}\n              role={this.props.accountInfo.role ?? \"teacher\"}\n              primaryColor=\"#424242\"\n              secondaryColor=\"#424242\"\n            />\n            <>\n              {location.pathname.includes(\"/edit_game/mc\") ? (\n                <>\n                  <div style={{height: \"100vh\", display:\"flex\", justifyContent:\"center\", alignItems: \"flex-start\", overflow:\"auto\", overflowY: \"auto\", overflowX: \"hidden\", flexFlow: \"row wrap\", alignContent:\"flex-start\"}}>\n                    {this.state.AnswerSet.map((_, idx) =>(\n                      <div \n                        style={{alignSelf:\"flex-start\"}}\n                        className={idx <= 8 && this.state.currentQuestionIdx === idx ? styles[\"slider-bank-question-single-clicked\"] : idx <= 8 ? styles[\"slider-bank-question-single\"] : this.state.currentQuestionIdx === idx || this.state.AnswerSet.length === 0 ? styles[\"slide-bar-question-clicked\"] : styles[\"slide-bar-question\"]}\n                        onClick={() => this.setState({ currentQuestionIdx: idx, temoCase: false})}\n                      >\n                        Question {idx + 1} \n                      </div>\n                    ))}\n                    <div\n                      className={this.state.temoCase === true || this.state.newQuestionIdx === this.state.currentQuestionIdx ? styles[\"slider-bank-question-single-clicked\"] : styles[\"slider-bank-question-single\"]}\n                      onClick={() => {\n                        this.state.questionEditRef.current?.deactivateAll();\n                        this.setState({temoCase: true, currentQuestionIdx: this.state.newQuestionIdx});\n                        }}>\n                          {\"Question\" + (this.state.newQuestionIdx + 1)}\n                    </div>\n                  </div>\n                  <Link to=\"/profile\">\n                  <button \n                    id={styles[\"Finish-edit\"]}\n                    onClick={this.tyyy}\n                  >\n                    Finish Edit\n                  </button>\n                  </Link>\n                  {/* <button style={{marginTop: \"6%\"}} onClick={this.tyyy}>Hi</button> */}\n                </>\n                  ) :\n                <>\n                  <Link to={\"/teacher\"} className={location.pathname === \"/teacher\" ? styles.selected : undefined}>Home</Link>\n                  {[\"Edit_Game\", \"Student\", \"Set_Awards\", \"Settings\"].map(i =>\n                    <Link\n                      key={i}\n                      to={`/teacher/${i.toLowerCase()}`}\n                      className={location.pathname.includes(i.toLowerCase()) ? styles.selected : undefined}\n                    >\n                      {i.replace(\"_\", \" \")}\n                    </Link>\n                  )}\n                  \n                </>\n              }\n            </>\n          </div>\n          <div>\n            <div id={styles[\"top-bar\"]} style={{ height: `calc(4rem + ${this.state.targetTopBarHeight}px)` }}>\n              <span>\n                <img className={styles.avatar} alt=\"profile\" />\n                {this.props.accountInfo.name}\n              </span>\n            </div>\n            <Route exact path=\"/teacher\">\n              <div id={styles.thome}>\n                <div id={styles.tevent}>\n                  <h2>Boss Fight</h2>\n                <Link to={\"/play\"}>\n                  <button style={{backgroundColor: \"#a70cff\"}}>Start</button>\n                </Link>\n                </div>\n\n                <div id={styles.tawards}>\n\n                </div>\n                <div id={styles.tunknown}>\n\n                </div>\n                <div id={styles.tsocial}>\n\n                </div>\n                <div id={styles.tmatchmaking}>\n                  <Link to=\"/play\">\n                    Matching\n                  </Link>\n                </div>\n              </div>\n            </Route>\n            <Route exact path=\"/teacher/edit_game\">\n              <div id={styles.edit}>\n                <div className={styles.button}>\n                  <Link to=\"/teacher/edit_game/Information\">\n                    <button className={styles.button2}>Add Game</button>\n                  </Link>\n                </div>\n                <div className={styles[\"flex-container\"]}>\n                  <div id={styles.whitebar}>\n\n                    <div id={styles.name}>Name</div>\n\n                    <div id={styles.type}>  Type</div>\n\n                    <div id={styles.teacher}>Teacher </div>\n\n\n                  </div>\n                  <div id={styles.bluesheet}>\n                    {this.state.dataSet.map(\n                      (value, index) => {\n                        return (\n                          <div key={index} className={styles.yellowbar}>\n                            <div key={index} className={styles.game10}>{value.name}</div>\n                            <div key={index} className={styles.boss}>{value.type}</div>\n                            <div key={index} className={styles.teachname}>{value.teacher}</div>\n                            <img key={index} src={threeline} className={styles.threeline}></img>\n                          </div>\n                        );\n                      }\n                    )}\n                  </div>\n                </div>\n              </div>\n            </Route>\n            <Route exact path=\"/teacher/edit_game/information\">\n              <Quest />\n            </Route>\n            <Route exact path=\"/teacher/edit_game/bosssetting\">\n              <div id={styles[\"bossbackground-wrapper\"]}>\n                <p id={styles[\"selectboss\"]}>\n                  Select Boss\n                  \n                  <Swiper\n                    navigation={true}\n                    className=\"mySwiper\"\n                    onSlideChange={(swiper) => {\n                      this.setState( { currentSwiperIdx: swiper.activeIndex }, ()=>{\n                        console.log(this.state.currentSwiperIdx);\n                      });\n                    }}>\n                      <SwiperSlide>\n                      <img src={Monster} key={0}/>\n                      </SwiperSlide>\n                      <SwiperSlide >\n                      <img src={Frong} key={1}/>\n                      </SwiperSlide>\n                      <SwiperSlide >\n                      <img src={Mushroom} key={2}/>\n                      </SwiperSlide>\n                      <SwiperSlide key={3}>\n                      <img src={Dragon}/>\n                      </SwiperSlide>\n                      <SwiperSlide key={4}>\n                      <img src={Robo}/>\n                      </SwiperSlide>\n                      <SwiperSlide key={5}>\n                      <img src={SeaMon}/>\n                      </SwiperSlide>\n                    </Swiper>\n                </p>\n                <div id={styles[\"boss-button-wrapper\"]}>\n                <Link to=\"/teacher/edit_game/mc\" >\n                <button id={styles[\"boss-button\"]}>Edit Question</button>\n              </Link>\n                </div>\n                <p id={styles[\"point\"]}>\n                  Total Score\n                  <input id={styles.number1} type=\"number\" name=\"fname\" defaultValue={0}/>\n                </p>\n                <p id={styles[\"pass\"]}>\n                  Pass Rate\n                  <input id={styles.number2} type=\"number\" name=\"fname\" defaultValue={10} min={10} max={100}/>\n                </p>\n                <div id={styles[\"witch\"]}>\n                  <p id={styles[\"witch-word\"]}>{\n                    this.state.currentSwiperIdx === 0 ? \"Insect Queen\" : \n                    this.state.currentSwiperIdx === 1 ? \"The hungry Frog\" : \n                    this.state.currentSwiperIdx === 2 ? \"The Mushroom Solider\" :\n                    this.state.currentSwiperIdx === 3 ? \"Red Dragon\" :\n                    this.state.currentSwiperIdx === 4 ? \"BR-141\" :\n                    this.state.currentSwiperIdx === 5 ? \"Sea Monster\" :\n                    \"\"\n                    }</p>\n                  <p id={styles[\"witch-info\"]}>{\n                    this.state.currentSwiperIdx === 0 ? \"Insect from an unknown planet\" : \n                    this.state.currentSwiperIdx === 1 ? \"A carnivorous frog is hungry now\" : \n                    this.state.currentSwiperIdx === 2 ? \"A solider from an evil kingdom\" :\n                    this.state.currentSwiperIdx === 3 ? \"A dragon from the fire realm\" :\n                    this.state.currentSwiperIdx === 4 ? \"A robot powered by unknown technology\":\n                    this.state.currentSwiperIdx === 5 ? \"A monster from the deep sea\" :\n                    \"\"\n                    }</p>\n                </div>\n              </div>\n            </Route>\n\n            <Route exact path=\"/teacher/edit_game/mc\">\n              <QuestionEdit\n                ref={this.state.questionEditRef}\n                currentQuestion={this.state.AnswerSet[this.state.currentQuestionIdx]}\n                minsValuePass={value => this.setState({ mins: value }, () => console.log(this.state.mins))}\n                secsValuePass={value => this.setState({ secs: value }, () => console.log(this.state.secs))}\n                scoreValuePass={value => this.setState({ scores: value })}\n                onSelectionChange={e => this.handleChangeForReal(e)}\n                data={this.data}\n                questionRefPass={value => this.setState({ declare: value }, ()=> {console.log(this.state.declare)})}\n                keep={this.keep}\n                onQuestionInputChange={e => this.setState({ question: e.target.value })}\n                renderTarget={renderTarget}\n                mcRefs={this.state.mcRefs}\n                tfRefs={this.state.tfRefs}\n              />\n            </Route>\n            <Route path=\"/teacher/Student\">\n              <span>Student</span>\n              {/* <Link to=\"/teacher/edit_game/mc\" >\n                <button>Go</button>\n              </Link>\n              <Link to=\"/teacher/edit_game/tf\" >\n                <button>ahead</button>\n              </Link> */}\n              <div id={styles[\"save-wrapper\"]}>\n                <p id={styles[\"save-text\"]}> \n                <p>2{this.state.thenText}</p>\n                <Link to=\"/profile\">\n                <button id={styles[\"save-button\"]}>\n                Return to main page</button>\n                </Link>\n                </p>\n              </div>\n            </Route>\n            <Route path=\"/teacher/Set Awards\">\n              {/* <span>Set Awards</span> */}\n              <div id={styles[\"save-wrapper\"]}>\n                <p id={styles[\"save-text\"]}> \n                <p>2{this.state.thenText}</p>\n                <button>Return to main page</button>\n                </p>\n              </div>\n            </Route>\n            <Route path=\"/teacher/Settings\">\n              <span>Settings</span>\n            </Route>\n            <Route exact path=\"/teacher/edit_game/save\">\n              <div>\n                <p>2{this.state.thenText}</p>\n                <button>Return to main page</button>\n              </div>\n            </Route>\n          </div>\n        </div>\n      </div >\n    );\n  }\n}\n\nexport default Misstea;","/Users/mac/Desktop/Nako/nako/src/utils/utils.ts",[],"/Users/mac/Desktop/Nako/nako/src/assets/monsters/monster.tsx",[],"/Users/mac/Desktop/Nako/nako/src/assets/monsters/index.ts",["173"],"import stay from \"./monster-stay.gif\";\nimport damaged from \"./monster-damaged.gif\";\nimport death from \"./monster-death.gif\";\n\nexport const MONSTER_ANIM = {\n  stay,\n  damaged,\n  death\n}","/Users/mac/Desktop/Nako/nako/src/desktop/game/result.tsx",[],"/Users/mac/Desktop/Nako/nako/src/desktop/teacher/blueweb.tsx",[],"/Users/mac/Desktop/Nako/nako/src/desktop/teacher/questmake.tsx",["174"],"import React from \"react\";\nimport styles from \"./questmake.module.scss\";\nimport { Link } from \"react-router-dom\";\n\ninterface State {\n    input: string,\n}\n\nclass Quest extends React.Component<{}, State>{\n    constructor(props: any) {\n        super(props);\n        this.state = {\n            input: \"hello\",\n        };\n    }\n\n\n    render() {\n        return (\n            <div className={styles[\"flex-container\"]}>\n                <div>\n                    <div id={styles[\"yellow-topbar\"]}>\n                        <p id={styles.add}>Add Game</p>\n\n                    </div>\n                    <div id={styles[\"yellow-wrapper\"]}>\n                        <div id={styles[\"input-container\"]}>\n                            <div>\n                                <span>Bank Title :</span>\n                                <input type=\"text\" name=\"fname\" onChange={(e) => this.setState({ input: e.target.value })} /> \n                            </div>\n                            <div>\n                                <span>Category :</span>\n                                <p className={styles[\"cateone-wrapper\"]}>Year</p>\n                                <p className={styles[\"cateone-wrapper\"]}>Math</p>\n                            </div>\n                            {/* <div className={styles[\"input-container\"]}> */}\n                            <div>\n                                <span>Add group :</span>\n                                <p className={styles[\"catetwo-wrapper\"]}>Class 3D</p>\n                                <p className={styles[\"catetwo-wrapper\"]}>Class 3C</p>\n                            </div>\n                            {/* <div className={styles[\"input-container\"]}> */}\n                            <div>\n                                <span>Date :</span>\n                                <p className={styles[\"catethree-wrapper\"]}>2021年1月3日</p>\n                                <p className={styles[\"to-wrapper\"]}>To</p>\n                                <p className={styles[\"catethree-wrapper\"]}>2021年1月3日</p>\n                            </div>\n                            {/* <div className={styles[\"input-container\"]}> */}\n                            <div>\n                                <span>Time :</span>\n                                <p className={styles[\"catefive-wrapper\"]}>上午1:00</p>\n                                <p className={styles[\"to-wrapper\"]}>To</p>\n                                <p className={styles[\"catefive-wrapper\"]}>上午1:00</p>\n                            </div>\n                            \n                            <Link to=\"/teacher/edit_game/bosssetting\">\n                                <button className={styles.button3}>Next</button>\n                            </Link>\n                        </div>\n                        {/* <table cellPadding={5} style={{ borderCollapse: \"collapse\", width: \"80%\" }}>\n\n                            <tr>\n                                <td className={styles.title}>Bank Title:</td>\n                                <td ><input id={styles.white1} type=\"text\" name=\"fname\" onChange={(e) => this.setState({ input: e.target.value })} /></td>\n\n                            </tr>\n                            <tr>\n                                <td className={styles.title}>Category:</td>\n                                \n                                <td >\n                                    <p className={styles[\"cateone-wrapper\"]}>Year</p>\n                                  \n                                    <p className={styles[\"cateone-wrapper\"]}>Math</p>\n                                </td>\n                                \n                            </tr>\n                            <tr>\n                                <td className={styles.title}>Add group:</td>\n                                <td >\n                                    <p className={styles[\"catetwo-wrapper\"]}>Class 3D</p>\n                                  \n                                    <p className={styles[\"catetwo-wrapper\"]}>Class 3C</p>\n                                </td>\n                                \n                            </tr>\n                            <tr>\n                                <td className={styles.title}>Date:</td>\n                                <td >\n                                    <p className={styles[\"catethree-wrapper\"]}>2021年1月3日</p>\n                                   \n                                    <p className={styles[\"cateeight-wrapper\"]}>To</p>\n                                   \n                                    <p className={styles[\"catethree-wrapper\"]}>2021年1月3日</p>\n                                </td>\n                                                     \n                            </tr>\n                            <tr>\n                                <td className={styles.title}>Time:</td>\n                                <td >\n                                    <p className={styles[\"catefive-wrapper\"]}>上午1:00</p>\n                                   \n                                    <p className={styles[\"catesix-wrapper\"]}>To</p>\n                                 \n                                    <p className={styles[\"cateseven-wrapper\"]}>上午1:00</p>\n                                </td>\n                               \n                          </tr>\n                          \n                        </table> */}\n\n\n\n\n\n\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\n\n\n\n\n{/*render() {\n        return (\n            <div className={styles[\"flex-container\"]}>\n                <div>\n                    <div id={styles[\"yellow-topbar\"]}>\n                        <p id={styles.add}>Add Game</p>\n\n                    </div>\n                    <div id={styles[\"yellow-wrapper\"]}>\n\n                        <table cellPadding=\"5\">\n                            <tr>\n                                <td className={styles.title}><p className={styles.titleword}>Game Title : </p></td>\n                                <td id={styles[\"bar-wrapper\"]}><input id={styles.white1} type=\"text\" name=\"fname\" onChange={(e) => this.setState({ input: e.target.value })} />\n                                </td>\n\n                            </tr>\n\n\n\n\n\n                            <tr>\n                                <td className={styles.title}><p className={styles.titleword}>Category : </p></td>\n                                <td id={styles[\"cateone-wrapper\"]}>\n                                    <p id={styles.year3}>Year 3</p>\n                                </td>\n                                <td id={styles[\"catetwo-wrapper\"]}>\n                                    <p id={styles.math}>Math</p>\n                                </td>\n                            </tr>\n\n\n\n\n                            <tr>\n                                <td className={styles.title}><p className={styles.titleword}>Add group : </p></td>\n                                <td id={styles[\"catethree-wrapper\"]}>\n                                    <p id={styles.class3d}>Class 3D</p>\n                                </td>\n                                <td id={styles[\"catefour-wrapper\"]}>\n                                    <p id={styles.class3c}>Class 3C</p>\n                                </td>\n                            </tr>\n\n\n\n\n                            <tr>\n                                <td className={styles.title}><p className={styles.titleword}>Date : </p></td>\n                                <td id={styles[\"catefive-wrapper\"]}>\n                                    <p>2021年1月3日</p>\n                                </td>\n                                <td id={styles[\"toone-wrapper\"]}>\n                                    <p>To</p>\n                                </td>\n                                <td id={styles[\"catesix-wrapper\"]}>\n                                    <p>2021年1月3日</p>\n                                </td>\n                            </tr>\n\n\n\n\n                            <tr>\n                                <td className={styles.title}><p>Time : </p></td>\n                                <td id={styles[\"cateseven-wrapper\"]}>\n                                    <p>上午1:00</p>\n                                </td>\n                                <td id={styles[\"totwo-wrapper\"]}>\n                                    <p>To</p>\n                                </td>\n                                <td id={styles[\"cateeight-wrapper\"]}>\n                                    <p>上午1:00</p>\n                                </td>\n                            </tr>\n                        </table>\n\n\n                        <div id={styles.next}>\n                            <Link to=\"/teacher/edit_game/mc\">\n                                <button className={styles.button3}>Next</button>\n                            </Link>\n                        </div>\n\n\n\n\n\n                    </div>\n                </div>\n\n\n\n\n            </div>\n\n\n\n        );\n    }\n\n}*/}\nexport default Quest;","/Users/mac/Desktop/Nako/nako/src/desktop/AnsweringMC/answeringModule.tsx",["175","176","177","178"],"import * as React from \"react\";\nimport CSS from \"csstype\";\nimport style from \"./AnsweringMC.module.scss\";\nimport RoundTimer from \"../RoundTimer/RoundTimer\";\nimport TimerBack from \"./Group_816.svg\";\nimport NakoAPI, {\n  QuestionInfo,\n  QuestionEndRequest,\n  Question,\n  QuestionType,\n} from \"../../modules/websocket-messages\";\nimport CorrectSound from \"./Nako Correct.wav\";\nimport WrongSound from \"./Nako Fail.wav\";\nimport MCModule from \"./MultipleChoiceModule\";\n\nexport interface Props {\n  correctAnswer?: QuestionEndRequest;\n  connection: NakoAPI;\n  questionInfo: QuestionInfo<\"student\", Question<QuestionType>>;\n  currentQuestionProps: number;\n  timing?: (fn: () => void) => void;\n}\n\ninterface State {\n  imgRef: React.RefObject<HTMLImageElement>;\n  targetTimerSize: number;\n  resizeObserver: ResizeObserver;\n  userAnswer: number;\n  changeColor: number;\n  sending: QuestionInfo<\"student\", Question<QuestionType>>;\n  countCorrect: boolean;\n  lockCorrect: boolean;\n}\n\nclass AnsweringModule extends React.Component<Props, State> {\n  static defaultProps = {\n    question: \"2 x 2 = ?\",\n    choices: [\n      \"What time is it? dasfadsadsfasdffhjkhjkjkhjklhjg\",\n      \"What time is it? dasfadsadsfasdffhjkhjkjkhjklhjg\",\n      \"What time is it? dasfadsadsfasdffhjkhjkjkhjklhjg\",\n      \"What time is it? dasfadsadsfasdffhjkhjkjkhjklhjg\",\n      \"What time is it? dasfadsadsfasdffhjkhjkjkhjklhjg\",\n      \"What time is it? dasfadsadsfasdffhjkhjkjkhjklhjg\",\n    ],\n    timeLimit: 120,\n    correctAnswer: 0,\n  };\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      imgRef: React.createRef<HTMLImageElement>(),\n      targetTimerSize: 0,\n      resizeObserver: new ResizeObserver((entries) => {\n        for (const entry of entries) {\n          if (entry.target === this.state.imgRef.current) {\n            this.setState({ targetTimerSize: entry.contentRect.height - 12 });\n          }\n        }\n      }),\n      userAnswer: 7,\n      changeColor: 0,\n      sending: this.props.questionInfo,\n      countCorrect: false,\n      lockCorrect: false,\n    };\n  }\n\n  componentDidMount() {\n    this.Classify();\n  }\n\n  componentWillUnmount() {\n    this.state.resizeObserver.disconnect();\n    console.log(\"unmount\");\n  }\n\n  componentDidUpdate(Props: Props) {\n    if (this.state.userAnswer !== 7) {\n      console.log(\"changed\");\n      console.log(this.props.correctAnswer?.correctAnswer);\n    }\n  }\n\n  Play = (music: string) => {\n    let audio = new Audio(music);\n    audio.play();\n  };\n\n  Classify = () => {\n    return this.props.questionInfo.type === \"multiple_choice\"\n      ? this.setState({\n          sending: this.props.questionInfo as QuestionInfo<\n            \"student\",\n            Question<\"multiple_choice\">\n          >,\n        })\n      : console.log(\n          this.props.questionInfo as QuestionInfo<\n            \"student\",\n            Question<\"multiple_choice\">\n          >\n        );\n  };\n\n  render() {\n    return (\n      <div id={style[\"background-wrapper\"]}>\n        <div id={style[\"Grid-wrapper\"]}>\n          {/*The left grid*/}\n          <div id={style[\"left\"]}>\n            <div id={style[\"left-inline\"]}>\n              <div id={style[\"back-box\"]}>\n                <button id={style[\"back-button\"]}>\n                  <span id={style[\"arrow-left\"]} />\n                  <span>Back</span>\n                </button>\n                <div id={style[\"left-flex\"]}>\n                  <p id={style[\"question-content\"]}>\n                    {this.props.questionInfo.question}\n                  </p>\n                  <div id={style[\"left-icon-box\"]}>\n                    <p id={style[\"question-icon1\"]}>Answer</p>\n                    <p id={style[\"question-icon2\"]}>Answer</p>\n                  </div>\n                  <p id={style[\"question-text\"]}>Click to choose the answer</p>\n                </div>\n              </div>\n            </div>\n          </div>\n          {/*The right grid*/}\n          <div id={style[\"right\"]}>\n            <div id={style[\"right-timer-box\"]}>\n              <div id={style[\"right-timer-background-wrapper\"]}>\n                <img\n                  ref={this.state.imgRef}\n                  id={style[\"right-timer-background\"]}\n                  src={TimerBack}\n                  alt=\"I am\"\n                  onLoad={(e) =>\n                    this.state.resizeObserver.observe(e.currentTarget)\n                  }\n                />\n                <RoundTimer\n                  id={style[\"timer-background-wrapper\"]}\n                  time={this.props.questionInfo.timeLimit}\n                  timerSize={this.state.targetTimerSize - 60}\n                />\n              </div>\n              {/* <div id=\"AnsweringMC-Timer\">\n                </div> */}\n            </div>\n            <div>\n              <MCModule\n                connection={this.props.connection}\n                correctAnswer={this.props.correctAnswer}\n                currentQuestionProps={this.props.currentQuestionProps}\n                countCorrect={this.state.countCorrect}\n                questionInfo={\n                  this.props.questionInfo.type === \"multiple_choice\"\n                    ? (this.props.questionInfo as QuestionInfo<\n                        \"student\",\n                        Question<\"multiple_choice\">\n                      >)\n                    : (this.props.questionInfo as QuestionInfo<\n                        \"student\",\n                        Question<\"multiple_choice\">\n                      >)\n                }\n                onAnswerSelected={(e) => {\n                  this.setState({ userAnswer: e }, () => {\n                    this.props.connection.send({\n                      method: \"req\",\n                      type: \"answer_question\",\n                      payload: {\n                        choice: this.state.userAnswer,\n                        currentQuestionCheck: this.props.currentQuestionProps,\n                      },\n                    });\n                  });\n                }}\n              />\n            </div>\n          </div>\n        </div>\n        {/* <div id=\"warn\">content: \"mobile not supported yet\";</div> */}\n      </div>\n    );\n  }\n}\n\nexport default AnsweringModule;\n","/Users/mac/Desktop/Nako/nako/src/desktop/AnsweringMC/MultipleChoiceModule.tsx",["179"],"import React from \"react\";\nimport CSS from \"csstype\";\nimport style from \"./AnsweringMC.module.scss\";\nimport CorrectSound from \"./Nako Correct.wav\";\nimport WrongSound from \"./Nako Fail.wav\";\nimport NakoAPI, {\n  QuestionInfo,\n  QuestionEndRequest,\n  Question,\n} from \"../../modules/websocket-messages\";\n\nexport interface Props {\n  correctAnswer?: QuestionEndRequest;\n  connection: NakoAPI;\n  questionInfo: QuestionInfo<\"student\", Question<\"multiple_choice\">>;\n  currentQuestionProps: number;\n  onAnswerSelected: (userAnswer: number) => void;\n  countCorrect: boolean;\n}\n\ninterface States {\n  userAnswer: number;\n  sending: boolean;\n  checkPlay: boolean;\n}\n\nclass MCModule extends React.Component<Props, States> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      userAnswer: 7,\n      sending: false,\n      checkPlay: false,\n    };\n\n    console.log(props.questionInfo);\n  }\n\n  componentWillUnmount() {\n    console.log(\"check pls: \" + this.props.correctAnswer);\n  }\n\n  componentDidMount() {\n    this.setState({ checkPlay: false });\n  }\n\n  componentWillUpdate() {\n    console.log(\"check pls: \" + this.props.correctAnswer);\n  }\n\n  normalAnswerStyle: CSS.Properties = {\n    width: \"45%\",\n    maxHeight: \"50em\",\n    marginTop: \"3%\",\n    flexShrink: 1,\n    flexGrow: 1,\n    color: \"black\",\n    fontSize: \"1.6em\",\n    textAlign: \"center\",\n    padding: \"2%\",\n    borderRadius: \"50px\",\n    border: \"7px solid #9650FF\",\n    background: \"white\",\n    boxShadow:\n      \"10px 10px 10px rgba(0, 0, 0, 0.45),-10px -10px 10px rgba(255, 255, 255, 0.45)\",\n    transitionDuration: \"0.3s\",\n    outline: \"none\",\n  };\n\n  correctAnswerStyle: CSS.Properties = {\n    width: \"45%\",\n    maxHeight: \"50em\",\n    marginTop: \"3%\",\n    flexShrink: 1,\n    flexGrow: 1,\n    color: \"black\",\n    fontSize: \"1.6em\",\n    textAlign: \"center\",\n    padding: \"2%\",\n    borderRadius: \"50px\",\n    border: \"7px solid lightgreen\",\n    background: \"white\",\n    boxShadow:\n      \"10px 10px 10px rgba(0, 0, 0, 0.45),-10px -10px 10px rgba(255, 255, 255, 0.45)\",\n    transitionDuration: \"0.3s\",\n    outline: \"none\",\n  };\n\n  wrongAnswerStyle: CSS.Properties = {\n    width: \"45%\",\n    maxHeight: \"50em\",\n    marginTop: \"3%\",\n    flexShrink: 1,\n    flexGrow: 1,\n    color: \"black\",\n    fontSize: \"1.6em\",\n    textAlign: \"center\",\n    padding: \"2%\",\n    borderRadius: \"50px\",\n    border: \"7px solid red\",\n    background: \"white\",\n    boxShadow:\n      \"10px 10px 10px rgba(0, 0, 0, 0.45),-10px -10px 10px rgba(255, 255, 255, 0.45)\",\n    transitionDuration: \"0.3s\",\n    outline: \"none\",\n  };\n\n  UserAnswerStyle: CSS.Properties = {\n    width: \"45%\",\n    maxHeight: \"50em\",\n    marginTop: \"3%\",\n    flexShrink: 1,\n    flexGrow: 1,\n    color: \"black\",\n    fontSize: \"1.6em\",\n    textAlign: \"center\",\n    padding: \"2%\",\n    borderRadius: \"50px\",\n    border: \"12px solid #FFA200\",\n    background: \"white\",\n    boxShadow:\n      \"10px 10px 10px rgba(0, 0, 0, 0.45),-10px -10px 10px rgba(255, 255, 255, 0.45)\",\n    transitionDuration: \"0.2s\",\n    outline: \"none\",\n  };\n\n  Play = (music: string) => {\n    let audio = new Audio(music);\n    audio.play();\n  };\n\n  CSSPicker = (index: number) => {\n    if (\n      this.props.correctAnswer?.correctAnswer === undefined &&\n      this.state.sending !== true\n    ) {\n      return this.normalAnswerStyle;\n    }\n    if (\n      this.props.correctAnswer?.correctAnswer === undefined &&\n      this.state.sending === true &&\n      this.state.userAnswer === index\n    ) {\n      return this.UserAnswerStyle;\n    } else if (\n      this.props.correctAnswer?.correctAnswer === undefined &&\n      this.state.sending === true &&\n      this.state.userAnswer !== index\n    ) {\n      return this.normalAnswerStyle;\n    }\n\n    if (this.props.correctAnswer !== undefined) {\n      this.props.correctAnswer.correctAnswer.forEach((value, i) => {\n        if (value === index && this.state.sending === true) {\n          console.log(value);\n          return this.correctAnswerStyle;\n        } else if (value !== index && this.state.sending === true) {\n          console.log(this.props.correctAnswer?.correctAnswer);\n          return this.wrongAnswerStyle;\n        }\n      });\n      if (\n        this.props.correctAnswer.correctAnswer.find((value) => {\n          return value === this.state.userAnswer;\n        }) === this.state.userAnswer &&\n        this.state.checkPlay === false\n      ) {\n        this.Play(CorrectSound);\n        this.setState({ checkPlay: true });\n        console.log(\"Correct\");\n      }\n      // // } else if (\n      // //   this.props.countCorrect !== true &&\n      // //   this.state.checkPlay === false\n      // ) {\n      else if (\n        this.props.correctAnswer.correctAnswer.find((value) => {\n          return value === this.state.userAnswer;\n        }) !== this.state.userAnswer &&\n        this.state.checkPlay === false\n      ) {\n        this.Play(WrongSound);\n        this.setState({ checkPlay: true });\n        console.log(\"Wrong\");\n      }\n    }\n  };\n\n  render() {\n    return (\n      <>\n        <div id={style[\"muti-wrapper\"]}>\n          {this.props.questionInfo.choices.map((value, index) => {\n            return (\n              <button\n                id={style[\"button\"]}\n                disabled={this.state.sending === true ? true : false}\n                key={index}\n                onClick={() => {\n                  this.setState({ userAnswer: index, sending: true }, () => {\n                    this.props.onAnswerSelected(this.state.userAnswer);\n                    console.log(\"userAnswer: \" + this.state.userAnswer);\n                    console.log(\n                      \"correct Answer: \" +\n                        this.props.correctAnswer?.correctAnswer\n                    );\n                  });\n                }}\n                style={this.CSSPicker(index)}\n              >\n                {value}\n              </button>\n            );\n          })}\n        </div>\n        <p>{this.props.correctAnswer?.correctAnswer}</p>\n      </>\n    );\n  }\n}\n\nexport default MCModule;\n","/Users/mac/Desktop/Nako/nako/src/desktop/teacher/questsetbar.tsx",[],"/Users/mac/Desktop/Nako/nako/src/desktop/teacher/selector/TimeSelector.tsx",[],"/Users/mac/Desktop/Nako/nako/src/desktop/teacher/selector/ScoreSelector.tsx",[],"/Users/mac/Desktop/Nako/nako/src/desktop/teacher/question-edit.tsx",["180","181","182","183","184","185","186","187","188","189","190","191","192"],"import React from \"react\";\nimport Select from \"react-select\";\nimport ScoreSelector from \"./selector/ScoreSelector\";\nimport TimeSelector from \"./selector/TimeSelector\";\nimport styles from \"./teacher.module.scss\";\n\ninterface QuestionEditProps {\n  currentQuestion: {\n    question: string;\n    type: string;\n    choices: string[];\n    timeLimit: number;\n    corr: number[];\n  };\n  minsValuePass: (value: number) => void;\n  secsValuePass: (value: number) => void;\n  scoreValuePass: (value: number) => void;\n  questionRefPass: (value: React.RefObject<HTMLInputElement>) => void;\n  onSelectionChange: (value: {\n    label: string,\n    value: string\n  } | null) => void,\n  data: {\n    label: string;\n    value: string;\n  }[],\n  keep: () => void;\n  onQuestionInputChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  renderTarget: JSX.Element;\n  mcRefs: [\n    { text: React.RefObject<HTMLInputElement>, checkbox: React.RefObject<HTMLInputElement> },\n    { text: React.RefObject<HTMLInputElement>, checkbox: React.RefObject<HTMLInputElement> },\n    { text: React.RefObject<HTMLInputElement>, checkbox: React.RefObject<HTMLInputElement> },\n    { text: React.RefObject<HTMLInputElement>, checkbox: React.RefObject<HTMLInputElement> },\n    { text: React.RefObject<HTMLInputElement>, checkbox: React.RefObject<HTMLInputElement> },\n    { text: React.RefObject<HTMLInputElement>, checkbox: React.RefObject<HTMLInputElement> }\n  ];\n  tfRefs: [React.RefObject<HTMLInputElement>, React.RefObject<HTMLInputElement>];\n}\n\ninterface QuestionEditState {\n  dropDownRef: React.RefObject<Select<{ label: string; value: string; }>>;\n  questionRef: React.RefObject<HTMLInputElement>;\n  timeSelectorRef: React.RefObject<TimeSelector>;\n  tempDropDownValue?: { label: string, value: string };\n  selectionChangeState: {\n    label: string | undefined;\n    value: string | undefined;\n  };\n}\nexport default class QuestionEdit extends React.Component<QuestionEditProps, QuestionEditState> {\n  constructor(props: QuestionEditProps) {\n    super(props);\n\n    this.state = {\n      dropDownRef: React.createRef<Select<{ label: string; value: string; }>>(),\n      questionRef: React.createRef<HTMLInputElement>(),\n      timeSelectorRef: React.createRef<TimeSelector>(),\n      selectionChangeState: {\n        label: \"Multiple Choices\", value: \"Multiple\"\n      },\n    };\n  }\n  \n  componentDidUpdate(prevProps: QuestionEditProps) {\n    try {\n      if (prevProps.currentQuestion !== this.props.currentQuestion) {\n        // this.state.dropDownRef.current!.setState({ value: this.props.currentQuestion.type === \"Multiple\" ? this.props.data[0] : this.props.data[1] });\n        this.setState({ tempDropDownValue: this.props.currentQuestion.type === \"Multiple\" ? this.props.data[0] : this.props.data[1] }, () => {\n          this.setState({ tempDropDownValue: undefined });\n          this.state.timeSelectorRef.current!.setState({\n            secsValue: this.props.currentQuestion.timeLimit % 60,\n            minsValue: Math.floor(this.props.currentQuestion.timeLimit / 60)\n          });\n          this.state.questionRef.current!.value = this.props.currentQuestion.question;\n\n          if (this.props.currentQuestion.type === \"Multiple\") {\n            for (let i = 0; i < this.props.mcRefs.length; i++) {\n              this.props.mcRefs[i].text.current!.value = this.props.currentQuestion.choices[i] ?? \"\";\n              this.props.mcRefs[i].checkbox.current!.checked = false;\n            }\n    \n            if (typeof this.props.currentQuestion.corr === \"number\") {\n              this.props.mcRefs[this.props.currentQuestion.corr - 1].checkbox.current!.checked = true;\n            } else {\n              for (const i of this.props.currentQuestion.corr) {\n                this.props.mcRefs[i].checkbox.current!.checked = true;\n              }\n            }\n          } else {\n            // I'm assuming that corr is either 0/1 if the type is T/F\n            console.log(this.props.currentQuestion.corr);\n            console.log(this.props.tfRefs);\n            this.props.tfRefs[0].current!.checked = this.props.currentQuestion.corr[0] === 0 ? true : false;\n            this.props.tfRefs[1].current!.checked = this.props.currentQuestion.corr[0] === 1 ? true : false;\n          }\n        });\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n deactivateAll() {\n  console.log(\"go\");\n   console.log(this.state.questionRef.current);\n  switch(this.state.selectionChangeState.value) {\n    case \"Multiple\":\n      console.log(\"come\");\n      if (this.state.questionRef.current) {\n        this.state.questionRef.current!.value = \"\";\n      }\n  \n      for (let i = 0; i < this.props.mcRefs.length; i++) {\n        if (this.props.mcRefs[i].text.current) {\n          this.props.mcRefs[i].text.current!.value = \"\";\n        }\n  \n        if (this.props.mcRefs[i].checkbox.current) {\n          this.props.mcRefs[i].checkbox.current!.checked = false;\n        }\n        \n      }\n    break;\n    case \"True/False\":\n      console.log(\"in\");\n      if (this.state.questionRef.current) {\n        this.state.questionRef.current!.value = \"\";\n      }\n  \n      for (let i = 0; i < this.props.tfRefs.length; i++) {\n        if (this.props.tfRefs[i].current) {\n          this.props.tfRefs[i].current!.checked = false;\n          console.log(this.props.tfRefs[i]);\n        }\n        \n      } \n    break;\n  }\n    \n  }\n\n  render() {\n    return (\n      <div id={styles[\"background-wrapper\"]}>\n        <div id={styles[\"timer\"]}>\n          <TimeSelector\n            ref={this.state.timeSelectorRef}\n            minsValuePass={value => this.props.minsValuePass(value)}\n            secsValuePass={value => this.props.secsValuePass(value)}\n          />\n        </div>\n        <div id={styles[\"scorer\"]}>\n          <ScoreSelector scoreValuePass={value => this.props.scoreValuePass(value)} />\n        </div>\n        <div id={styles[\"selector\"]}>\n        <button\n            id={styles[\"Next-button\"]}\n            onClick={() => {\n              this.props.keep();\n              this.deactivateAll();\n            }}\n          >\n            New Question\n          </button>\n          <Select\n            ref={this.state.dropDownRef}\n            id={styles[\"select\"]}\n            defaultValue={{ label: \"Multiple Choices\", value: \"Multiple\" }}\n            //value={this.state.selectedOption}\n            value={this.state.tempDropDownValue}\n            onChange={value => {this.props.onSelectionChange(value); this.setState({selectionChangeState: {\n              label: value?.label,\n              value: value?.value,\n            }, }, ()=>{console.log(this.state.selectionChangeState);});}}\n            options={this.props.data}\n          />\n        </div>\n        <div id={styles[\"inputer\"]}>\n          <input\n            ref={this.state.questionRef}\n            placeholder=\"Add Question...\"\n            id={styles[\"question-input\"]}\n            type=\"text\"\n            onChange={e => {\n              this.props.onQuestionInputChange(e);\n              this.props.questionRefPass(this.state.questionRef);\n            }}\n          />\n        </div>\n        {this.props.renderTarget}\n      </div>\n    );\n  }\n}\n",{"ruleId":"193","severity":1,"message":"194","line":176,"column":27,"nodeType":"195","messageId":"196","endLine":176,"endColumn":47},{"ruleId":"193","severity":1,"message":"194","line":82,"column":18,"nodeType":"195","messageId":"196","endLine":82,"endColumn":39,"suggestions":"197"},{"ruleId":"193","severity":1,"message":"194","line":127,"column":24,"nodeType":"195","messageId":"196","endLine":127,"endColumn":52},{"ruleId":"193","severity":1,"message":"194","line":331,"column":63,"nodeType":"195","messageId":"196","endLine":331,"endColumn":84,"suggestions":"198"},{"ruleId":"199","replacedBy":"200"},{"ruleId":"201","replacedBy":"202"},{"ruleId":"193","severity":1,"message":"194","line":95,"column":43,"nodeType":"195","messageId":"196","endLine":95,"endColumn":64},{"ruleId":"193","severity":1,"message":"194","line":98,"column":75,"nodeType":"195","messageId":"196","endLine":98,"endColumn":96},{"ruleId":"203","severity":1,"message":"204","line":9,"column":2,"nodeType":"205","messageId":"206","endLine":10,"endColumn":1,"fix":"207"},{"ruleId":"203","severity":1,"message":"204","line":24,"column":2,"nodeType":"205","messageId":"206","fix":"208"},{"ruleId":"193","severity":1,"message":"194","line":67,"column":12,"nodeType":"195","messageId":"196","endLine":67,"endColumn":20},{"ruleId":"193","severity":1,"message":"194","line":43,"column":7,"nodeType":"195","messageId":"196","endLine":43,"endColumn":29,"suggestions":"209"},{"ruleId":"193","severity":1,"message":"194","line":44,"column":24,"nodeType":"195","messageId":"196","endLine":44,"endColumn":46},{"ruleId":"193","severity":1,"message":"194","line":45,"column":9,"nodeType":"195","messageId":"196","endLine":45,"endColumn":31,"suggestions":"210"},{"ruleId":"193","severity":1,"message":"194","line":46,"column":34,"nodeType":"195","messageId":"196","endLine":46,"endColumn":56},{"ruleId":"193","severity":1,"message":"194","line":62,"column":27,"nodeType":"195","messageId":"196","endLine":62,"endColumn":51},{"ruleId":"211","severity":1,"message":"212","line":26,"column":7,"nodeType":"213","messageId":"214","endLine":26,"endColumn":19},{"ruleId":"215","severity":1,"message":"216","line":26,"column":7,"nodeType":"213","messageId":"217","endLine":26,"endColumn":19},{"ruleId":"215","severity":1,"message":"216","line":177,"column":16,"nodeType":"213","messageId":"217","endLine":177,"endColumn":28},{"ruleId":"193","severity":1,"message":"194","line":89,"column":15,"nodeType":"195","messageId":"196","endLine":89,"endColumn":33,"suggestions":"218"},{"ruleId":"193","severity":1,"message":"194","line":89,"column":42,"nodeType":"195","messageId":"196","endLine":89,"endColumn":60,"suggestions":"219"},{"ruleId":"220","severity":1,"message":"221","line":106,"column":9,"nodeType":"213","messageId":"222","endLine":106,"endColumn":14,"fix":"223"},{"ruleId":"224","severity":1,"message":"225","line":8,"column":8,"nodeType":"213","messageId":"226","endLine":8,"endColumn":20},{"ruleId":"224","severity":1,"message":"227","line":9,"column":8,"nodeType":"213","messageId":"226","endLine":9,"endColumn":21},{"ruleId":"224","severity":1,"message":"228","line":10,"column":8,"nodeType":"213","messageId":"226","endLine":10,"endColumn":14},{"ruleId":"224","severity":1,"message":"229","line":11,"column":8,"nodeType":"213","messageId":"226","endLine":11,"endColumn":15},{"ruleId":"220","severity":1,"message":"230","line":317,"column":9,"nodeType":"213","messageId":"222","endLine":317,"endColumn":16,"fix":"231"},{"ruleId":"193","severity":1,"message":"194","line":467,"column":37,"nodeType":"195","messageId":"196","endLine":467,"endColumn":52},{"ruleId":"193","severity":1,"message":"194","line":467,"column":60,"nodeType":"195","messageId":"196","endLine":467,"endColumn":75,"suggestions":"232"},{"ruleId":"224","severity":1,"message":"233","line":510,"column":9,"nodeType":"213","messageId":"226","endLine":510,"endColumn":34},{"ruleId":"193","severity":1,"message":"194","line":587,"column":21,"nodeType":"195","messageId":"196","endLine":587,"endColumn":50,"suggestions":"234"},{"ruleId":"193","severity":1,"message":"194","line":602,"column":21,"nodeType":"195","messageId":"196","endLine":602,"endColumn":50,"suggestions":"235"},{"ruleId":"236","severity":1,"message":"237","line":737,"column":29,"nodeType":"238","endLine":737,"endColumn":91},{"ruleId":"236","severity":1,"message":"237","line":763,"column":23,"nodeType":"238","endLine":763,"endColumn":51},{"ruleId":"236","severity":1,"message":"237","line":766,"column":23,"nodeType":"238","endLine":766,"endColumn":49},{"ruleId":"236","severity":1,"message":"237","line":769,"column":23,"nodeType":"238","endLine":769,"endColumn":52},{"ruleId":"236","severity":1,"message":"237","line":772,"column":23,"nodeType":"238","endLine":772,"endColumn":42},{"ruleId":"236","severity":1,"message":"237","line":775,"column":23,"nodeType":"238","endLine":775,"endColumn":40},{"ruleId":"236","severity":1,"message":"237","line":778,"column":23,"nodeType":"238","endLine":778,"endColumn":42},{"ruleId":"203","severity":1,"message":"204","line":827,"column":114,"nodeType":"239","messageId":"206","endLine":827,"endColumn":115,"fix":"240"},{"ruleId":"203","severity":1,"message":"204","line":9,"column":2,"nodeType":"205","messageId":"206","fix":"241"},{"ruleId":"242","severity":1,"message":"243","line":129,"column":1,"nodeType":"244","messageId":"245","endLine":231,"endColumn":5},{"ruleId":"224","severity":1,"message":"246","line":2,"column":8,"nodeType":"213","messageId":"226","endLine":2,"endColumn":11},{"ruleId":"224","severity":1,"message":"247","line":12,"column":8,"nodeType":"213","messageId":"226","endLine":12,"endColumn":20},{"ruleId":"224","severity":1,"message":"248","line":13,"column":8,"nodeType":"213","messageId":"226","endLine":13,"endColumn":18},{"ruleId":"220","severity":1,"message":"221","line":87,"column":9,"nodeType":"213","messageId":"222","endLine":87,"endColumn":14,"fix":"249"},{"ruleId":"220","severity":1,"message":"221","line":128,"column":9,"nodeType":"213","messageId":"222","endLine":128,"endColumn":14,"fix":"250"},{"ruleId":"193","severity":1,"message":"194","line":71,"column":11,"nodeType":"195","messageId":"196","endLine":71,"endColumn":46,"suggestions":"251"},{"ruleId":"193","severity":1,"message":"194","line":75,"column":11,"nodeType":"195","messageId":"196","endLine":75,"endColumn":42,"suggestions":"252"},{"ruleId":"193","severity":1,"message":"194","line":79,"column":15,"nodeType":"195","messageId":"196","endLine":79,"endColumn":49,"suggestions":"253"},{"ruleId":"193","severity":1,"message":"194","line":80,"column":15,"nodeType":"195","messageId":"196","endLine":80,"endColumn":53,"suggestions":"254"},{"ruleId":"193","severity":1,"message":"194","line":84,"column":15,"nodeType":"195","messageId":"196","endLine":84,"endColumn":87,"suggestions":"255"},{"ruleId":"193","severity":1,"message":"194","line":87,"column":17,"nodeType":"195","messageId":"196","endLine":87,"endColumn":55,"suggestions":"256"},{"ruleId":"193","severity":1,"message":"194","line":94,"column":13,"nodeType":"195","messageId":"196","endLine":94,"endColumn":42,"suggestions":"257"},{"ruleId":"193","severity":1,"message":"194","line":95,"column":13,"nodeType":"195","messageId":"196","endLine":95,"endColumn":42,"suggestions":"258"},{"ruleId":"193","severity":1,"message":"194","line":111,"column":9,"nodeType":"195","messageId":"196","endLine":111,"endColumn":40,"suggestions":"259"},{"ruleId":"193","severity":1,"message":"194","line":116,"column":11,"nodeType":"195","messageId":"196","endLine":116,"endColumn":45,"suggestions":"260"},{"ruleId":"193","severity":1,"message":"194","line":120,"column":11,"nodeType":"195","messageId":"196","endLine":120,"endColumn":49,"suggestions":"261"},{"ruleId":"193","severity":1,"message":"194","line":128,"column":9,"nodeType":"195","messageId":"196","endLine":128,"endColumn":40,"suggestions":"262"},{"ruleId":"193","severity":1,"message":"194","line":133,"column":11,"nodeType":"195","messageId":"196","endLine":133,"endColumn":40,"suggestions":"263"},"@typescript-eslint/no-non-null-assertion","Forbidden non-null assertion.","TSNonNullExpression","noNonNull",["264"],["265"],"no-native-reassign",["266"],"no-negated-in-lhs",["267"],"semi","Missing semicolon.","VariableDeclaration","missingSemi",{"range":"268","text":"269"},{"range":"270","text":"269"},["271"],["272"],"@typescript-eslint/naming-convention","Class name `Answering_TF` must match one of the following formats: PascalCase","Identifier","doesNotMatchFormat","camelcase","Identifier 'Answering_TF' is not in camel case.","notCamelCase",["273"],["274"],"prefer-const","'audio' is never reassigned. Use 'const' instead.","useConst",{"range":"275","text":"276"},"@typescript-eslint/no-unused-vars","'TimeSelector' is defined but never used.","unusedVar","'ScoreSelector' is defined but never used.","'Select' is defined but never used.","'bossimg' is defined but never used.","'olddata' is never reassigned. Use 'const' instead.",{"range":"277","text":"278"},["279"],"'renderSlider' is defined but never used.",["280"],["281"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","ExpressionStatement",{"range":"282","text":"269"},{"range":"283","text":"269"},"no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","'CSS' is defined but never used.","'CorrectSound' is defined but never used.","'WrongSound' is defined but never used.",{"range":"284","text":"276"},{"range":"285","text":"276"},["286"],["287"],["288"],["289"],["290"],["291"],["292"],["293"],["294"],["295"],["296"],["297"],["298"],{"messageId":"299","fix":"300","desc":"301"},{"messageId":"299","fix":"302","desc":"301"},"no-global-assign","no-unsafe-negation",[135,135],";",[324,324],{"messageId":"299","fix":"303","desc":"301"},{"messageId":"299","fix":"304","desc":"301"},{"messageId":"299","fix":"305","desc":"301"},{"messageId":"299","fix":"306","desc":"301"},[3018,3047],"const audio = new Audio(music);",[9231,9266],"const olddata = this.state.AnswerSet;",{"messageId":"299","fix":"307","desc":"301"},{"messageId":"299","fix":"308","desc":"301"},{"messageId":"299","fix":"309","desc":"301"},[30588,30588],[184,184],[2422,2451],[3057,3086],{"messageId":"299","fix":"310","desc":"301"},{"messageId":"299","fix":"311","desc":"301"},{"messageId":"299","fix":"312","desc":"301"},{"messageId":"299","fix":"313","desc":"301"},{"messageId":"299","fix":"314","desc":"301"},{"messageId":"299","fix":"315","desc":"301"},{"messageId":"299","fix":"316","desc":"301"},{"messageId":"299","fix":"317","desc":"301"},{"messageId":"299","fix":"318","desc":"301"},{"messageId":"299","fix":"319","desc":"301"},{"messageId":"299","fix":"320","desc":"301"},{"messageId":"299","fix":"321","desc":"301"},{"messageId":"299","fix":"322","desc":"301"},"suggestOptionalChain",{"range":"323","text":"324"},"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator.",{"range":"325","text":"324"},{"range":"326","text":"324"},{"range":"327","text":"324"},{"range":"328","text":"324"},{"range":"329","text":"324"},{"range":"330","text":"324"},{"range":"331","text":"324"},{"range":"332","text":"324"},{"range":"333","text":"324"},{"range":"334","text":"324"},{"range":"335","text":"324"},{"range":"336","text":"324"},{"range":"337","text":"324"},{"range":"338","text":"324"},{"range":"339","text":"324"},{"range":"340","text":"324"},{"range":"341","text":"324"},{"range":"342","text":"324"},{"range":"343","text":"324"},{"range":"344","text":"324"},{"range":"345","text":"324"},[2589,2590],"?",[11350,11351],[1155,1156],[1266,1267],[2501,2502],[2528,2529],[14326,14327],[19333,19334],[20292,20293],[2872,2873],[3082,3083],[3306,3307],[3412,3413],[3606,3607],[3763,3764],[4043,4044],[4152,4153],[4580,4581],[4756,4757],[4883,4884],[5070,5071],[5236,5237]]